Функция ПолучениеДанных(Знач СтруктураДанных) Экспорт
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(СтруктураДанных, "ТипБд") Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("НомерСообщения", СтруктураДанных.НомерСообщения);
		СтруктураОтвета.Вставить("ДанныеПриняты", Ложь);
		СтруктураОтвета.Вставить("Статус", СтруктураДанных.Статус);
		СтруктураОтвета.Вставить("ОписаниеОшибки", СтруктураДанных.ОписаниеОшибки);
		Возврат СтруктураОтвета;
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(СтруктураДанных, "НомерСообщения") Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("НомерСообщения", СтруктураДанных.НомерСообщения);
		СтруктураОтвета.Вставить("ДанныеПриняты", Ложь);
		СтруктураОтвета.Вставить("Статус", СтруктураДанных.Статус);
		СтруктураОтвета.Вставить("ОписаниеОшибки", СтруктураДанных.ОписаниеОшибки);
		Возврат СтруктураОтвета;
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(СтруктураДанных, "УзелОбмена") Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("НомерСообщения", СтруктураДанных.НомерСообщения);
		СтруктураОтвета.Вставить("ДанныеПриняты", Ложь);
		СтруктураОтвета.Вставить("Статус", СтруктураДанных.Статус);
		СтруктураОтвета.Вставить("ОписаниеОшибки", СтруктураДанных.ОписаниеОшибки);
		Возврат СтруктураОтвета;
	КонецЕсли;
	Отказ=Ложь;
	Если СтруктураДанных.ТипБд = "КА 1.1" Тогда
		ПолучениеДанныхКА11(СтруктураДанных, Отказ);
	КонецЕсли;
	СтруктураОтвета=Новый Структура;
	СтруктураОтвета.Вставить("НомерСообщения", СтруктураДанных.НомерСообщения);
	СтруктураОтвета.Вставить("ДанныеПриняты", Не Отказ);
	Если СтруктураДанных.Свойство("Статус") Тогда
		СтруктураОтвета.Вставить("Статус", СтруктураДанных.Статус);
		СтруктураОтвета.Вставить("ОписаниеОшибки", СтруктураДанных.ОписаниеОшибки);
	КонецЕсли;
	Возврат СтруктураОтвета;
КонецФункции

#Область ПолучениеДанныхКА11

Процедура ПолучениеДанныхКА11(СтруктураДанных, Отказ)
	УзелОбмена=ПолучитьУзелОбмена(СтруктураДанных.УзелОбмена);
	Если ТипЗнч(УзелОбмена) <> Тип("ПланОбменаСсылка.ОбменКА11") Тогда
		СтруктураДанных.Вставить("Статус", 404);
		СтруктураДанных.Вставить("ОписаниеОшибки", "Не верный тип узла обмена");
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	ПолучениеДанныхСправочниковКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПолучениеДанныхРегистровКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПолучитьДанныеДокументовКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#Область ПолучениеДанныхСправочниковКА11

Процедура ПолучениеДанныхСправочниковКА11(СтруктураДанных, УзелОбмена, Отказ)
	ЗаписьОУНКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЗаписьИТП(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЗаписьАлкПродукцииКА11(СтруктураДанных, УзелОбмена, Отказ);
	ЗаписьОрганизацииКА11(СтруктураДанных, УзелОбмена, Отказ);
	ЗаписьПунктыРагрузкиКА11(СтруктураДанных, УзелОбмена, Отказ);
	ЗаписьКачествоКА11(СтруктураДанных, УзелОбмена, Отказ);
	ЗаписьСкладыКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЗаписьКлассификаторСправокАиБКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЗаписьТипыШККА11(СтруктураДанных, УзелОбмена, Отказ);
	ЗаписьФизЛицаКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЗаписьКонтрагентаКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЗаписьДоговорыКонтрагентовКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЗаписатьДанныеНоменклатуры(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЗаписьДанныхЕДКА11(СтруктураДанных, УзелОбмена, Отказ);
	ЗаписьСерииНМКА11(СтруктураДанных, УзелОбмена, Отказ);
КонецПроцедуры

#Область ОУНКА11

Процедура ЗаписьОУНКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("ОУН") Тогда
		Возврат;
	КонецЕсли;
	СтруктураДанных.ОУН.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	ТаблицаОУН=СтруктураДанных.ОУН;
	Для Каждого стр Из ТаблицаОУН Цикл
		Если стр.Обработано Тогда
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		СсылкаНаОбъект=Справочники.итОбразыУкрупняющейНоменклатуры.ПолучитьСсылку(стр.Ссылка);
		Если СсылкаНаОбъект.Пустая() Тогда
			СсылкаНаОбъект=Неопределено;
		Иначе
			ОбъектИзменения=СсылкаНаОбъект.ПолучитьОбъект();
			Если ОбъектИзменения = Неопределено Тогда
				СсылкаНаОбъект=Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если СсылкаНаОбъект = Неопределено Тогда
			Если стр.ЭтоГруппа Тогда
				Ссылка=СоздатьГруппуОУНКА11(стр, УзелОбмена, СтруктураДанных);
				Если Ссылка = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ОУН не был создан " + стр.Наименование);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			Иначе
				Ссылка=СоздатьЭлементОУНКА11(стр, УзелОбмена, СтруктураДанных);
				Если Ссылка = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ОУН не был создан " + стр.Наименование);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Статус=Неопределено;
			Если стр.ЭтоГруппа Тогда
				ИзменитьГруппуОУНКА11(стр, УзелОбмена, СтруктураДанных, СсылкаНаОбъект);
			Иначе
				ИзменитьЭлементОУНКА11(стр, УзелОбмена, СтруктураДанных, СсылкаНаОбъект);
			КонецЕсли;
			СтруктураДанных.Свойство("Статус", Статус);
			Если Статус = 404 Тогда
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Функция СоздатьГруппуОУНКА11(СтрокаДанных, УзелОбмена, СтруктураДанных)
	СсылкаГруппы=Неопределено;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=Справочники.итОбразыУкрупняющейНоменклатуры.ПолучитьСсылку(СтрокаДанных.Родитель);
		Если Родитель.Пустая() Тогда
			Родитель=Неопределено;
		Иначе
			ОбъектИзмененияДанных=Родитель.ПолучитьОбъект();
			Если ОбъектИзмененияДанных = Неопределено Тогда
				Родитель=Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.ОУН.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Если СтрокиСРодителем[0].ЭтоГруппа Тогда
					Родитель=СоздатьГруппуОУНКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
				Иначе
					Родитель=СоздатьЭлементОУНКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.итОбразыУкрупняющейНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		Возврат СсылкаГруппы;
	КонецЕсли;
	СсылкаНового=Справочники.итОбразыУкрупняющейНоменклатуры.ПолучитьСсылку(СтрокаДанных.Ссылка);
	НоваяГруппа=Справочники.итОбразыУкрупняющейНоменклатуры.СоздатьГруппу();
	НоваяГруппа.УстановитьСсылкуНового(СсылкаНового);
	НоваяГруппа.Наименование=СтрокаДанных.Наименование;
	НоваяГруппа.ПометкаУдаления=СтрокаДанных.ПометкаУдаления;
	НоваяГруппа.Родитель=Родитель;
	НоваяГруппа.ОбменДанными.Отправитель=УзелОбмена;
	НоваяГруппа.Записать();
	СсылкаГруппы=НоваяГруппа.Ссылка;
	ЗаписьСоотвОбмена(СсылкаГруппы, СтрокаДанных.Ссылка, СтрокаДанных.ИмяТипаПриемника, УзелОбмена);
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
	Возврат СсылкаГруппы;
КонецФункции

Функция СоздатьЭлементОУНКА11(СтрокаДанных, УзелОбмена, СтруктураДанных)
	СсылкаЭлемента=Неопределено;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=Справочники.итОбразыУкрупняющейНоменклатуры.ПолучитьСсылку(СтрокаДанных.Родитель);
		Если Родитель.Пустая() Тогда
			Родитель=Неопределено;
		Иначе
			ОбъектИзмененияДанных=Родитель.ПолучитьОбъект();
			Если ОбъектИзмененияДанных = Неопределено Тогда
				Родитель=Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.ОУН.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Если СтрокиСРодителем[0].ЭтоГруппа Тогда
					Родитель=СоздатьГруппуОУНКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
				Иначе
					Родитель=СоздатьЭлементОУНКА11(СтрокаДанных, УзелОбмена, СтруктураДанных);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.итОбразыУкрупняющейНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		Возврат СсылкаЭлемента;
	КонецЕсли;
	СсылкаНового=Справочники.итОбразыУкрупняющейНоменклатуры.ПолучитьСсылку(СтрокаДанных.Ссылка);
	НовыйЭлемент=Справочники.итОбразыУкрупняющейНоменклатуры.СоздатьЭлемент();
	НовыйЭлемент.УстановитьСсылкуНового(СсылкаНового);
	НовыйЭлемент.Наименование=СтрокаДанных.Наименование;
	НовыйЭлемент.ГУИД=СтрокаДанных.ГУИД;
	НовыйЭлемент.НаименованиеПолное=СтрокаДанных.НаименованиеПолное;
	НовыйЭлемент.ПометкаУдаления=СтрокаДанных.ПометкаУдаления;
	НовыйЭлемент.Родитель=Родитель;
	НовыйЭлемент.ОбменДанными.Отправитель=УзелОбмена;
	НовыйЭлемент.Записать();
	СсылкаЭлемента=НовыйЭлемент.Ссылка;
	//ЗаписьСоотвОбмена(СсылкаЭлемента,СтрокаДанных.Ссылка,СтрокаДанных.ИмяТипаПриемника,УзелОбмена);
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
	Возврат СсылкаЭлемента;
КонецФункции
Процедура ИзменитьГруппуОУНКА11(СтрокаДанных, УзелОбмена, СтруктураДанных, Ссылка)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=Справочники.итОбразыУкрупняющейНоменклатуры.ПолучитьСсылку(СтрокаДанных.Родитель);
		Если Родитель.Пустая() Тогда
			Родитель=Неопределено;
		Иначе
			ОбъектИзмененияДанных=Родитель.ПолучитьОбъект();
			Если ОбъектИзмененияДанных = Неопределено Тогда
				Родитель=Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.ОУН.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Если СтрокиСРодителем[0].ЭтоГруппа Тогда
					Родитель=СоздатьГруппуОУНКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
				Иначе
					Родитель=СоздатьЭлементОУНКА11(СтрокаДанных, УзелОбмена, СтруктураДанных);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.итОбразыУкрупняющейНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		СтруктураДанных.Вставить("Статус", 404);
		СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ОУН не был изменен " + СтрокаДанных.Наименование);
		Возврат;
	КонецЕсли;
	ОбъектИзменения=Ссылка.ПолучитьОбъект();
	ОбъектИзменения.Наименование=СтрокаДанных.Наименование;
	ОбъектИзменения.ПометкаУдаления=СтрокаДанных.ПометкаУдаления;
	ОбъектИзменения.Родитель=Родитель;
	ОбъектИзменения.ОбменДанными.Отправитель=УзелОбмена;
	ОбъектИзменения.Записать();
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
КонецПроцедуры

Процедура ИзменитьЭлементОУНКА11(СтрокаДанных, УзелОбмена, СтруктураДанных, Ссылка)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=Справочники.итОбразыУкрупняющейНоменклатуры.ПолучитьСсылку(СтрокаДанных.Родитель);
		Если Родитель.Пустая() Тогда
			Родитель=Неопределено;
		Иначе
			ОбъектИзмененияДанных=Родитель.ПолучитьОбъект();
			Если ОбъектИзмененияДанных = Неопределено Тогда
				Родитель=Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.ОУН.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Если СтрокиСРодителем[0].ЭтоГруппа Тогда
					Родитель=СоздатьГруппуОУНКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
				Иначе
					Родитель=СоздатьЭлементОУНКА11(СтрокаДанных, УзелОбмена, СтруктураДанных);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.итОбразыУкрупняющейНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		СтруктураДанных.Вставить("Статус", 404);
		СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ОУН не был изменен " + СтрокаДанных.Наименование);
		Возврат;
	КонецЕсли;
	ОбъектИзменения=Ссылка.ПолучитьОбъект();
	ОбъектИзменения.Наименование=СтрокаДанных.Наименование;
	ОбъектИзменения.ГУИД=СтрокаДанных.ГУИД;
	ОбъектИзменения.НаименованиеПолное=СтрокаДанных.НаименованиеПолное;
	ОбъектИзменения.ПометкаУдаления=СтрокаДанных.ПометкаУдаления;
	ОбъектИзменения.Родитель=Родитель;
	ОбъектИзменения.ОбменДанными.Отправитель=УзелОбмена;
	ОбъектИзменения.Записать();
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
КонецПроцедуры

#КонецОбласти

#Область СправочникиБезИерархииКА11

Процедура ЗаписьИТП(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("ИТП") Тогда
		Возврат;
	КонецЕсли;
	ТаблицаИТП=СтруктураДанных.ИТП;
	Для Каждого стр Из ТаблицаИТП Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		СсылкаНаИТП=Справочники.итИндентификаторыТоварныхПозиций.ПолучитьСсылку(стр.Ссылка);
		ОбъектКИзменению=СсылкаНаИТП.Получитьобъект();
		Если ОбъектКИзменению = Неопределено Тогда
			ОбъектКИзменению=Справочники.итИндентификаторыТоварныхПозиций.СоздатьЭлемент();
			ОбъектКИзменению.УстановитьСсылкуНового(СсылкаНаИТП);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектКИзменению, стр, , "УкрупняющаяНоменклатура,Ссылка");
		
		//@skip-check query-in-loop
		ОУН=ПоискЭлементаСоответствияОбмена(стр.УкрупняющаяНоменклатура, УзелОбмена);
		Если ОУН <> Неопределено Тогда
			ОбъектКИзменению.УкрупняющаяНоменклатура=ОУН;
		КонецЕсли;
		ОбъектКИзменению.УкрупняющаяНоменклатура=ОУН;
		ОбъектКИзменению.ОбменДанными.Отправитель=УзелОбмена;
		ОбъектКИзменению.Записать();
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписьАлкПродукцииКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("АлкПродукцияЕгаис") Тогда
		Возврат;
	КонецЕсли;
	ТаблицаАлкПродукцияЕгаис=СтруктураДанных.АлкПродукцияЕгаис;
	Для Каждого стр Из ТаблицаАлкПродукцияЕгаис Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйЭлемент=Ложь;
		
		//@skip-check query-in-loop
		СсылкаАлкПродукции=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		ОбъектКИзменению=Неопределено;
		Если СсылкаАлкПродукции = Неопределено Тогда
			ОбъектКИзменению=Справочники.алкКлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
			НовыйЭлемент=Истина;
		Иначе
			ОбъектКИзменению=СсылкаАлкПродукции.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектКИзменению, стр, , "Ссылка");
		ОбъектКИзменению.ОбменДанными.Отправитель=УзелОбмена;
		ОбъектКИзменению.Записать();
		Если НовыйЭлемент Тогда
			ЗаписьСоотвОбмена(ОбъектКИзменению.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписьОрганизацииКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("Организации") Тогда
		Возврат;
	КонецЕсли;
	ТаблицаОрганизации=СтруктураДанных.Организации;
	Для Каждого стр Из ТаблицаОрганизации Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйЭлемент=Ложь;
		
		//@skip-check query-in-loop
		СсылкаОрганизации=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		ОбъектКИзменению=Неопределено;
		Если СсылкаОрганизации = Неопределено Тогда
			ОбъектКИзменению=Справочники.Организации.СоздатьЭлемент();
			НовыйЭлемент=Истина;
		Иначе
			ОбъектКИзменению=СсылкаОрганизации.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектКИзменению, стр, , "Ссылка,Префикс");
		Если НовыйЭлемент Тогда
			ОбъектКИзменению.Префикс=стр.Префикс;
		КонецЕсли;
		ОбъектКИзменению.ОбменДанными.Отправитель=УзелОбмена;
		ОбъектКИзменению.Записать();
		Если НовыйЭлемент Тогда
			ЗаписьСоотвОбмена(ОбъектКИзменению.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписьКачествоКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("Качество") Тогда
		Возврат;
	КонецЕсли;
	ТаблицаКачество=СтруктураДанных.Качество;
	Для Каждого стр Из ТаблицаКачество Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйЭлемент=Ложь;
		
		//@skip-check query-in-loop
		СсылкаКачество=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		ОбъектКИзменению=Неопределено;
		Если СсылкаКачество = Неопределено Тогда
			Если стр.Предопределенный Тогда
				СсылкаКИзменению=Справочники.Качество.НайтиПоНаименованию(стр.Наименование);
				Если СсылкаКИзменению.Пустая() Тогда
					ОбъектКИзменению=Справочники.Качество.СоздатьЭлемент();
				Иначе
					ОбъектКИзменению=СсылкаКИзменению.ПолучитьОбъект();
				КонецЕсли;
			Иначе
				ОбъектКИзменению=Справочники.Качество.СоздатьЭлемент();
			КонецЕсли;
			НовыйЭлемент=Истина;
		Иначе
			ОбъектКИзменению=СсылкаКачество.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектКИзменению, стр, , "Ссылка");
		ОбъектКИзменению.ОбменДанными.Отправитель=УзелОбмена;
		ОбъектКИзменению.Записать();
		Если НовыйЭлемент Тогда
			ЗаписьСоотвОбмена(ОбъектКИзменению.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписьТипыШККА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("ТипыШК") Тогда
		Возврат;
	КонецЕсли;
	ТаблицаТипыШК=СтруктураДанных.ТипыШК;
	Для Каждого стр Из ТаблицаТипыШК Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйЭлемент=Ложь;
		
		//@skip-check query-in-loop
		СсылкаТипыШК=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		ОбъектКИзменению=Неопределено;
		Если СсылкаТипыШК = Неопределено Тогда
			Если стр.Предопределенный Тогда
				СсылкаКИзменению=Справочники.ТипыШтрихкодов.НайтиПоНаименованию(стр.Наименование);
				Если СсылкаКИзменению.Пустая() Тогда
					ОбъектКИзменению=Справочники.ТипыШтрихкодов.СоздатьЭлемент();
				Иначе
					ОбъектКИзменению=СсылкаКИзменению.ПолучитьОбъект();
				КонецЕсли;
			Иначе
				ОбъектКИзменению=Справочники.ТипыШтрихкодов.СоздатьЭлемент();
			КонецЕсли;
			НовыйЭлемент=Истина;
		Иначе
			ОбъектКИзменению=СсылкаТипыШК.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектКИзменению, стр, , "Ссылка");
		ОбъектКИзменению.ОбменДанными.Отправитель=УзелОбмена;
		ОбъектКИзменению.Записать();
		Если НовыйЭлемент Тогда
			ЗаписьСоотвОбмена(ОбъектКИзменению.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписьСерииНМКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("СерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСерииНоменклатуры=СтруктураДанных.СерииНоменклатуры;
	Для Каждого стр Из ТаблицаСерииНоменклатуры Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		//@skip-check query-in-loop
		Владелец=ПоискЭлементаСоответствияОбмена(стр.Владелец, УзелОбмена);
		Если Владелец = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		НовыйЭлемент=Ложь;
		Организация=Неопределено;
		Если стр.Организация<>ПустойИдентификатор() тогда
		//@skip-check query-in-loop
		Организация=ПоискЭлементаСоответствияОбмена(стр.Организация,УзелОбмена);
		
		КонецЕсли;
		

		
		//@skip-check query-in-loop
		СсылкаСерии=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		ОбъектКИзменению=Неопределено;
		Если СсылкаСерии = Неопределено Тогда
			Если стр.СсылкаВДругойИБ <> Неопределено Тогда
				СсылкаВДругойИБ=Справочники.СерииНоменклатуры.ПолучитьСсылку(стр.СсылкаВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если ОбъектСсылкиДругойИБ <> Неопределено Тогда
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
					СсылкаСерии=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если СсылкаСерии = Неопределено Тогда
				ОбъектКИзменению=Справочники.СерииНоменклатуры.СоздатьЭлемент();
				НовыйЭлемент=Истина;
			Иначе
				ОбъектКИзменению=СсылкаСерии.ПолучитьОбъект();
			КонецЕсли;
		Иначе
			ОбъектКИзменению=СсылкаСерии.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектКИзменению, стр, , "Ссылка,Владелец");
		КаПустаяСсылка= Справочники.Контрагенты.ПустаяСсылка();
		
		//@skip-check query-in-loop
		Производитель=ПоискЭлементаСоответствияОбмена(стр.Производитель, УзелОбмена);
		Если Производитель = Неопределено Тогда
			Производитель=КаПустаяСсылка;
		КонецЕсли;
		ОбъектКИзменению.Производитель=Производитель;
		ОбъектКИзменению.Владелец=Владелец;
		Если Организация<>Неопределено Тогда
			ОбъектКИзменению.Организация=Организация;
		КонецЕсли;
		ОбъектКИзменению.Организация=УзелОбмена.Организация;
		
		//@skip-check query-in-loop
		ОбъектКИзменению.СтранаПроисхождения= НайтиСтрануПоКоду(стр.СтранаПроисхожденияКод);
		ОбъектКИзменению.ОбменДанными.Отправитель=УзелОбмена;
		ОбъектКИзменению.Записать();
		Если НовыйЭлемент Тогда
			ЗаписьСоотвОбмена(ОбъектКИзменению.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписьПунктыРагрузкиКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("ПунктыРазгрузки") Тогда
		Возврат;
	КонецЕсли;
	ТаблицаПунктыРазгрузки=СтруктураДанных.ПунктыРазгрузки;
	Для Каждого стр Из ТаблицаПунктыРазгрузки Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		//@skip-check query-in-loop
		Владелец=ПоискЭлементаСоответствияОбмена(стр.Владелец, УзелОбмена);
		Если Владелец = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		НовыйЭлемент=Ложь;
		
		//@skip-check query-in-loop
		СсылкаПунктыРазгрузки=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		ОбъектКИзменению=Неопределено;
		Если СсылкаПунктыРазгрузки = Неопределено Тогда
			ОбъектКИзменению=Справочники.алкПунктыРазгрузки.СоздатьЭлемент();
			НовыйЭлемент=Истина;
		Иначе
			ОбъектКИзменению=СсылкаПунктыРазгрузки.ПолучитьОбъект();
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ОбъектКИзменению, стр, , "Ссылка,Владелец");
		ОбъектКИзменению.Владелец=Владелец;
		ОбъектКИзменению.ОбменДанными.Отправитель=УзелОбмена;
		ОбъектКИзменению.Записать();
		Если НовыйЭлемент Тогда
			ЗаписьСоотвОбмена(ОбъектКИзменению.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

#Область СкладыКА11

Процедура ЗаписьСкладыКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("Склады") Тогда
		Возврат;
	КонецЕсли;
	СтруктураДанных.Склады.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	ТаблицаСклады=СтруктураДанных.Склады;
	Для Каждого стр Из ТаблицаСклады Цикл
		Если стр.Обработано Тогда
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		//@skip-check query-in-loop
		СсылкаНаОбъект=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		Если СсылкаНаОбъект = Неопределено Тогда
				
				//@skip-check query-in-loop
			Ссылка=СоздатьСкладКА11(стр, УзелОбмена, СтруктураДанных);
			Если Ссылка = Неопределено Тогда
				СтруктураДанных.Вставить("Статус", 404);
				СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Склад не был создан " + стр.Наименование);
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		Иначе
			Статус=Неопределено;
			
			//@skip-check query-in-loop
			ИзменитьДанныеСкладыКА11(стр, УзелОбмена, СтруктураДанных, СсылкаНаОбъект);
			СтруктураДанных.Свойство("Статус", Статус);
			Если Статус = 404 Тогда
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Функция СоздатьСкладКА11(СтрокаДанных, УзелОбмена, СтруктураДанных)
	СсылкаЭлементаСклада=Неопределено;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель, УзелОбмена);
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.Склады.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Родитель=СоздатьСкладКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		Возврат СсылкаЭлементаСклада;
	КонецЕсли;
	Если СтрокаДанных.ЭтоГруппа Тогда
		НовыйОбъект=Справочники.Склады.СоздатьГруппу();
	Иначе
		НовыйОбъект=Справочники.Склады.СоздатьЭлемент();
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(НовыйОбъект, СтрокаДанных, , "Ссылка,Родитель");
	НовыйОбъект.ОбменДанными.Отправитель=УзелОбмена;
	НовыйОбъект.Родитель=Родитель;
	НовыйОбъект.Записать();
	СсылкаЭлементаСклада=НовыйОбъект.Ссылка;
	ЗаписьСоотвОбмена(СсылкаЭлементаСклада, СтрокаДанных.Ссылка, СтрокаДанных.ИмяТипаПриемника, УзелОбмена);
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
	Возврат СсылкаЭлементаСклада;
КонецФункции

Процедура ИзменитьДанныеСкладыКА11(СтрокаДанных, УзелОбмена, СтруктураДанных, СсылкаНаОбъект)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель, УзелОбмена);
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.Склады.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Родитель=СоздатьСкладКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		СтруктураДанных.Вставить("Статус", 404);
		СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Склад не был изменен " + СтрокаДанных.Наименование);
		Возврат;
	КонецЕсли;
	ОбъектИзменения=СсылкаНаОбъект.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ОбъектИзменения, СтрокаДанных, , "Ссылка,Родитель");
	ОбъектИзменения.ОбменДанными.Отправитель=УзелОбмена;
	ОбъектИзменения.Родитель=Родитель;
	ОбъектИзменения.Записать();
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
КонецПроцедуры
#КонецОбласти

#Область КлассификаторСправокАиБКА11

Процедура ЗаписьКлассификаторСправокАиБКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("КлассификаторСправокАиБ") Тогда
		Возврат;
	КонецЕсли;
	СтруктураДанных.КлассификаторСправокАиБ.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	ТаблицаКлассификаторСправокАиБ=СтруктураДанных.КлассификаторСправокАиБ;
	Для Каждого стр Из ТаблицаКлассификаторСправокАиБ Цикл
		Если стр.Обработано Тогда
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		//@skip-check query-in-loop
		СсылкаНаОбъект=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		Если СсылкаНаОбъект = Неопределено Тогда
				
				//@skip-check query-in-loop
			Ссылка=СоздатьЭлементКлассификаторСправокАиБКА11(стр, УзелОбмена, СтруктураДанных);
			Если Ссылка = Неопределено Тогда
				СтруктураДанных.Вставить("Статус", 404);
				СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Классификатора не был создан " + стр.код);
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		Иначе
			Статус=Неопределено;
			
			//@skip-check query-in-loop
			ИзменитьДанныеКлассификаторСправокАиБКА11(стр, УзелОбмена, СтруктураДанных, СсылкаНаОбъект);
			СтруктураДанных.Свойство("Статус", Статус);
			Если Статус = 404 Тогда
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры
Функция СоздатьЭлементКлассификаторСправокАиБКА11(СтрокаДанных, УзелОбмена, СтруктураДанных)
	СсылкаКлассификатора=Неопределено;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель, УзелОбмена);
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.КлассификаторСправокАиБ.НайтиСтроки(Новый Структура("Ссылка",
				СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Родитель=СоздатьЭлементКлассификаторСправокАиБКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.алкКлассификаторСправокАиБ.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		Возврат СсылкаКлассификатора;
	КонецЕсли;
	Владелец=Неопределено;
	Если СтрокаДанных.Владелец <> ПустойИдентификатор() Тогда
		Владелец=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Владелец, УзелОбмена);
	Иначе
		Владелец=Справочники.алкКлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
	КонецЕсли;
	Если Владелец = Неопределено Тогда
		Возврат СсылкаКлассификатора;
	КонецЕсли;
	Организация=Неопределено;
	Если СтрокаДанных.Организация <> ПустойИдентификатор() Тогда
		Организация=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Организация, УзелОбмена);
	Иначе
		Организация=Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Организация = Неопределено Тогда
		СтруктураДанных.Вставить("Статус", 404);
		СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Классификатор не был изменен,т.к не найдена организация "
			+ СтрокаДанных.код);
		Возврат СсылкаКлассификатора;
	КонецЕсли;

	НовыйОбъект=Справочники.алкКлассификаторСправокАиБ.СоздатьЭлемент();
	НовыйОбъект.ПометкаУдаления=СтрокаДанных.ПометкаУдаления;
	НовыйОбъект.Код=СтрокаДанных.Код;
	НовыйОбъект.ТипСправки=СтрокаДанных.ТипСправки;
	НовыйОбъект.ДатаРозлива=СтрокаДанных.ДатаРозлива;
	НовыйОбъект.итПризнакПомарочногоУчета=СтрокаДанных.итПризнакПомарочногоУчета;
	//ЗаполнитьЗначенияСвойств(НовыйОбъект,СтрокаДанных,,"Ссылка,Родитель,Владелец");
	НовыйОбъект.ОбменДанными.Отправитель=УзелОбмена;
	НовыйОбъект.Родитель=Родитель;
	НовыйОбъект.Владелец=Владелец;
	НовыйОбъект.Организация=Организация;
	НовыйОбъект.Записать();
	СсылкаКлассификатора=НовыйОбъект.Ссылка;
	ЗаписьСоотвОбмена(СсылкаКлассификатора, СтрокаДанных.Ссылка, СтрокаДанных.ИмяТипаПриемника, УзелОбмена);
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
	Возврат СсылкаКлассификатора;
КонецФункции

Процедура ИзменитьДанныеКлассификаторСправокАиБКА11(СтрокаДанных, УзелОбмена, СтруктураДанных, СсылкаНаОбъект)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель, УзелОбмена);
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.КлассификаторСправокАиБ.НайтиСтроки(Новый Структура("Ссылка",
				СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Родитель=СоздатьЭлементКлассификаторСправокАиБКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.алкКлассификаторСправокАиБ.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		СтруктураДанных.Вставить("Статус", 404);
		СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Классификатор не был изменен " + СтрокаДанных.код);
		Возврат;
	КонецЕсли;
	Владелец=Неопределено;
	Если СтрокаДанных.Владелец <> ПустойИдентификатор() Тогда
		Владелец=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Владелец, УзелОбмена);
	Иначе
		Владелец=Справочники.алкКлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
	КонецЕсли;
	Если Владелец = Неопределено Тогда
		СтруктураДанных.Вставить("Статус", 404);
		СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Классификатор не был изменен,т.к не найден владелец "
			+ СтрокаДанных.код);
		Возврат;
	КонецЕсли;
	Организация=Неопределено;
	Если СтрокаДанных.Организация <> ПустойИдентификатор() Тогда
		Организация=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Организация, УзелОбмена);
	Иначе
		Организация=Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Организация = Неопределено Тогда
		СтруктураДанных.Вставить("Статус", 404);
		СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Классификатор не был изменен,т.к не найдена организация "
			+ СтрокаДанных.код);
		Возврат;
	КонецЕсли;

	БлокировкаДанных=Новый БлокировкаДанных;
	ЭлементБлокировки=БлокировкаДанных.Добавить("Справочник.алкКлассификаторСправокАиБ");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
	БлокировкаДанных.Заблокировать();

	ОбъектИзменения=СсылкаНаОбъект.ПолучитьОбъект();
	ОбъектИзменения.ПометкаУдаления=СтрокаДанных.ПометкаУдаления;
	ОбъектИзменения.Код=СтрокаДанных.Код;
	ОбъектИзменения.ТипСправки=СтрокаДанных.ТипСправки;
	ОбъектИзменения.ДатаРозлива=СтрокаДанных.ДатаРозлива;
	ОбъектИзменения.итПризнакПомарочногоУчета=СтрокаДанных.итПризнакПомарочногоУчета;
	//ЗаполнитьЗначенияСвойств(ОбъектИзменения,СтрокаДанных,,"Ссылка,Родитель,Владелец");
	ОбъектИзменения.ОбменДанными.Отправитель=УзелОбмена;
	ОбъектИзменения.Родитель=Родитель;
	ОбъектИзменения.Организация=Организация;
	ОбъектИзменения.Владелец=Владелец;
	ОбъектИзменения.Записать();
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
КонецПроцедуры

#КонецОбласти

#Область ФизическиеЛицаКА11

Процедура ЗаписьФизЛицаКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("ФизЛица") Тогда
		Возврат;
	КонецЕсли;
	СтруктураДанных.ФизЛица.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	ТаблицаФизЛица=СтруктураДанных.ФизЛица;
	Для Каждого стр Из ТаблицаФизЛица Цикл
		Если стр.Обработано Тогда
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		//@skip-check query-in-loop
		СсылкаНаОбъект=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		Если СсылкаНаОбъект = Неопределено Тогда
				
				//@skip-check query-in-loop
			Ссылка=СоздатьОбъектФизЛицКА11(стр, УзелОбмена, СтруктураДанных);
			Если Ссылка = Неопределено Тогда
				СтруктураДанных.Вставить("Статус", 404);
				СтруктураДанных.Вставить("ОписаниеОшибки", "Объект физ лиц не был создан " + стр.Наименование);
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		Иначе
			Статус=Неопределено;
			
			//@skip-check query-in-loop
			ИзменитьОбъектФизЛицКА11(стр, УзелОбмена, СтруктураДанных, СсылкаНаОбъект);
			СтруктураДанных.Свойство("Статус", Статус);
			Если Статус = 404 Тогда
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Функция СоздатьОбъектФизЛицКА11(СтрокаДанных, УзелОбмена, СтруктураДанных)
	СсылкаФизЛица=Неопределено;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель, УзелОбмена);
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.ФизЛица.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Родитель=СоздатьОбъектФизЛицКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		Возврат СсылкаФизЛица;
	КонецЕсли;

	Если СтрокаДанных.ЭтоГруппа Тогда
		НовыйОбъект=Справочники.ФизическиеЛица.СоздатьГруппу();
		ЗаполнитьЗначенияСвойств(НовыйОбъект, СтрокаДанных, , "Ссылка,Родитель,ДатаРождения,ИНН,ШтрихКод,Пол");
	Иначе
		НовыйОбъект=Справочники.ФизическиеЛица.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйОбъект, СтрокаДанных, , "Ссылка,Родитель");
	КонецЕсли;
	НовыйОбъект.ОбменДанными.Отправитель=УзелОбмена;
	НовыйОбъект.Родитель=Родитель;
	НовыйОбъект.Записать();
	СсылкаФизЛица=НовыйОбъект.Ссылка;
	ЗаписьСоотвОбмена(СсылкаФизЛица, СтрокаДанных.Ссылка, СтрокаДанных.ИмяТипаПриемника, УзелОбмена);
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
	Возврат СсылкаФизЛица;
КонецФункции

Процедура ИзменитьОбъектФизЛицКА11(СтрокаДанных, УзелОбмена, СтруктураДанных, СсылкаНаОбъект)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель, УзелОбмена);
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.ФизЛица.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Родитель=СоздатьОбъектФизЛицКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		СтруктураДанных.Вставить("Статус", 404);
		СтруктураДанных.Вставить("ОписаниеОшибки", "Объект физ лица не был изменен " + СтрокаДанных.Наименование);
		Возврат;
	КонецЕсли;
	ОбъектИзменения=СсылкаНаОбъект.ПолучитьОбъект();
	Если СтрокаДанных.ЭтоГруппа Тогда
		ЗаполнитьЗначенияСвойств(ОбъектИзменения, СтрокаДанных, , "Ссылка,Родитель,ДатаРождения,ИНН,ШтрихКод,Пол");
	Иначе
		ЗаполнитьЗначенияСвойств(ОбъектИзменения, СтрокаДанных, , "Ссылка,Родитель");
	КонецЕсли;
	ОбъектИзменения.ОбменДанными.Отправитель=УзелОбмена;
	ОбъектИзменения.Родитель=Родитель;
	ОбъектИзменения.Записать();
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
КонецПроцедуры

#КонецОбласти

#Область КонтрАгентаКА11

Процедура ЗаписьКонтрагентаКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("Контрагенты") Тогда
		Возврат;
	КонецЕсли;
	СтруктураДанных.Контрагенты.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	ТаблицаКонтрагенты=СтруктураДанных.Контрагенты;
	Для Каждого стр Из ТаблицаКонтрагенты Цикл
		Если стр.Обработано Тогда
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		//@skip-check query-in-loop
		СсылкаНаОбъект=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		Если СсылкаНаОбъект = Неопределено Тогда
				
				//@skip-check query-in-loop
			Ссылка=СоздатьОбъектКонтрАгентаКА11(стр, УзелОбмена, СтруктураДанных);
			Если Ссылка = Неопределено Тогда
				СтруктураДанных.Вставить("Статус", 404);
				СтруктураДанных.Вставить("ОписаниеОшибки", "Объект контрагента не был создан " + стр.Наименование);
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		Иначе
			Статус=Неопределено;
			
			//@skip-check query-in-loop
			ИзменитьОбъектКонтрАгентаКА11(стр, УзелОбмена, СтруктураДанных, СсылкаНаОбъект);
			СтруктураДанных.Свойство("Статус", Статус);
			Если Статус = 404 Тогда
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Функция СоздатьОбъектКонтрАгентаКА11(СтрокаДанных, УзелОбмена, СтруктураДанных)
	СсылкаКонтрагента=Неопределено;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель, УзелОбмена);
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.Контрагенты.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Родитель=СоздатьОбъектКонтрАгентаКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		Возврат СсылкаКонтрагента;
	КонецЕсли;

	Если СтрокаДанных.ЭтоГруппа Тогда
		НовыйОбъект=Справочники.Контрагенты.СоздатьГруппу();
		ЗаполнитьЗначенияСвойств(НовыйОбъект, СтрокаДанных, ,
			"Ссылка,Родитель,ИНН,КПП,ит_WMS_ВидСкладскойДеятельности,НаименованиеПолное,итОтгрузкаПолнымиПалетами,итПроцентДопустимогоОстаточногоСрокаГодности");
	Иначе
		НовыйОбъект=Справочники.Контрагенты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйОбъект, СтрокаДанных, , "Ссылка,Родитель");
	КонецЕсли;
	НовыйОбъект.ОбменДанными.Отправитель=УзелОбмена;
	НовыйОбъект.Родитель=Родитель;
	НовыйОбъект.Записать();
	СсылкаКонтрагента=НовыйОбъект.Ссылка;
	ЗаписьСоотвОбмена(СсылкаКонтрагента, СтрокаДанных.Ссылка, СтрокаДанных.ИмяТипаПриемника, УзелОбмена);
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
	Возврат СсылкаКонтрагента;
КонецФункции

Процедура ИзменитьОбъектКонтрАгентаКА11(СтрокаДанных, УзелОбмена, СтруктураДанных, СсылкаНаОбъект)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель, УзелОбмена);
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.Контрагенты.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Родитель=СоздатьОбъектКонтрАгентаКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		СтруктураДанных.Вставить("Статус", 404);
		СтруктураДанных.Вставить("ОписаниеОшибки", "Объект контрагента не был изменен " + СтрокаДанных.Наименование);
		Возврат;
	КонецЕсли;
	ОбъектИзменения=СсылкаНаОбъект.ПолучитьОбъект();
	Если СтрокаДанных.ЭтоГруппа Тогда
		ЗаполнитьЗначенияСвойств(ОбъектИзменения, СтрокаДанных, ,
			"Ссылка,Родитель,ИНН,КПП,ит_WMS_ВидСкладскойДеятельности,НаименованиеПолное,итОтгрузкаПолнымиПалетами,итПроцентДопустимогоОстаточногоСрокаГодности");
	Иначе
		ЗаполнитьЗначенияСвойств(ОбъектИзменения, СтрокаДанных, , "Ссылка,Родитель");
	КонецЕсли;
	ОбъектИзменения.ОбменДанными.Отправитель=УзелОбмена;
	ОбъектИзменения.Родитель=Родитель;
	ОбъектИзменения.Записать();
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
КонецПроцедуры

#КонецОбласти

#Область ДоговрКонтрАгентаКА11
Процедура ЗаписьДоговорыКонтрагентовКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("ДоговорыКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	СтруктураДанных.ДоговорыКонтрагентов.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	ДоговорыКонтрагентов=СтруктураДанных.ДоговорыКонтрагентов;
	Для Каждого стр Из ДоговорыКонтрагентов Цикл
		Если стр.Обработано Тогда
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		//@skip-check query-in-loop
		СсылкаНаОбъект=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		Если СсылкаНаОбъект = Неопределено Тогда
				
				//@skip-check query-in-loop
			Ссылка=СоздатьОбъектДоговораКонтрагентаКА11(стр, УзелОбмена, СтруктураДанных);
			Если Ссылка = Неопределено Тогда
				СтруктураДанных.Вставить("Статус", 404);
				СтруктураДанных.Вставить("ОписаниеОшибки", "Объект договора не был создан " + стр.Наименование);
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		Иначе
			Статус=Неопределено;
			
			//@skip-check query-in-loop
			ИзменитьОбъектДоговораКонтрагентаКА11(стр, УзелОбмена, СтруктураДанных, СсылкаНаОбъект);
			СтруктураДанных.Свойство("Статус", Статус);
			Если Статус = 404 Тогда
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры
Функция СоздатьОбъектДоговораКонтрагентаКА11(СтрокаДанных, УзелОбмена, СтруктураДанных)
	СсылкаДоговора=Неопределено;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель, УзелОбмена);
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.ДоговорыКонтрагентов.НайтиСтроки(Новый Структура("Ссылка",
				СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Родитель=СоздатьОбъектДоговораКонтрагентаКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		Возврат СсылкаДоговора;
	КонецЕсли;

	Если СтрокаДанных.ЭтоГруппа Тогда
		НовыйОбъект=Справочники.ДоговорыКонтрагентов.СоздатьГруппу();
		НовыйОбъект.Наименование=СтрокаДанных.Наименование;
	Иначе
		НовыйОбъект=Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйОбъект.Наименование=СтрокаДанных.Наименование;
		НовыйОбъект.Комментарий=СтрокаДанных.Комментарий;
		НовыйОбъект.ОсобыеУсловияДоговора=СтрокаДанных.ОсобыеУсловияДоговора;
	КонецЕсли;
	Если СтрокаДанных.Владелец <> ПустойИдентификатор() Тогда
		Владелец=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Владелец, УзелОбмена);
		Если Владелец = Неопределено Тогда
			Владелец=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Владелец=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	НовыйОбъект.Владелец=Владелец;
	НовыйОбъект.ОбменДанными.Отправитель=УзелОбмена;
	НовыйОбъект.Родитель=Родитель;
	НовыйОбъект.Записать();
	СсылкаДоговора=НовыйОбъект.Ссылка;
	ЗаписьСоотвОбмена(СсылкаДоговора, СтрокаДанных.Ссылка, СтрокаДанных.ИмяТипаПриемника, УзелОбмена);
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
	Возврат СсылкаДоговора;
КонецФункции

Процедура ИзменитьОбъектДоговораКонтрагентаКА11(СтрокаДанных, УзелОбмена, СтруктураДанных, СсылкаНаОбъект)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель, УзелОбмена);
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.ДоговорыКонтрагентов.НайтиСтроки(Новый Структура("Ссылка",
				СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Родитель=СоздатьОбъектДоговораКонтрагентаКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		СтруктураДанных.Вставить("Статус", 404);
		СтруктураДанных.Вставить("ОписаниеОшибки", "Объект договора не был изменен " + СтрокаДанных.Наименование);
		Возврат;
	КонецЕсли;
	ОбъектИзменения=СсылкаНаОбъект.ПолучитьОбъект();
	Если СтрокаДанных.ЭтоГруппа Тогда
		ОбъектИзменения.Наименование=СтрокаДанных.Наименование;
	Иначе
		ОбъектИзменения.Наименование=СтрокаДанных.Наименование;
		ОбъектИзменения.Комментарий=СтрокаДанных.Комментарий;
		ОбъектИзменения.ОсобыеУсловияДоговора=СтрокаДанных.ОсобыеУсловияДоговора;
	КонецЕсли;
	Если СтрокаДанных.Владелец <> ПустойИдентификатор() Тогда
		Владелец=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Владелец, УзелОбмена);
		Если Владелец = Неопределено Тогда
			Владелец=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Владелец=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	ОбъектИзменения.Владелец=Владелец;

	ОбъектИзменения.ОбменДанными.Отправитель=УзелОбмена;
	ОбъектИзменения.Родитель=Родитель;
	ОбъектИзменения.Записать();
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
КонецПроцедуры
#КонецОбласти

#Область НоменклатураИЕдИзмеренияКА11
Процедура ЗаписатьДанныеНоменклатуры(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	Если СтруктураДанных.Свойство("ЕдИзмерения") Тогда
		Если СтруктураДанных.ЕдИзмерения.Колонки.найти("Обработано") = Неопределено Тогда
			СтруктураДанных.ЕдИзмерения.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
	КонецЕсли;
	СтруктураДанных.Номенклатура.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	ТаблицаНоменклатура=СтруктураДанных.Номенклатура;
	Для Каждого стр Из ТаблицаНоменклатура Цикл
		Если стр.Обработано Тогда
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		//@skip-check query-in-loop
		СсылкаНаОбъект=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		Если СсылкаНаОбъект = Неопределено Тогда
				
				//@skip-check query-in-loop
			Ссылка=СоздатьОбъектНоменклатурыКА11(стр, УзелОбмена, СтруктураДанных);
			Если Ссылка = Неопределено Тогда
				СтруктураДанных.Вставить("Статус", 404);
				СтруктураДанных.Вставить("ОписаниеОшибки", "Объект номенклатуры не был создан " + стр.Наименование);
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		Иначе
			Статус=Неопределено;
			
			//@skip-check query-in-loop
			ИзменитьДанныеНоменклатурыКА11(стр, УзелОбмена, СтруктураДанных, СсылкаНаОбъект);
			СтруктураДанных.Свойство("Статус", Статус);
			Если Статус = 404 Тогда
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры
Функция СоздатьОбъектНоменклатурыКА11(СтрокаДанных, УзелОбмена, СтруктураДанных)
	СсылкаНоменклатура=Неопределено;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель, УзелОбмена);
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.Номенклатура.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Родитель=СоздатьОбъектНоменклатурыКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		Возврат СсылкаНоменклатура;
	КонецЕсли;
	КаПустаяСсылка= Справочники.Контрагенты.ПустаяСсылка();
	Производитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Производитель, УзелОбмена);
	Если Производитель = Неопределено Тогда
		Производитель=КаПустаяСсылка;
	КонецЕсли;
	ИТП=Справочники.итИндентификаторыТоварныхПозиций.ПолучитьСсылку(СтрокаДанных.итИдентификаторНоменклатурнойПозиции);
	Если Не ИТП.Пустая() Тогда
		ОбъектИТП=ИТП.ПолучитьОбъект();
	КонецЕсли;
	Если СтрокаДанных.ЭтоГруппа Тогда
		НовыйОбъект=Справочники.Номенклатура.СоздатьГруппу();
		ЗаполнитьЗначенияСвойств(НовыйОбъект, СтрокаДанных, ,
			"Ссылка,Родитель,ЕдиницаХраненияОстатков,ЕдиницаИзмеренияМест,итИдентификаторНоменклатурнойПозиции,СрокГодности,Производитель");
	Иначе
		НовыйОбъект=Справочники.Номенклатура.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйОбъект, СтрокаДанных, ,
			"Ссылка,Родитель,ЕдиницаХраненияОстатков,ЕдиницаИзмеренияМест,итИдентификаторНоменклатурнойПозиции,Производитель");
		НовыйОбъект.Производитель=Производитель;
		НовыйОбъект.СтранаПроисхождения= НайтиСтрануПоКоду(СтрокаДанных.СтранаПроисхожденияКод);
	КонецЕсли;
	НовыйОбъект.ОбменДанными.Отправитель=УзелОбмена;
	НовыйОбъект.Родитель=Родитель;
	Если ОбъектИТП <> Неопределено Или ИТП.Пустая() Тогда
		НовыйОбъект.итИдентификаторНоменклатурнойПозиции=ИТП;
	КонецЕсли;
	НовыйОбъект.Записать();
	СсылкаНоменклатура=НовыйОбъект.Ссылка;
	ЗаписьСоотвОбмена(СсылкаНоменклатура, СтрокаДанных.Ссылка, СтрокаДанных.ИмяТипаПриемника, УзелОбмена);
	ЕдиницаХраненияОстатков=ПоискЭлементаСоответствияОбмена(СтрокаДанных.ЕдиницаХраненияОстатков, УзелОбмена);
	Если ЕдиницаХраненияОстатков = Неопределено Тогда
		СтрокиСЕД=СтруктураДанных.ЕдИзмерения.НайтиСтроки(Новый Структура("Ссылка",
			СтрокаДанных.ЕдиницаХраненияОстатков));
		Если СтрокиСЕД.Количество() > 0 Тогда
			ЕдиницаХраненияОстатков=СоздатьЕдКА11(СтрокиСЕД[0], УзелОбмена, СтруктураДанных);
		КонецЕсли;
	КонецЕсли;
	Если ЕдиницаХраненияОстатков <> Неопределено И Не СтрокаДанных.ЭтоГруппа Тогда
		НовыйОбъект.ЕдиницаХраненияОстатков=ЕдиницаХраненияОстатков;
	КонецЕсли;
	ЕдиницаИзмеренияМест=ПоискЭлементаСоответствияОбмена(СтрокаДанных.ЕдиницаИзмеренияМест, УзелОбмена);
	Если ЕдиницаИзмеренияМест = Неопределено Тогда
		СтрокиСЕД=СтруктураДанных.ЕдИзмерения.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.ЕдиницаИзмеренияМест));
		Если СтрокиСЕД.Количество() > 0 Тогда
			ЕдиницаИзмеренияМест=СоздатьЕдКА11(СтрокиСЕД[0], УзелОбмена, СтруктураДанных);
		КонецЕсли;
	КонецЕсли;
	Если ЕдиницаИзмеренияМест <> Неопределено И Не СтрокаДанных.ЭтоГруппа Тогда
		НовыйОбъект.ЕдиницаИзмеренияМест=ЕдиницаИзмеренияМест;
	КонецЕсли;
	НовыйОбъект.ОбменДанными.Отправитель=УзелОбмена;
	НовыйОбъект.Записать();
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
	Возврат СсылкаНоменклатура;
КонецФункции

Процедура ИзменитьДанныеНоменклатурыКА11(СтрокаДанных, УзелОбмена, СтруктураДанных, СсылкаНаОбъект)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель <> ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель, УзелОбмена);
		Если Родитель = Неопределено Тогда
			СтрокиСРодителем=СтруктураДанных.Номенклатура.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.Родитель));
			Если СтрокиСРодителем.Количество() > 0 Тогда
				Родитель=СоздатьОбъектНоменклатурыКА11(СтрокиСРодителем[0], УзелОбмена, СтруктураДанных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Родитель=Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	Если Родитель = Неопределено Тогда
		СтруктураДанных.Вставить("Статус", 404);
		СтруктураДанных.Вставить("ОписаниеОшибки", "Объект номенклатуры не был изменен " + СтрокаДанных.Наименование);
		Возврат;
	КонецЕсли;
	ИТП=Справочники.итИндентификаторыТоварныхПозиций.ПолучитьСсылку(СтрокаДанных.итИдентификаторНоменклатурнойПозиции);
	Если Не ИТП.Пустая() Тогда
		ОбъектИТП=ИТП.ПолучитьОбъект();
	КонецЕсли;
	КаПустаяСсылка= Справочники.Контрагенты.ПустаяСсылка();
	Производитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Производитель, УзелОбмена);
	Если Производитель = Неопределено Тогда
		Производитель=КаПустаяСсылка;
	КонецЕсли;
	ОбъектИзменения=СсылкаНаОбъект.ПолучитьОбъект();
	Если ОбъектИзменения.ЭтоГруппа Тогда
		ЗаполнитьЗначенияСвойств(ОбъектИзменения, СтрокаДанных, ,
			"Ссылка,Родитель,ЕдиницаХраненияОстатков,ЕдиницаИзмеренияМест,итИдентификаторНоменклатурнойПозиции,СрокГодности,Производитель");
	Иначе
		ЗаполнитьЗначенияСвойств(ОбъектИзменения, СтрокаДанных, ,
			"Ссылка,Родитель,ЕдиницаХраненияОстатков,ЕдиницаИзмеренияМест,итИдентификаторНоменклатурнойПозиции,Производитель");
		ОбъектИзменения.Производитель=Производитель;
		ОбъектИзменения.СтранаПроисхождения= НайтиСтрануПоКоду(СтрокаДанных.СтранаПроисхожденияКод);
	КонецЕсли;
	ЕдиницаХраненияОстатков=ПоискЭлементаСоответствияОбмена(СтрокаДанных.ЕдиницаХраненияОстатков, УзелОбмена);
	Если ЕдиницаХраненияОстатков = Неопределено Тогда
		СтрокиСЕД=СтруктураДанных.ЕдИзмерения.НайтиСтроки(Новый Структура("Ссылка",
			СтрокаДанных.ЕдиницаХраненияОстатков));
		Если СтрокиСЕД.Количество() > 0 Тогда
			ЕдиницаХраненияОстатков=СоздатьЕдКА11(СтрокиСЕД[0], УзелОбмена, СтруктураДанных);
		КонецЕсли;
	КонецЕсли;
	Если ЕдиницаХраненияОстатков <> Неопределено И Не СтрокаДанных.ЭтоГруппа Тогда
		ОбъектИзменения.ЕдиницаХраненияОстатков=ЕдиницаХраненияОстатков;
	КонецЕсли;
	ЕдиницаИзмеренияМест=ПоискЭлементаСоответствияОбмена(СтрокаДанных.ЕдиницаИзмеренияМест, УзелОбмена);
	Если ЕдиницаИзмеренияМест = Неопределено Тогда
		СтрокиСЕД=СтруктураДанных.ЕдИзмерения.НайтиСтроки(Новый Структура("Ссылка", СтрокаДанных.ЕдиницаИзмеренияМест));
		Если СтрокиСЕД.Количество() > 0 Тогда
			ЕдиницаИзмеренияМест=СоздатьЕдКА11(СтрокиСЕД[0], УзелОбмена, СтруктураДанных);
		КонецЕсли;
	КонецЕсли;
	Если ЕдиницаИзмеренияМест <> Неопределено И Не СтрокаДанных.ЭтоГруппа Тогда
		ОбъектИзменения.ЕдиницаИзмеренияМест=ЕдиницаИзмеренияМест;
	КонецЕсли;
	ОбъектИзменения.ОбменДанными.Отправитель=УзелОбмена;
	ОбъектИзменения.Родитель=Родитель;
	Если ОбъектИТП <> Неопределено Или ИТП.Пустая() Тогда
		ОбъектИзменения.итИдентификаторНоменклатурнойПозиции=ИТП;
	КонецЕсли;
	ОбъектИзменения.Записать();
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
КонецПроцедуры

Функция НайтиСтрануПоКоду(Код = "")

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторСтранМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|ГДЕ
	|	КлассификаторСтранМира.Код = &Код";

	Запрос.УстановитьПараметр("Код", Код);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;

	Возврат Справочники.КлассификаторСтранМира.ПустаяСсылка();
КонецФункции

#Область ЕденицыИзмеренияКА11
Процедура ЗаписьДанныхЕДКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("ЕдИзмерения") Тогда
		Возврат;
	КонецЕсли;
	Если СтруктураДанных.ЕдИзмерения.Колонки.найти("Обработано") = Неопределено Тогда
		СтруктураДанных.ЕдИзмерения.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	КонецЕсли;

	ТаблицаЕдИзмерения=СтруктураДанных.ЕдИзмерения;
	Для Каждого стр Из ТаблицаЕдИзмерения Цикл
		Если стр.Обработано Тогда
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		//@skip-check query-in-loop
		СсылкаНаОбъект=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		Если СсылкаНаОбъект = Неопределено Тогда
			
			//@skip-check query-in-loop
			СоздатьЕдКА11(стр, УзелОбмена, СтруктураДанных);
		Иначе		
			
			//@skip-check query-in-loop
			ИзменитьДанныеЕДКА11(стр, УзелОбмена, СтруктураДанных, СсылкаНаОбъект);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Функция СоздатьЕдКА11(СтрокаДанных, УзелОбмена, СтруктураДанных)
	Владелец=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Владелец, УзелОбмена);
	Если Владелец = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	НовыйЭлемент=Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаДанных, , "Владелец,Ссылка");
	НовыйЭлемент.Владелец=Владелец;
	НовыйЭлемент.ОбменДанными.Отправитель=УзелОбмена;
	НовыйЭлемент.Записать();
	ЗаписьСоотвОбмена(НовыйЭлемент.Ссылка, СтрокаДанных.Ссылка, СтрокаДанных.ИмяТипаПриемника, УзелОбмена);
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
	Возврат НовыйЭлемент.Ссылка;
КонецФункции

Процедура ИзменитьДанныеЕДКА11(СтрокаДанных, УзелОбмена, СтруктураДанных, СсылкаНаОбъект)
	Владелец=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Владелец, УзелОбмена);
	Если Владелец = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	ОбъектИзменения=СсылкаНаОбъект.Получитьобъект();
	ЗаполнитьЗначенияСвойств(ОбъектИзменения, СтрокаДанных, , "Владелец,Ссылка");
	ОбъектИзменения.Владелец=Владелец;
	ОбъектИзменения.ОбменДанными.Отправитель=УзелОбмена;
	ОбъектИзменения.Записать();
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
#КонецОбласти

#Область ПолучениеДанныхДокументовКА11

Процедура ПолучитьДанныеДокументовКА11(СтруктураДанных, УзелОбмена, Отказ)
	ПолучитьДанныеЗаказаПокупателяКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПолучитьДанныеЗаказаПоставщика(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПолучитьДанныеМаршрутаКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПолучениеДанныхВнутреннегоЗаказа(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПолучениеДанныхПеремещения(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПолучитьДанныеЗаказаПокупателяКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("ЗаказыПокупателей") Тогда
		Возврат;
	КонецЕсли;
	ЗаказыПокупателей=СтруктураДанных.ЗаказыПокупателей;
	Для Каждого стр Из ЗаказыПокупателей Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйОбъект=Ложь;
		
		//@skip-check query-in-loop
		СсылкаНаЗаказ=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		Если СсылкаНаЗаказ = Неопределено Тогда
			ОбъектЗаказа=Документы.ЗаказПокупателя.СоздатьДокумент();
			НовыйОбъект=Истина;
		Иначе
			ОбъектЗаказа=СсылкаНаЗаказ.ПолучитьОбъект();
		КонецЕсли;
		Если стр.Организация = ПустойИдентификатор() Тогда
			Организация=Справочники.Организации.ПустаяСсылка();
		Иначе
			
			//@skip-check query-in-loop
			Организация= ПоискЭлементаСоответствияОбмена(стр.Организация, УзелОбмена);
		КонецЕсли;
		Пользователь=Неопределено;
		Если стр.ФизЛицо <> ПустойИдентификатор() Тогда 
			
			//@skip-check query-in-loop
			ФизЛицо=ПоискЭлементаСоответствияОбмена(стр.ФизЛицо, УзелОбмена);
			Если ФизЛицо <> Неопределено Тогда 
			
			//@skip-check query-in-loop
				Пользователь=НайтиПользователяПоФизЛицу(ФизЛицо);
			КонецЕсли;
		КонецЕсли;
		Если Организация = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Организация не был найден " + Строка(стр.Организация)
				+ " для заказа " + стр.НомерИсточника);
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если стр.Контрагент <> ПустойИдентификатор() Тогда 
			
			//@skip-check query-in-loop
			Контрагент= ПоискЭлементаСоответствияОбмена(стр.Контрагент, УзелОбмена);
		Иначе
			Контрагент=Справочники.Контрагенты;
		КонецЕсли;
		Если Контрагент = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Контрагент не был найден " + Строка(стр.Контрагент)
				+ " для заказа " + стр.НомерИсточника);
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если стр.Склад <> ПустойИдентификатор() Тогда 
			
			//@skip-check query-in-loop
			Склад= ПоискЭлементаСоответствияОбмена(стр.Склад, УзелОбмена);
		Иначе
			Склад=Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		Если Склад = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Склад не был найден " + Строка(стр.Склад)
				+ " для заказа " + стр.НомерИсточника);
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если стр.ДоговорКонтрагента = ПустойИдентификатор() Тогда
			ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе
			
			//@skip-check query-in-loop
			ДоговорКонтрагента=ПоискЭлементаСоответствияОбмена(стр.ДоговорКонтрагента, УзелОбмена);
		КонецЕсли;
		Если ДоговорКонтрагента = Неопределено Тогда
			ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;	
		//ЗаполнитьЗначенияСвойств(ОбъектЗаказа,стр,,"Организация,Контрагент,Склад,Ссылка,Проведен,ПометкаУдаления,ДоговорКонтрагента");
		Если Пользователь = Неопределено Тогда
			ОбъектЗаказа.Ответственный =ПараметрыСеанса.ТекущийПользователь;
		Иначе
			ОбъектЗаказа.Ответственный =Пользователь;
		КонецЕсли;
		ОбъектЗаказа.Комментарий=стр.Комментарий;
		ОбъектЗаказа.Набран=стр.Набран;
		ОбъектЗаказа.ИмеютсяНеЗарезервированныеТовары=стр.ИмеютсяНеЗарезервированныеТовары;
		ОбъектЗаказа.ДатаЗавершенияНаборки=стр.ДатаЗавершенияНаборки;
		ОбъектЗаказа.Отгружен=стр.Отгружен;
		ОбъектЗаказа.НомерИсточника=стр.НомерИсточника;
		ОбъектЗаказа.Выполнен=стр.Выполнен;
		ОбъектЗаказа.ОтменитьВсеПроверки=стр.ОтменитьВсеПроверки;
		ОбъектЗаказа.ОбработанЛогистом=стр.ОбработанЛогистом;
		ОбъектЗаказа.ВНаборе=стр.ВНаборе;
		ОбъектЗаказа.итВремяНачалаПогрузкиКакВремя=стр.итВремяНачалаПогрузкиКакВремя;
		ОбъектЗаказа.итВремяЗавершенияПогрузкиКакВремя=стр.итВремяЗавершенияПогрузкиКакВремя;
		ОбъектЗаказа.ДатаОтгрузки=стр.ДатаОтгрузки;
		ОбъектЗаказа.ДатаПоставки=стр.ДатаПоставки;
		ОбъектЗаказа.ВесНетто=стр.ВесНетто;
		ОбъектЗаказа.ВесБрутто=стр.ВесБрутто;
		ОбъектЗаказа.Транзит=стр.Транзит;
		ОбъектЗаказа.АдресДоставки=стр.АдресДоставки;
		ОбъектЗаказа.ДатаФактическойОтгрузки=стр.ДатаФактическойОтгрузки;
		ОбъектЗаказа.СетевойНомерЗаказа=стр.СетевойНомерЗаказа;
		ОбъектЗаказа.Дата=стр.Дата;
		ОбъектЗаказа.Организация=Организация;
		ОбъектЗаказа.Контрагент=Контрагент;
		ОбъектЗаказа.ДоговорКонтрагента=ДоговорКонтрагента;
		ОбъектЗаказа.Склад=Склад;
		Товары=ОбъектЗаказа.Товары;
		Товары.Очистить();
		Для Каждого СтрТч Из стр.ЗаказТч Цикл
			НоваяСтрокаТовары=Товары.Добавить();
			Если СтрТч.Номенклатура <> ПустойИдентификатор() Тогда 
				
				//@skip-check query-in-loop
				Номенклатура= ПоискЭлементаСоответствияОбмена(СтрТч.Номенклатура, УзелОбмена);
				Если Номенклатура = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Номенклатура не был найден " + Строка(
						стр.Номенклатура) + " для заказа " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			Иначе
				Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;
			Если СтрТч.ЕдиницаИзмеренияМест <> ПустойИдентификатор() Тогда 
				
				//@skip-check query-in-loop
				ЕдиницаИзмеренияМест= ПоискЭлементаСоответствияОбмена(СтрТч.ЕдиницаИзмеренияМест, УзелОбмена);
				Если ЕдиницаИзмеренияМест = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ЕдиницаИзмеренияМест не был найден " + Строка(
						СтрТч.ЕдиницаИзмеренияМест) + " для заказа " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			Иначе
				ЕдиницаИзмеренияМест=Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			КонецЕсли;
			Если СтрТч.ЕдиницаИзмерения <> ПустойИдентификатор() Тогда 
				
				//@skip-check query-in-loop
				ЕдиницаИзмерения=ПоискЭлементаСоответствияОбмена(СтрТч.ЕдиницаИзмерения, УзелОбмена);
				Если ЕдиницаИзмерения = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ЕдиницаИзмерения не был найден " + Строка(
						СтрТч.ЕдиницаИзмерения) + " для заказа " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			Иначе
				ЕдиницаИзмерения=Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			КонецЕсли;
			НоваяСтрокаТовары.Номенклатура=Номенклатура;
			НоваяСтрокаТовары.ЕдиницаИзмеренияМест = ЕдиницаИзмеренияМест;
			НоваяСтрокаТовары.Количество=СтрТч.Количество;
			НоваяСтрокаТовары.ЕдиницаИзмерения=ЕдиницаИзмерения;
			НоваяСтрокаТовары.ОтменитьРезервирование=СтрТч.ОтменитьРезервирование;
		КонецЦикла;
		ОбъектЗаказа.ОбменДанными.Отправитель=УзелОбмена;
		Если ОбъектЗаказа.Проведен И стр.ПометкаУдаления Тогда
			ОбъектЗаказа.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ОбъектЗаказа.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектЗаказа.ОбменДанными.Отправитель=УзелОбмена;
			ОбъектЗаказа.Записать();
		ИначеЕсли ОбъектЗаказа.Проведен И Не стр.Проведен Тогда
			ОбъектЗаказа.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектЗаказа.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ИначеЕсли стр.Проведен Тогда
			ОбъектЗаказа.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектЗаказа.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОбъектЗаказа.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектЗаказа.Записать();
		КонецЕсли;
		Если НовыйОбъект Тогда
			ЗаписьСоотвОбмена(ОбъектЗаказа.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьДанныеМаршрутаКА11(СтруктураДанных, УзелОбмена, Отказ)

	Если Не СтруктураДанных.Свойство("Маршруты") Тогда
		Возврат;
	КонецЕсли;
	Маршруты=СтруктураДанных.Маршруты;
	Для Каждого стр Из Маршруты Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйОбъект=Ложь;
		
		//@skip-check query-in-loop
		СсылкаНаМаршрут=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		Если СсылкаНаМаршрут = Неопределено Тогда
			ОбъектМаршрута=Документы.Маршрутизация.СоздатьДокумент();
			НовыйОбъект=Истина;
		Иначе
			ОбъектМаршрута=СсылкаНаМаршрут.ПолучитьОбъект();
		КонецЕсли; 
		//ЗаполнитьЗначенияСвойств(ОбъектМаршрута,стр,,"Ссылка,Проведен,ПометкаУдаления");
		ОбъектМаршрута.Транспорт=стр.Транспорт;
		ОбъектМаршрута.Дата=стр.Дата;
		ОбъектМаршрута.Водитель=стр.Водитель;
		ОбъектМаршрута.ТипТС=стр.ТипТс;
		ОбъектМаршрута.Грузоподъемность=стр.Грузоподъемность;
		ОбъектМаршрута.Прицеп=стр.Прицеп;
		ОбъектМаршрута.НомерИсточника=стр.НомерИсточника;
		ОбъектМаршрута.ГосНомер=стр.ГосНомер;
		ОбъектМаршрута.ВесДокумента=стр.ВесДокумента;
		ОбъектМаршрута.Комментарий=стр.Комментарий;
		ДокументыМаршрута=ОбъектМаршрута.ДокументыМаршрута;
		ДокументыМаршрута.Очистить();
		Для Каждого СтрТч Из стр.МаршрутТЧ Цикл
			НоваяСтрокаДокументыМаршрута=ДокументыМаршрута.Добавить();
			
			//@skip-check query-in-loop
			Заказ=ПоискЭлементаСоответствияОбмена(СтрТч.Заказ);
			Если Заказ = Неопределено Тогда 
				//СтруктураДанных.Вставить("Статус",404);
				//СтруктураДанных.Вставить("ОписаниеОшибки","Объект Заказ не был найден "+Строка(стр.Заказ)+" для маршрута "+стр.НомерИсточника);
				Продолжить;
				//Отказ=Истина;
				//Возврат;
			КонецЕсли;
			НоваяСтрокаДокументыМаршрута.Заказ=Заказ;
			НоваяСтрокаДокументыМаршрута.ОчередьДоставки=СтрТч.ОчередьДоставки;
		КонецЦикла;

		ОбъектМаршрута.ОбменДанными.Отправитель=УзелОбмена;
		Если ОбъектМаршрута.Проведен И стр.ПометкаУдаления Тогда
			ОбъектМаршрута.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ОбъектМаршрута.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектМаршрута.ОбменДанными.Отправитель=УзелОбмена;
			ОбъектМаршрута.Записать();
		ИначеЕсли ОбъектМаршрута.Проведен И Не стр.Проведен Тогда
			ОбъектМаршрута.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектМаршрута.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ИначеЕсли стр.Проведен Тогда
			ОбъектМаршрута.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектМаршрута.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОбъектМаршрута.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектМаршрута.Записать();
		КонецЕсли;
		Если НовыйОбъект Тогда
			ЗаписьСоотвОбмена(ОбъектМаршрута.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьДанныеЗаказаПоставщика(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("ЗаказыПоставщиков") Тогда
		Возврат;
	КонецЕсли;

	ЗаказыПоставщиков=СтруктураДанных.ЗаказыПоставщиков;
	Для Каждого стр Из ЗаказыПоставщиков Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйОбъект=Ложь;
		
		//@skip-check query-in-loop
		СсылкаНаЗаказ=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		Если СсылкаНаЗаказ = Неопределено Тогда
			ОбъектЗаказа=Документы.ЗаказПоставщику.СоздатьДокумент();
			НовыйОбъект=Истина;
		Иначе
			ОбъектЗаказа=СсылкаНаЗаказ.ПолучитьОбъект();
		КонецЕсли;
		
		//@skip-check query-in-loop
		Организация= ПоискЭлементаСоответствияОбмена(стр.Организация, УзелОбмена);
		Если Организация = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Организация не был найден " + Строка(стр.Организация)
				+ " для заказа " + стр.НомерИсточника);
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		//@skip-check query-in-loop
		Контрагент= ПоискЭлементаСоответствияОбмена(стр.Контрагент, УзелОбмена);
		Если Контрагент = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Контрагент не был найден " + Строка(стр.Контрагент)
				+ " для заказа " + стр.НомерИсточника);
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		
		//@skip-check query-in-loop
		Склад= ПоискЭлементаСоответствияОбмена(стр.Склад, УзелОбмена);
		Если Склад = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Склад не был найден " + Строка(стр.Склад)
				+ " для заказа " + стр.НомерИсточника);
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектЗаказа, стр, , "Организация,Контрагент,Склад,Ссылка,Проведен,ПометкаУдаления");
		ОбъектЗаказа.Организация=Организация;
		ОбъектЗаказа.Контрагент=Контрагент;
		ОбъектЗаказа.Склад=Склад;
		Товары=ОбъектЗаказа.Товары;
		Товары.Очистить();
		Для Каждого СтрТч Из стр.ТоварыТЧ Цикл
			НоваяСтрокаТовары=Товары.Добавить();
			Если СтрТч.Номенклатура = ПустойИдентификатор() Тогда
				Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
			Иначе
				
				//@skip-check query-in-loop
				Номенклатура= ПоискЭлементаСоответствияОбмена(СтрТч.Номенклатура, УзелОбмена);
				Если Номенклатура = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Номенклатура не был найден " + Строка(
						СтрТч.Номенклатура) + " для заказа " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если СтрТч.ЕдиницаИзмеренияМест = ПустойИдентификатор() Тогда
				ЕдиницаИзмеренияМест=Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			Иначе
				
				//@skip-check query-in-loop
				ЕдиницаИзмеренияМест= ПоискЭлементаСоответствияОбмена(СтрТч.ЕдиницаИзмеренияМест, УзелОбмена);
				Если ЕдиницаИзмеренияМест = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ЕдиницаИзмеренияМест не был найден " + Строка(
						СтрТч.ЕдиницаИзмеренияМест) + " для заказа " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если СтрТч.ЕдиницаИзмерения = ПустойИдентификатор() Тогда
				ЕдиницаИзмерения=Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			Иначе
			
			//@skip-check query-in-loop
				ЕдиницаИзмерения=ПоискЭлементаСоответствияОбмена(СтрТч.ЕдиницаИзмерения, УзелОбмена);
				Если ЕдиницаИзмерения = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ЕдиницаИзмерения не был найден " + Строка(
						СтрТч.ЕдиницаИзмерения) + " для заказа " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если СтрТч.ХарактеристикаНоменклатуры = ПустойИдентификатор() Тогда
				ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Иначе	
				
				//@skip-check query-in-loop
				ХарактеристикаНоменклатуры=ПоискЭлементаСоответствияОбмена(СтрТч.ХарактеристикаНоменклатуры, УзелОбмена);
				Если ХарактеристикаНоменклатуры = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ХарактеристикаНоменклатуры не был найден "
						+ Строка(СтрТч.ХарактеристикаНоменклатуры) + " для заказа " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрокаТовары.Номенклатура=Номенклатура;
			НоваяСтрокаТовары.ЕдиницаИзмеренияМест = ЕдиницаИзмеренияМест;
			НоваяСтрокаТовары.ХарактеристикаНоменклатуры=ХарактеристикаНоменклатуры;
			НоваяСтрокаТовары.Коэффициент=СтрТч.Коэффициент;
			НоваяСтрокаТовары.КоличествоМест=СтрТч.КоличествоМест;
			НоваяСтрокаТовары.Количество=СтрТч.Количество;
			НоваяСтрокаТовары.ЕдиницаИзмерения=ЕдиницаИзмерения;
		КонецЦикла;
		ОбъектЗаказа.ОбменДанными.Отправитель=УзелОбмена;
		Если ОбъектЗаказа.Проведен И стр.ПометкаУдаления Тогда
			ОбъектЗаказа.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ОбъектЗаказа.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектЗаказа.ОбменДанными.Отправитель=УзелОбмена;
			ОбъектЗаказа.Записать();
		ИначеЕсли ОбъектЗаказа.Проведен И Не стр.Проведен Тогда
			ОбъектЗаказа.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектЗаказа.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ИначеЕсли стр.Проведен Тогда
			ОбъектЗаказа.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектЗаказа.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОбъектЗаказа.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектЗаказа.Записать();
		КонецЕсли;
		Если НовыйОбъект Тогда
			ЗаписьСоотвОбмена(ОбъектЗаказа.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ПолучениеДанныхВнутреннегоЗаказа(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("ВнутренниеЗаказы") Тогда
		Возврат;
	КонецЕсли;

	ВнутренниеЗаказы=СтруктураДанных.ВнутренниеЗаказы;
	Для Каждого стр Из ВнутренниеЗаказы Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйОбъект=Ложь;
		//@skip-check query-in-loop
		СсылкаНаЗаказ=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		Если СсылкаНаЗаказ = Неопределено Тогда
			ОбъектЗаказа=Документы.ВнутреннийЗаказ.СоздатьДокумент();
			НовыйОбъект=Истина;
		Иначе
			ОбъектЗаказа=СсылкаНаЗаказ.ПолучитьОбъект();
		КонецЕсли;
		
		//@skip-check query-in-loop
		Организация= ПоискЭлементаСоответствияОбмена(стр.Организация, УзелОбмена);
		Если Организация = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Организация не был найден " + Строка(стр.Организация)
				+ " для заказа " + стр.НомерИсточника);
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		
		
		//@skip-check query-in-loop
		Склад= ПоискЭлементаСоответствияОбмена(стр.Склад, УзелОбмена);
		Если Склад = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Склад не был найден " + Строка(стр.Склад)
				+ " для заказа " + стр.НомерИсточника);
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Пользователь=Неопределено;
		Если стр.Ответственный <> ПустойИдентификатор() Тогда 
			
			//@skip-check query-in-loop
			Ответственный=ПоискЭлементаСоответствияОбмена(стр.Ответственный, УзелОбмена);
			Если Ответственный <> Неопределено Тогда 
			
			//@skip-check query-in-loop
				Пользователь=НайтиПользователяПоФизЛицу(Ответственный);
			КонецЕсли;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ОбъектЗаказа, стр, , "Организация,Склад,Ссылка,Проведен,ПометкаУдаления");
		ОбъектЗаказа.Организация=Организация;
		Если Пользователь = Неопределено Тогда
			ОбъектЗаказа.Ответственный=ПараметрыСеанса.ТекущийПользователь;
		Иначе
			ОбъектЗаказа.Ответственный=Пользователь;
		КонецЕсли;
		ОбъектЗаказа.Склад=Склад;
		ОбъектЗаказа.НомерИсточника=стр.Номер;
		Товары=ОбъектЗаказа.Товары;
		Товары.Очистить();
		Для Каждого СтрТч Из стр.ТоварыТЧ Цикл
			НоваяСтрокаТовары=Товары.Добавить();
			Если СтрТч.Номенклатура = ПустойИдентификатор() Тогда
				Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
			Иначе
				
				//@skip-check query-in-loop
				Номенклатура= ПоискЭлементаСоответствияОбмена(СтрТч.Номенклатура, УзелОбмена);
				Если Номенклатура = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Номенклатура не был найден " + Строка(
						СтрТч.Номенклатура) + " для заказа " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если СтрТч.ЕдиницаИзмеренияМест = ПустойИдентификатор() Тогда
				ЕдиницаИзмеренияМест=Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			Иначе
				
				//@skip-check query-in-loop
				ЕдиницаИзмеренияМест= ПоискЭлементаСоответствияОбмена(СтрТч.ЕдиницаИзмеренияМест, УзелОбмена);
				Если ЕдиницаИзмеренияМест = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ЕдиницаИзмеренияМест не был найден " + Строка(
						СтрТч.ЕдиницаИзмеренияМест) + " для заказа " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если СтрТч.ЕдиницаИзмерения = ПустойИдентификатор() Тогда
				ЕдиницаИзмерения=Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			Иначе
			
			//@skip-check query-in-loop
				ЕдиницаИзмерения=ПоискЭлементаСоответствияОбмена(СтрТч.ЕдиницаИзмерения, УзелОбмена);
				Если ЕдиницаИзмерения = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ЕдиницаИзмерения не был найден " + Строка(
						СтрТч.ЕдиницаИзмерения) + " для заказа " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если СтрТч.ХарактеристикаНоменклатуры = ПустойИдентификатор() Тогда
				ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Иначе	
				
				//@skip-check query-in-loop
				ХарактеристикаНоменклатуры=ПоискЭлементаСоответствияОбмена(СтрТч.ХарактеристикаНоменклатуры, УзелОбмена);
				Если ХарактеристикаНоменклатуры = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ХарактеристикаНоменклатуры не был найден "
						+ Строка(СтрТч.ХарактеристикаНоменклатуры) + " для заказа " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрокаТовары.Номенклатура=Номенклатура;
			НоваяСтрокаТовары.ЕдиницаИзмеренияМест = ЕдиницаИзмеренияМест;
			НоваяСтрокаТовары.ХарактеристикаНоменклатуры=ХарактеристикаНоменклатуры;
			НоваяСтрокаТовары.Коэффициент=СтрТч.Коэффициент;
			НоваяСтрокаТовары.КоличествоМест=СтрТч.КоличествоМест;
			НоваяСтрокаТовары.Количество=СтрТч.Количество;
			НоваяСтрокаТовары.ЕдиницаИзмерения=ЕдиницаИзмерения;
			НоваяСтрокаТовары.ОтменитьРезервирование=СтрТч.ОтменитьРезервирование;
		КонецЦикла;
		ОбъектЗаказа.ОбменДанными.Отправитель=УзелОбмена;
		Если ОбъектЗаказа.Проведен И стр.ПометкаУдаления Тогда
			ОбъектЗаказа.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ОбъектЗаказа.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектЗаказа.ОбменДанными.Отправитель=УзелОбмена;
			ОбъектЗаказа.Записать();
		ИначеЕсли ОбъектЗаказа.Проведен И Не стр.Проведен Тогда
			ОбъектЗаказа.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектЗаказа.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ИначеЕсли стр.Проведен Тогда
			ОбъектЗаказа.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектЗаказа.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОбъектЗаказа.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектЗаказа.Записать();
		КонецЕсли;
		Если НовыйОбъект Тогда
			ЗаписьСоотвОбмена(ОбъектЗаказа.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;

КонецПроцедуры

Процедура ПолучениеДанныхПеремещения(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("ПеремещенияТоваров") Тогда
		Возврат;
	КонецЕсли;

	ПеремещенияТоваров=СтруктураДанных.ПеремещенияТоваров;
	ОбъектПеремещения=Неопределено;
	Для Каждого стр Из ПеремещенияТоваров Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйОбъект=Ложь;
		//@skip-check query-in-loop
		СсылкаНаПеремещение=ПоискЭлементаСоответствияОбмена(стр.Ссылка, УзелОбмена);
		Если СсылкаНаПеремещение = Неопределено Тогда
			Если стр.СсылкаВДругойИБ <> Неопределено Тогда
				СсылкаНаПеремещение=Документы.ПеремещениеТоваров.ПолучитьСсылку(стр.СсылкаВДругойИБ);
				ОбъектПеремещения=СсылкаНаПеремещение.ПолучитьОбъект();
				Если ОбъектПеремещения <> Неопределено Тогда
					ЗаписьСоотвОбмена(СсылкаНаПеремещение, стр.СсылкаВДругойИБ, стр.ИмяТипаПриемника, УзелОбмена);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбъектПеремещения=СсылкаНаПеремещение.ПолучитьОбъект();
		КонецЕсли;
		Если ОбъектПеремещения = Неопределено Тогда
			ОбъектПеремещения=Документы.ПеремещениеТоваров.СоздатьДокумент();
			НовыйОбъект=Истина;
		КонецЕсли;
		//@skip-check query-in-loop
		Организация= ПоискЭлементаСоответствияОбмена(стр.Организация, УзелОбмена);
		Если Организация = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Организация не был найден " + Строка(стр.Организация)
				+ " для перемещения " + стр.НомерИсточника);
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		
		
		//@skip-check query-in-loop
		СкладОтправитель= ПоискЭлементаСоответствияОбмена(стр.СкладОтправитель, УзелОбмена);
		Если стр.СкладОтправитель = ПустойИдентификатор() Тогда
			СкладОтправитель=Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		Если СкладОтправитель = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Склад не был найден " + Строка(стр.СкладОтправитель)
				+ " для перемещения " + стр.НомерИсточника);
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		//@skip-check query-in-loop
		СкладПолучатель= ПоискЭлементаСоответствияОбмена(стр.СкладПолучатель, УзелОбмена);
		Если стр.СкладПолучатель = ПустойИдентификатор() Тогда
			СкладПолучатель=Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		Если СкладПолучатель = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Склад не был найден " + Строка(стр.СкладПолучатель)
				+ " для перемещения " + стр.НомерИсточника);
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Пользователь=Неопределено;
		Если стр.ФизЛицо <> ПустойИдентификатор() Тогда 
			
			//@skip-check query-in-loop
			ФизЛицо=ПоискЭлементаСоответствияОбмена(стр.ФизЛицо, УзелОбмена);
			Если ФизЛицо <> Неопределено Тогда 
			
			//@skip-check query-in-loop
				Пользователь=НайтиПользователяПоФизЛицу(ФизЛицо);
			КонецЕсли;
		КонецЕсли;

		ОбъектПеремещения.Дата=стр.Дата;
		ОбъектПеремещения.Организация=Организация;
		ОбъектПеремещения.Комментарий=стр.Комментарий;
		ОбъектПеремещения.ПеремещениеНаУдаленныйСклад=стр.ОтсроченноеОприходованиеТовара;
		Если Пользователь = Неопределено Тогда
			ОбъектПеремещения.Ответственный=ПараметрыСеанса.ТекущийПользователь;
		Иначе
			ОбъектПеремещения.Ответственный=Пользователь;
		КонецЕсли;
		ОбъектПеремещения.СкладОтправитель=СкладОтправитель;
		ОбъектПеремещения.СкладПолучатель=СкладПолучатель;
		Если ОбъектПеремещения.Номер <> стр.НомерИсточника Тогда
			ОбъектПеремещения.НомерИсточника=стр.НомерИсточника;
		КонецЕсли;
		Товары=ОбъектПеремещения.Товары;
		Товары.Очистить();
		Для Каждого СтрТч Из стр.ТоварыТЧ Цикл
			НоваяСтрокаТовары=Товары.Добавить();
			Если СтрТч.Номенклатура = ПустойИдентификатор() Тогда
				Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
			Иначе	
				//@skip-check query-in-loop
				Номенклатура= ПоискЭлементаСоответствияОбмена(СтрТч.Номенклатура, УзелОбмена);
				Если Номенклатура = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Номенклатура не был найден " + Строка(
						СтрТч.Номенклатура) + " для перемещения " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если СтрТч.ЕдиницаИзмеренияМест = ПустойИдентификатор() Тогда
				ЕдиницаИзмеренияМест=Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			Иначе
				
				//@skip-check query-in-loop
				ЕдиницаИзмеренияМест= ПоискЭлементаСоответствияОбмена(СтрТч.ЕдиницаИзмеренияМест, УзелОбмена);
				Если ЕдиницаИзмеренияМест = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ЕдиницаИзмеренияМест не был найден " + Строка(
						СтрТч.ЕдиницаИзмеренияМест) + " для перемещения " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если СтрТч.ЕдиницаИзмерения = ПустойИдентификатор() Тогда
				ЕдиницаИзмерения=Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			Иначе
			
			//@skip-check query-in-loop
				ЕдиницаИзмерения=ПоискЭлементаСоответствияОбмена(СтрТч.ЕдиницаИзмерения, УзелОбмена);
				Если ЕдиницаИзмерения = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ЕдиницаИзмерения не был найден " + Строка(
						СтрТч.ЕдиницаИзмерения) + " для перемещения " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если СтрТч.ХарактеристикаНоменклатуры = ПустойИдентификатор() Тогда
				ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Иначе	
				
				//@skip-check query-in-loop
				ХарактеристикаНоменклатуры=ПоискЭлементаСоответствияОбмена(СтрТч.ХарактеристикаНоменклатуры, УзелОбмена);
				Если ХарактеристикаНоменклатуры = Неопределено Тогда
					СтруктураДанных.Вставить("Статус", 404);
					СтруктураДанных.Вставить("ОписаниеОшибки", "Объект ХарактеристикаНоменклатуры не был найден "
						+ Строка(СтрТч.ХарактеристикаНоменклатуры) + " для перемещения " + стр.НомерИсточника);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			//@skip-check query-in-loop
			СерияНоменклатуры=ПоискСерииНоменклатурыПеремещение(УзелОбмена, СтрТч);
			Если СерияНоменклатуры = Неопределено Тогда
				СтруктураДанных.Вставить("Статус", 404);
				СтруктураДанных.Вставить("ОписаниеОшибки", "Объект СерияНоменклатуры не был найден " + Строка(
					СтрТч.ХарактеристикаНоменклатуры) + " для перемещения " + стр.НомерИсточника);
				Отказ=Истина;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
	        //@skip-check query-in-loop
			Качество=ПоискЭлементаСоответствияОбмена(СтрТч.Качество, УзелОбмена);
			Если Качество = Неопределено Тогда
				Качество=Справочники.Качество.Новый;
			КонецЕсли;
			НоваяСтрокаТовары.Номенклатура=Номенклатура;
			НоваяСтрокаТовары.ЕдиницаИзмеренияМест = ЕдиницаИзмеренияМест;
			НоваяСтрокаТовары.ХарактеристикаНоменклатуры=ХарактеристикаНоменклатуры;
			НоваяСтрокаТовары.Коэффициент=СтрТч.Коэффициент;
			НоваяСтрокаТовары.СерияНоменклатуры=СерияНоменклатуры;
			НоваяСтрокаТовары.Качество=Качество;
			НоваяСтрокаТовары.Количество=СтрТч.Количество;
			НоваяСтрокаТовары.ЕдиницаИзмерения=ЕдиницаИзмерения;
		КонецЦикла;
		ОбъектПеремещения.ОбменДанными.Отправитель=УзелОбмена;
		Если ОбъектПеремещения.Проведен И стр.ПометкаУдаления Тогда
			ОбъектПеремещения.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ОбъектПеремещения.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектПеремещения.ОбменДанными.Отправитель=УзелОбмена;
			ОбъектПеремещения.Записать();
		ИначеЕсли ОбъектПеремещения.Проведен И Не стр.Проведен Тогда
			ОбъектПеремещения.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектПеремещения.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ИначеЕсли стр.Проведен Тогда
			ОбъектПеремещения.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектПеремещения.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОбъектПеремещения.ПометкаУдаления=стр.ПометкаУдаления;
			ОбъектПеремещения.Записать();
		КонецЕсли;
		Если НовыйОбъект Тогда
			ЗаписьСоотвОбмена(ОбъектПеремещения.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Функция ПоискСерииНоменклатурыПеремещение(УзелОбмена, СтрТч)
	СерияНоменклатуры=Неопределено;
	Если СтрТч.СерияНоменклатуры = ПустойИдентификатор() Тогда
		СерияНоменклатуры=Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	Если СерияНоменклатуры = Неопределено Тогда
		СерияНоменклатуры=ПоискЭлементаСоответствияОбмена(СтрТч.СерияНоменклатуры, УзелОбмена);
		Если СерияНоменклатуры = Неопределено Тогда
			Если СтрТч.СерияНоменклатурыВДругойИБ <> ПустойИдентификатор() Тогда
				СерияНоменклатуры=Справочники.СерииНоменклатуры.ПолучитьСсылку(СтрТч.СерияНоменклатурыВДругойИБ);
				ОбъектСерии=СерияНоменклатуры.ПолучитьОбъект();
				Если ОбъектСерии = Неопределено Тогда
					СерияНоменклатуры=Неопределено;
				Иначе
					ЗаписьСоотвОбмена(СерияНоменклатуры, СтрТч.СерияНоменклатуры, СтрТч.ИмяТипаПриемникаСерия,
						УзелОбмена);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СерияНоменклатуры;
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхРегистровКА11

Процедура ПолучениеДанныхРегистровКА11(СтруктураДанных, УзелОбмена, Отказ)
	ПолучениеДанныхСоотвАлкПродукцииИНмКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПолучениеДанныхСоотвСправокАиБиСерийКА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПолучениеДанныхШККА11(СтруктураДанных, УзелОбмена, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПолучениеДанныхСоотвАлкПродукцииИНмКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("СоотвНмиАлкПродукции") Тогда
		Возврат;
	КонецЕсли;
	СоотвНмиАлкПродукции=СтруктураДанных.СоотвНмиАлкПродукции;
	Для Каждого стр Из СоотвНмиАлкПродукции Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		//@skip-check query-in-loop
		Номенклатура=ПоискЭлементаСоответствияОбмена(стр.Номенклатура, УзелОбмена);	
		
		//@skip-check query-in-loop
		СерияНоменклатуры=ПоискЭлементаСоответствияОбмена(стр.СерияНоменклатуры, УзелОбмена);	
		
		//@skip-check query-in-loop
		АлкогольнаяПродукция=ПоискЭлементаСоответствияОбмена(стр.АлкогольнаяПродукция, УзелОбмена);
		Если Номенклатура = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Номенклатура не был найден " + Строка(стр.Номенклатура));
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если АлкогольнаяПродукция = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект АлкогольнаяПродукция не был найден " + Строка(
				стр.АлкогольнаяПродукция));
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		НаборЗаписей=РегистрыСведений.алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.АлкогольнаяПродукция.Установить(АлкогольнаяПродукция);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		Если СерияНоменклатуры <> Неопределено Тогда
			НаборЗаписей.Отбор.СерияНоменклатуры.Установить(СерияНоменклатуры);
		КонецЕсли;
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		//НаборЗаписей.ОбменДанными.Отправитель=УзелОбмена;
		НаборЗаписей.Записать();
		Если стр.Удаление Тогда
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.АлкогольнаяПродукция=АлкогольнаяПродукция;
		НоваяЗапись.Номенклатура=Номенклатура;
		Если СерияНоменклатуры <> Неопределено Тогда
			НоваяЗапись.СерияНоменклатуры=СерияНоменклатуры;
		КонецЕсли;
		//НаборЗаписей.ОбменДанными.Отправитель=УзелОбмена;
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ПолучениеДанныхСоотвСправокАиБиСерийКА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("СоотвСправокАиБиСерий") Тогда
		Возврат;
	КонецЕсли;
	СоотвСправокАиБиСерий=СтруктураДанных.СоотвСправокАиБиСерий;
	Для Каждого стр Из СоотвСправокАиБиСерий Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		//@skip-check query-in-loop
		СерияНоменклатуры=ПоискЭлементаСоответствияОбмена(стр.СерияНоменклатуры, УзелОбмена);
		Если СерияНоменклатуры = Неопределено Тогда
			СсылкаВДругойИБ=Справочники.СерииНоменклатуры.ПолучитьСсылку(стр.СерияНоменклатурыСсылкаВДругойИБ);
			ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
			Если ОбъектСсылкиДругойИБ <> Неопределено Тогда
				ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка, стр.Ссылка, стр.ИмяТипаПриемника, УзелОбмена);
				СерияНоменклатуры=ОбъектСсылкиДругойИБ.Ссылка;
			КонецЕсли;
		КонецЕсли;	
		
		//@skip-check query-in-loop
		СправкаА=ПоискЭлементаСоответствияОбмена(стр.СправкаА, УзелОбмена);	
		
		//@skip-check query-in-loop
		СправкаБ=ПоискЭлементаСоответствияОбмена(стр.СправкаБ, УзелОбмена);
		Если СерияНоменклатуры = Неопределено И стр.СерияНоменклатуры <> ПустойИдентификатор() Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		Если СправкаА = Неопределено И стр.СправкаА <> ПустойИдентификатор() Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		Если СправкаБ = Неопределено И стр.СправкаБ <> ПустойИдентификатор() Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;

		НаборЗаписей=РегистрыСведений.алкСоответствияСправокАиБЕГАИСИСерий.СоздатьНаборЗаписей();
		Если СерияНоменклатуры <> Неопределено Тогда
			НаборЗаписей.Отбор.СерияНоменклатуры.Установить(СерияНоменклатуры);
		КонецЕсли;
		Если СправкаА <> Неопределено Тогда
			НаборЗаписей.Отбор.СправкаА.Установить(СправкаА);
		КонецЕсли;
		Если СправкаБ <> Неопределено Тогда
			НаборЗаписей.Отбор.СправкаБ.Установить(СправкаБ);
		КонецЕсли;
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.ОбменДанными.Отправитель=УзелОбмена;
		НаборЗаписей.Записать();
		Если стр.Удаление Тогда
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
		НоваяЗапись=НаборЗаписей.Добавить();
		Если СерияНоменклатуры <> Неопределено Тогда
			НоваяЗапись.СерияНоменклатуры=СерияНоменклатуры;
		КонецЕсли;
		Если СправкаА <> Неопределено Тогда
			НоваяЗапись.СправкаА=СправкаА;
		КонецЕсли;
		Если СправкаБ <> Неопределено Тогда
			НоваяЗапись.СправкаБ=СправкаБ;
		КонецЕсли;
		НаборЗаписей.ОбменДанными.Отправитель=УзелОбмена;
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	КонецЦикла;

КонецПроцедуры

Процедура ПолучениеДанныхШККА11(СтруктураДанных, УзелОбмена, Отказ)
	Если Не СтруктураДанных.Свойство("ШтрихКодыДанные") Тогда
		Возврат;
	КонецЕсли;
	ШтрихКодыДанные=СтруктураДанных.ШтрихКодыДанные;
	Для Каждого стр Из ШтрихКодыДанные Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Штрихкод=стр.Штрихкод;	
		
		//@skip-check query-in-loop
		Владелец=ПоискЭлементаСоответствияОбмена(стр.Владелец, УзелОбмена);	
		
		//@skip-check query-in-loop
		ТипШтрихкода=ПоискЭлементаСоответствияОбмена(стр.ТипШтрихкода, УзелОбмена);	
		
		//@skip-check query-in-loop
		ЕдиницаИзмерения=ПоискЭлементаСоответствияОбмена(стр.ЕдиницаИзмерения, УзелОбмена);	
		
		//@skip-check query-in-loop
		ХарактеристикаНоменклатуры=ПоискЭлементаСоответствияОбмена(стр.ХарактеристикаНоменклатуры, УзелОбмена);	
		
		//@skip-check query-in-loop
		СерияНоменклатуры=ПоискЭлементаСоответствияОбмена(стр.СерияНоменклатуры, УзелОбмена);	
		
		//@skip-check query-in-loop
		Качество=ПоискЭлементаСоответствияОбмена(стр.Качество, УзелОбмена);
		Если Владелец = Неопределено Тогда
			СтруктураДанных.Вставить("Статус", 404);
			СтруктураДанных.Вставить("ОписаниеОшибки", "Объект Владелец не был найден " + Строка(стр.Владелец));
			Отказ=Истина;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		НаборЗаписей=РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Владелец.Установить(Владелец);
		НаборЗаписей.Отбор.Штрихкод.Установить(Штрихкод);
		Если ТипШтрихкода <> Неопределено Тогда
			НаборЗаписей.Отбор.ТипШтрихкода.Установить(ТипШтрихкода);
		КонецЕсли;
		Если ЕдиницаИзмерения <> Неопределено Тогда
			НаборЗаписей.Отбор.ЕдиницаИзмерения.Установить(ЕдиницаИзмерения);
		КонецЕсли;
		Если ХарактеристикаНоменклатуры <> Неопределено Тогда
			НаборЗаписей.Отбор.ХарактеристикаНоменклатуры.Установить(ХарактеристикаНоменклатуры);
		КонецЕсли;
		Если СерияНоменклатуры <> Неопределено Тогда
			НаборЗаписей.Отбор.СерияНоменклатуры.Установить(СерияНоменклатуры);
		КонецЕсли;
		Если Качество <> Неопределено Тогда
			НаборЗаписей.Отбор.Качество.Установить(Качество);
		КонецЕсли;
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.ОбменДанными.Отправитель=УзелОбмена;
		НаборЗаписей.Записать();
		Если стр.Удаление Тогда
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.Штрихкод=Штрихкод;
		НоваяЗапись.Владелец=Владелец;
		Если ТипШтрихкода <> Неопределено Тогда
			НоваяЗапись.ТипШтрихкода=ТипШтрихкода;
		КонецЕсли;
		Если ЕдиницаИзмерения <> Неопределено Тогда
			НоваяЗапись.ЕдиницаИзмерения=ЕдиницаИзмерения;
		КонецЕсли;
		Если ХарактеристикаНоменклатуры <> Неопределено Тогда
			НоваяЗапись.ХарактеристикаНоменклатуры=ХарактеристикаНоменклатуры;
		КонецЕсли;
		Если СерияНоменклатуры <> Неопределено Тогда
			НоваяЗапись.СерияНоменклатуры=СерияНоменклатуры;
		КонецЕсли;
		Если Качество <> Неопределено Тогда
			НоваяЗапись.Качество=Качество;
		КонецЕсли;
		НаборЗаписей.ОбменДанными.Отправитель=УзелОбмена;
		НаборЗаписей.Записать(Истина);
		ЗафиксироватьТранзакцию();
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

Процедура ЗаписьСоотвОбмена(Знач СсылкаБазы, Знач СсылкаВИточнике, Знач ИмяТипаПриемника, Знач УзелОбмена)

	Перем МенеджерЗаписиСоотвОбмена;
	МенеджерЗаписиСоотвОбмена=РегистрыСведений.СоответствиеОбъектовДляОбмена.СоздатьМенеджерЗаписи();
	МенеджерЗаписиСоотвОбмена.УзелОбмена=УзелОбмена;
	МенеджерЗаписиСоотвОбмена.СобственнаяСсылка=СсылкаБазы;
	МенеджерЗаписиСоотвОбмена.СсылкаВДругойИБ=Строка(СсылкаВИточнике);
	МенеджерЗаписиСоотвОбмена.ИмяТипаПриемника=ИмяТипаПриемника;
	МенеджерЗаписиСоотвОбмена.Записать(Истина);

КонецПроцедуры

#КонецОбласти

Процедура ВыгрузкаКА11() Экспорт
	Выборка=ПланыОбмена.ОбменКА11.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка = ПланыОбмена.ОбменКА11.ЭтотУзел() Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.РежимОтладки Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.IPАдресСервера = "" Или Выборка.URLПространствоВебСервиса = "" Или Выборка.ИмяПубликацииБазы = "" Тогда
			Продолжить;
		КонецЕсли;
		НачатьВыгрузкуКА11(Выборка.Ссылка);
	КонецЦикла;

КонецПроцедуры

#Область ОтправкаДанных
Процедура НачатьВыгрузкуКА11(Узел) Экспорт
	ОбъектУзла=Узел.ПолучитьОбъект();
	ОбъектУзла.НомерОтправленного=ОбъектУзла.НомерОтправленного + 1;
	ОбъектУзла.Записать();
	ПланыОбмена.ВыбратьИзменения(Узел, ОбъектУзла.НомерОтправленного);
	СтруктураОбменаДанными=Новый Структура;
	СтруктураОбменаДанными.Вставить("НомерСообщения", ОбъектУзла.НомерОтправленного);
	СтруктураОбменаДанными.Вставить("УзелОбмена", Узел.УникальныйИдентификатор());
	ЗаполнитьДаннымиСправочниковКА11(СтруктураОбменаДанными, Узел);
	ЗаполнитьДаннымиРегистровКА11(СтруктураОбменаДанными, Узел);
	ЗаполнитьДаннымиДокументов(СтруктураОбменаДанными, Узел);
	Данные=итWMSСлужебныеПроцедурыИФункции.СериализаторДанных(СтруктураОбменаДанными);
	Определение=Новый WSОпределения(СформироватьСтрокуПодключения(Узел), "webserv", "111");
	ПараметрыПрокиСервера=СформироватьПараметрыПроксиСервера(Узел);
	Прокси = Новый WSПрокси(Определение, ПараметрыПрокиСервера.URLПространствоИменСервиса,
		ПараметрыПрокиСервера.ИмяСервиса, ПараметрыПрокиСервера.ИмяТочкиПодключения);
	Прокси.Пользователь="webserv";
	Прокси.Пароль="111";
	Попытка
		Ответ=итWMSСлужебныеПроцедурыИФункции.ДесериализаторДанных(Прокси.ToGetData(Данные));
	Исключение
		ТекстОшибки=ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		ЗаписьЖурналаРегистрации("ОбменКА11", УровеньЖурналаРегистрации.Ошибка, Метаданные.ПланыОбмена.ОбменКА11,
			ТекстОшибки);
	КонецПопытки;
	Если ТипЗнч(Ответ) <> Тип("Структура") Тогда
		Сообщить("ошибка формата данных");
		ЗаписьЖурналаРегистрации("ОбменКА11", УровеньЖурналаРегистрации.Ошибка, Метаданные.ПланыОбмена.ОбменКА11,
			"ошибка формата данных");
	КонецЕсли;
	Если Ответ.Свойство("Статус") Тогда
		Если Ответ.Статус = 404 Тогда
			Сообщить(Ответ.ОписаниеОшибки);
			ЗаписьЖурналаРегистрации("ОбменКА11", УровеньЖурналаРегистрации.Ошибка, Метаданные.ПланыОбмена.ОбменКА11,
				Ответ.ОписаниеОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Ответ.ДанныеПриняты Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Ответ.НомерСообщения);
		ОбъектУзла=Узел.ПолучитьОбъект();
		Если ОбъектУзла.НомерОтправленного = Ответ.НомерСообщения Тогда
			ОбъектУзла.НомерОтправленного=0;
			ОбъектУзла.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДаннымиСправочниковКА11(СтруктураОбменаДанными, Узел)
	ЗаполнитьСерииНоменклатурыКА11(СтруктураОбменаДанными, Узел);
КонецПроцедуры

Процедура ЗаполнитьСерииНоменклатурыКА11(СтруктураОбменаДанными, Знач Узел)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СерииНоменклатурыИзменения.Ссылка.Ссылка КАК Ссылка,
	|	СерииНоменклатурыИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	СерииНоменклатурыИзменения.Ссылка.Владелец КАК Владелец,
	|	СерииНоменклатурыИзменения.Ссылка.Наименование КАК Наименование,
	|	СерииНоменклатурыИзменения.Ссылка.СерийныйНомер КАК СерийныйНомер,
	|	СерииНоменклатурыИзменения.Ссылка.СрокГодности КАК СрокГодности,
	|	СерииНоменклатурыИзменения.Ссылка.ДатаПроизводства КАК алкДатаНачалаРозлива,
	|	СерииНоменклатурыИзменения.Ссылка.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
	|	СерииНоменклатурыИзменения.Ссылка.Производитель КАК Производитель,
	|	ЕСТЬNULL(СерииНоменклатурыИзменения.Ссылка.СтранаПроисхождения.Код, ""-1"") КАК СтранаПроисхожденияКод,
	|	СерииНоменклатурыИзменения.Ссылка.УникальныйИдентификаторСерии КАК УникальныйИдентификаторСерии,
	|	СерииНоменклатурыИзменения.Ссылка.Организация КАК Организация
	|ИЗ
	|	Справочник.СерииНоменклатуры.Изменения КАК СерииНоменклатурыИзменения
	|ГДЕ
	|	СерииНоменклатурыИзменения.Узел = &Узел
	|	И СерииНоменклатурыИзменения.НомерСообщения <= &НомерСообщения";

	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);

	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных=Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ПометкаУдаления");
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("Владелец");
	ТаблицаДанных.Колонки.Добавить("Наименование");
	ТаблицаДанных.Колонки.Добавить("СерийныйНомер");
	ТаблицаДанных.Колонки.Добавить("СрокГодности");
	ТаблицаДанных.Колонки.Добавить("алкДатаНачалаРозлива");
	ТаблицаДанных.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаДанных.Колонки.Добавить("итПризнакПомарочногоУчета");
	ТаблицаДанных.Колонки.Добавить("ИмяТипаПриемника");
	ТаблицаДанных.Колонки.Добавить("Производитель");
	ТаблицаДанных.Колонки.Добавить("УникальныйИдентификаторСерии");
	ТаблицаДанных.Колонки.Добавить("Организация");
	ТаблицаДанных.Колонки.Добавить("СтранаПроисхожденияКод");
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи, , "Ссылка,Владелец,Производитель,Организация");
		НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		
		//@skip-check query-in-loop
		НоваяСтрока.Организация=ПоискЭлементаСоответствияОбменаДругойИБСТипомПриемника(
		ВыборкаДетальныеЗаписи.Организация, Узел);
	
	    //@skip-check query-in-loop
		НоваяСтрока.Производитель=ПоискЭлементаСоответствияОбменаДругойИБСТипомПриемника(
		ВыборкаДетальныеЗаписи.Производитель, Узел);
    
        //@skip-check query-in-loop
	 	НоваяСтрока.Владелец=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Владелец, Узел);
		НоваяСтрока.ИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ссылка.Метаданные().ПолноеИмя();
    
        //@skip-check query-in-loop
		НоваяСтрока.СсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Ссылка, Узел);
	КонецЦикла;
	СтруктураОбменаДанными.Вставить("СерииНоменклатуры", ТаблицаДанных);

КонецПроцедуры

Процедура ЗаполнитьДаннымиРегистровКА11(СтруктураОбменаДанными, Узел)
	ЗаполнитьАлкСоотвСправокАиБиСерийКА11(СтруктураОбменаДанными, Узел);
КонецПроцедуры

Процедура ЗаполнитьАлкСоотвСправокАиБиСерийКА11(СтруктураОбменаДанными, Узел)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	алкСоответствияСправокАиБЕГАИСИСерийИзменения.СерияНоменклатуры КАК СерияНоменклатуры,
	|	алкСоответствияСправокАиБЕГАИСИСерийИзменения.СправкаА КАК СправкаА,
	|	алкСоответствияСправокАиБЕГАИСИСерийИзменения.СправкаБ КАК СправкаБ
	|ИЗ
	|	РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий.Изменения КАК алкСоответствияСправокАиБЕГАИСИСерийИзменения
	|ГДЕ
	|	алкСоответствияСправокАиБЕГАИСИСерийИзменения.Узел = &Узел
	|	И алкСоответствияСправокАиБЕГАИСИСерийИзменения.НомерСообщения <= &НомерСообщения
	|
	|СГРУППИРОВАТЬ ПО
	|	алкСоответствияСправокАиБЕГАИСИСерийИзменения.СерияНоменклатуры,
	|	алкСоответствияСправокАиБЕГАИСИСерийИзменения.СправкаА,
	|	алкСоответствияСправокАиБЕГАИСИСерийИзменения.СправкаБ";

	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);

	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных=Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("СерияНоменклатуры");
	ТаблицаДанных.Колонки.Добавить("СправкаА");
	ТаблицаДанных.Колонки.Добавить("СправкаБ");
	ТаблицаДанных.Колонки.Добавить("Удаление", Новый ОписаниеТипов("Булево"));
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаДанных.Добавить();
		НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор();
		
		//@skip-check query-in-loop
		НоваяСтрока.СправкаА=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.СправкаА, Узел);
		
		//@skip-check query-in-loop
		НоваяСтрока.СправкаБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.СправкаБ, Узел);
		
		//@skip-check query-in-loop
		НоваяСтрока.Удаление= Не ПроверитьНаличиеДанныхСправокАиБИСерий(ВыборкаДетальныеЗаписи);
	КонецЦикла;
	СтруктураОбменаДанными.Вставить("СоотвСправокАиБиСерий", ТаблицаДанных);
КонецПроцедуры

Процедура ЗаполнитьДаннымиДокументов(СтруктураОбменаДанными, Узел)
	ЗаполнитьДаннымиПТУ(СтруктураОбменаДанными, Узел);
	ЗаполнитьДаннымиПеремещения(СтруктураОбменаДанными, Узел);
	ЗаполнитьДаннымиРеализации(СтруктураОбменаДанными, Узел);
	ЗаполнитьДаннымиЗаказаПокупателя(СтруктураОбменаДанными, Узел);
	ЗаполнитьДаннымиСписания(СтруктураОбменаДанными, Узел);
	ЗаполнитьДаннымиДокументаКорректировкиСерий(СтруктураОбменаДанными, Узел);
	ЗаполнитьДаннымиВнутреннегоЗаказа(СтруктураОбменаДанными, Узел);
КонецПроцедуры

Процедура ЗаполнитьДаннымиПТУ(СтруктураОбменаДанными, Узел)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугИзменения.Ссылка.Организация КАК Организация,
	|	ПоступлениеТоваровУслугИзменения.Ссылка.Склад КАК Склад,
	|	ПоступлениеТоваровУслугИзменения.Ссылка.Комментарий КАК Комментарий,
	|	ПоступлениеТоваровУслугИзменения.Ссылка.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслугИзменения.Ссылка.Номер КАК Номер,
	|	ПоступлениеТоваровУслугИзменения.Ссылка.Дата КАК Дата,
	|	ПоступлениеТоваровУслугИзменения.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровУслугИзменения.Ссылка.Товары.(
	|		Номенклатура КАК Номенклатура,
	|		СерияНоменклатуры КАК СерияНоменклатуры,
	|		Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Качество КАК Качество,
	|		Количество КАК Количество) КАК ТоварыПТУ,
	|	ПоступлениеТоваровУслугИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ПоступлениеТоваровУслугИзменения.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПоступлениеТоваровУслугИзменения.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПоступлениеТоваровУслугИзменения.Ссылка.Ответственный.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПоступлениеТоваровУслугИзменения.Ссылка.итКоличествоВозвратнойТары КАК итКоличествоВозвратнойТары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Изменения КАК ПоступлениеТоваровУслугИзменения
	|ГДЕ
	|	ПоступлениеТоваровУслугИзменения.Узел = &Узел
	|	И ПоступлениеТоваровУслугИзменения.НомерСообщения <= &НомерСообщения";
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТаблицаПТУ=Новый ТаблицаЗначений;
	ТаблицаПТУ.Колонки.Добавить("Организация");
	ТаблицаПТУ.Колонки.Добавить("Склад");
	ТаблицаПТУ.Колонки.Добавить("Комментарий");
	ТаблицаПТУ.Колонки.Добавить("Контрагент");
	ТаблицаПТУ.Колонки.Добавить("Номер");
	ТаблицаПТУ.Колонки.Добавить("Дата");
	ТаблицаПТУ.Колонки.Добавить("ФизЛицо");
	ТаблицаПТУ.Колонки.Добавить("Ссылка");
	ТаблицаПТУ.Колонки.Добавить("итКоличествоВозвратнойТары");
	ТаблицаПТУ.Колонки.Добавить("ИмяТипаПриемника");
	ТаблицаПТУ.Колонки.Добавить("ПометкаУдаления");
	ТаблицаПТУ.Колонки.Добавить("НомерВходящегоДокумента");
	ТаблицаПТУ.Колонки.Добавить("ДатаВходящегоДокумента");
	ТаблицаПТУ.Колонки.Добавить("ТаблицаТовары");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаПТУ.Добавить();
		
		//@skip-check query-in-loop
		НоваяСтрока.Организация=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Организация, Узел);
		
		//@skip-check query-in-loop
		НоваяСтрока.Склад=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Склад, Узел);
		
		//@skip-check query-in-loop
		НоваяСтрока.ФизЛицо=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.ФизическоеЛицо, Узел);
		НоваяСтрока.Комментарий=ВыборкаДетальныеЗаписи.Комментарий;
		НоваяСтрока.НомерВходящегоДокумента=ВыборкаДетальныеЗаписи.НомерВходящегоДокумента;
		НоваяСтрока.ДатаВходящегоДокумента=ВыборкаДетальныеЗаписи.ДатаВходящегоДокумента;
		НоваяСтрока.Номер=ВыборкаДетальныеЗаписи.Номер;
		
		//@skip-check query-in-loop
		НоваяСтрока.Контрагент=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Контрагент, Узел);
		НоваяСтрока.ПометкаУдаления=ВыборкаДетальныеЗаписи.ПометкаУдаления;
		НоваяСтрока.Дата=ВыборкаДетальныеЗаписи.Дата;
		НоваяСтрока.ИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ссылка.Метаданные().ПолноеИмя();
		НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		НоваяСтрока.итКоличествоВозвратнойТары=ВыборкаДетальныеЗаписи.итКоличествоВозвратнойТары;
		
		ТаблицаТовары=Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("Номенклатура");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатурыВДругойИБ");
		ТаблицаТовары.Колонки.Добавить("СерияИмяТипаПриемника");
		ТаблицаТовары.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаТовары.Колонки.Добавить("Коэффициент");
		ТаблицаТовары.Колонки.Добавить("Качество");
		ТаблицаТовары.Колонки.Добавить("Количество");
		ВыборкаТовары=ВыборкаДетальныеЗаписи.ТоварыПТУ.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			НоваяСтрокаТовары=ТаблицаТовары.Добавить();
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.Номенклатура=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.Номенклатура, Узел);
			НоваяСтрокаТовары.СерияНоменклатуры=ВыборкаТовары.СерияНоменклатуры.УникальныйИдентификатор();
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.СерияНоменклатурыВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.СерияНоменклатуры, Узел);
            
            //@skip-check query-in-loop
			НоваяСтрокаТовары.ХарактеристикаНоменклатуры=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.ХарактеристикаНоменклатуры, Узел);
			НоваяСтрокаТовары.СерияИмяТипаПриемника=ВыборкаТовары.СерияНоменклатуры.Метаданные().ПолноеИмя();
            
            //@skip-check query-in-loop
			НоваяСтрокаТовары.Качество=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.Качество, Узел);
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.ЕдиницаИзмерения=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.ЕдиницаИзмерения,
				Узел);
			НоваяСтрокаТовары.Коэффициент=ВыборкаТовары.Коэффициент;
			НоваяСтрокаТовары.Количество=ВыборкаТовары.Количество;
		КонецЦикла;
		НоваяСтрока.ТаблицаТовары=ТаблицаТовары;
	КонецЦикла;
	СтруктураОбменаДанными.Вставить("ПТУ", ТаблицаПТУ);
КонецПроцедуры

Процедура ЗаполнитьДаннымиПеремещения(СтруктураОбменаДанными, Узел)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваровИзменения.Ссылка.Организация КАК Организация,
	|	ПеремещениеТоваровИзменения.Ссылка.Комментарий КАК Комментарий,
	|	ВЫБОР
	|		КОГДА ПеремещениеТоваровИзменения.Ссылка.НомерИсточника = """"
	|			ТОГДА ПеремещениеТоваровИзменения.Ссылка.Номер
	|		ИНАЧЕ ПеремещениеТоваровИзменения.Ссылка.НомерИсточника
	|	КОНЕЦ КАК Номер,
	|	ПеремещениеТоваровИзменения.Ссылка.Дата КАК Дата,
	|	ПеремещениеТоваровИзменения.Ссылка КАК Ссылка,
	|	ПеремещениеТоваровИзменения.Ссылка.Товары.(
	|		Номенклатура КАК Номенклатура,
	|		СерияНоменклатуры КАК СерияНоменклатуры,
	|		Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Качество КАК Качество,
	|		Количество КАК Количество,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		ЕдиницаИзмеренияМест.Коэффициент КАК КоэффициентМест) КАК ТоварыПТУ,
	|	ПеремещениеТоваровИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ПеремещениеТоваровИзменения.Ссылка.СкладОтправитель КАК СкладОтправитель,
	|	ПеремещениеТоваровИзменения.Ссылка.СкладПолучатель КАК СкладПолучатель,
	|	ПеремещениеТоваровИзменения.Ссылка.Проведен КАК Проведен,
	|	ПеремещениеТоваровИзменения.Ссылка.ПеремещениеНаУдаленныйСклад КАК ПеремещениеНаУдаленныйСклад
	|ИЗ
	|	Документ.ПеремещениеТоваров.Изменения КАК ПеремещениеТоваровИзменения
	|ГДЕ
	|	ПеремещениеТоваровИзменения.Узел = &Узел
	|	И ПеремещениеТоваровИзменения.НомерСообщения <= &НомерСообщения";
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТаблицаПеремещения=Новый ТаблицаЗначений;
	ТаблицаПеремещения.Колонки.Добавить("Организация");
	ТаблицаПеремещения.Колонки.Добавить("СкладОтправитель");
	ТаблицаПеремещения.Колонки.Добавить("СкладПолучатель");
	ТаблицаПеремещения.Колонки.Добавить("Проведен");
	ТаблицаПеремещения.Колонки.Добавить("Комментарий");
	ТаблицаПеремещения.Колонки.Добавить("Номер");
	ТаблицаПеремещения.Колонки.Добавить("Дата");
	ТаблицаПеремещения.Колонки.Добавить("Ссылка");
	ТаблицаПеремещения.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаПеремещения.Колонки.Добавить("ПеремещениеНаУдаленныйСклад");
	ТаблицаПеремещения.Колонки.Добавить("ИмяТипаПриемника");
	ТаблицаПеремещения.Колонки.Добавить("ПометкаУдаления");
	ТаблицаПеремещения.Колонки.Добавить("ТаблицаТовары");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаПеремещения.Добавить();
		
		//@skip-check query-in-loop
		НоваяСтрока.Организация=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Организация, Узел);
		
		//@skip-check query-in-loop
		НоваяСтрока.СкладОтправитель=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.СкладОтправитель,
			Узел);
		
		//@skip-check query-in-loop
		НоваяСтрока.СкладПолучатель=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.СкладПолучатель,
			Узел);
		НоваяСтрока.Комментарий=ВыборкаДетальныеЗаписи.Комментарий;
		НоваяСтрока.ПеремещениеНаУдаленныйСклад=ВыборкаДетальныеЗаписи.ПеремещениеНаУдаленныйСклад;
		НоваяСтрока.Номер=ВыборкаДетальныеЗаписи.Номер;
		НоваяСтрока.Проведен=ВыборкаДетальныеЗаписи.Проведен;
		НоваяСтрока.ПометкаУдаления=ВыборкаДетальныеЗаписи.ПометкаУдаления;
		НоваяСтрока.Дата=ВыборкаДетальныеЗаписи.Дата;
		НоваяСтрока.ИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ссылка.Метаданные().ПолноеИмя();
		НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		//@skip-check query-in-loop
		НоваяСтрока.СсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Ссылка, Узел);
		ТаблицаТовары=Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("Номенклатура");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатурыВДругойИБ");
		ТаблицаТовары.Колонки.Добавить("СерияИмяТипаПриемника");
		ТаблицаТовары.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмеренияМест");
		ТаблицаТовары.Колонки.Добавить("КоэффициентМест");
		ТаблицаТовары.Колонки.Добавить("Коэффициент");
		ТаблицаТовары.Колонки.Добавить("Качество");
		ТаблицаТовары.Колонки.Добавить("Количество");
		ВыборкаТовары=ВыборкаДетальныеЗаписи.ТоварыПТУ.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			НоваяСтрокаТовары=ТаблицаТовары.Добавить();
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.Номенклатура=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.Номенклатура, Узел);
			НоваяСтрокаТовары.СерияНоменклатуры=ВыборкаТовары.СерияНоменклатуры.УникальныйИдентификатор();
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.СерияНоменклатурыВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.СерияНоменклатуры, Узел);
            
            //@skip-check query-in-loop
			НоваяСтрокаТовары.ХарактеристикаНоменклатуры=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.ХарактеристикаНоменклатуры, Узел);
			НоваяСтрокаТовары.СерияИмяТипаПриемника=ВыборкаТовары.СерияНоменклатуры.Метаданные().ПолноеИмя();
            
            //@skip-check query-in-loop
			НоваяСтрокаТовары.Качество=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.Качество, Узел);
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.ЕдиницаИзмерения=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.ЕдиницаИзмерения,
				Узел);
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.ЕдиницаИзмеренияМест=ПоискЭлементаСоответствияОбменаДругойИБ(
			ВыборкаТовары.ЕдиницаИзмеренияМест, Узел);
			НоваяСтрокаТовары.КоэффициентМест=ВыборкаТовары.КоэффициентМест;
			НоваяСтрокаТовары.Коэффициент=ВыборкаТовары.Коэффициент;
			НоваяСтрокаТовары.Количество=ВыборкаТовары.Количество;
		КонецЦикла;
		НоваяСтрока.ТаблицаТовары=ТаблицаТовары;
	КонецЦикла;
	СтруктураОбменаДанными.Вставить("ТаблицаПеремещения", ТаблицаПеремещения);
КонецПроцедуры

Процедура ЗаполнитьДаннымиРеализации(СтруктураОбменаДанными, Узел)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугИзменения.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугИзменения.Ссылка.Номер КАК Номер,
	|	РеализацияТоваровУслугИзменения.Ссылка.Дата КАК Дата,
	|	РеализацияТоваровУслугИзменения.Ссылка.Проведен КАК Проведен,
	|	РеализацияТоваровУслугИзменения.Ссылка.Комментарий КАК Комментарий,
	|	РеализацияТоваровУслугИзменения.Ссылка.Организация КАК Организация,
	|	РеализацияТоваровУслугИзменения.Ссылка.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслугИзменения.Ссылка.Склад КАК Склад,
	|	РеализацияТоваровУслугИзменения.Ссылка.Товары.(
	|		Номенклатура КАК Номенклатура,
	|		СерияНоменклатуры КАК СерияНоменклатуры,
	|		Качество КАК Качество,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	) КАК Товары,
	|	РеализацияТоваровУслугИзменения.Ссылка.Сделка КАК Сделка,
	|	РеализацияТоваровУслугИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	РеализацияТоваровУслугИзменения.Ссылка.Ответственный.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РеализацияТоваровУслугИзменения.Ссылка.Основание.Номер КАК НомерНаборки,
	|	РеализацияТоваровУслугИзменения.Ссылка.итКоличествоВозвратнойТары КАК итКоличествоВозвратнойТары
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Изменения КАК РеализацияТоваровУслугИзменения
	|ГДЕ
	|	РеализацияТоваровУслугИзменения.Узел = &Узел
	|	И РеализацияТоваровУслугИзменения.НомерСообщения <= &НомерСообщения";

	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);

	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРеализации=Новый ТаблицаЗначений;
	ТаблицаРеализации.Колонки.Добавить("Организация");
	ТаблицаРеализации.Колонки.Добавить("Склад");
	ТаблицаРеализации.Колонки.Добавить("Проведен");
	ТаблицаРеализации.Колонки.Добавить("ФизЛицо");
	ТаблицаРеализации.Колонки.Добавить("Контрагент");
	ТаблицаРеализации.Колонки.Добавить("Комментарий");
	ТаблицаРеализации.Колонки.Добавить("Номер");
	ТаблицаРеализации.Колонки.Добавить("Дата");
	ТаблицаРеализации.Колонки.Добавить("Ссылка");
	ТаблицаРеализации.Колонки.Добавить("Сделка");
	ТаблицаРеализации.Колонки.Добавить("ИмяТипаПриемника");
	ТаблицаРеализации.Колонки.Добавить("ПометкаУдаления");
	ТаблицаРеализации.Колонки.Добавить("итКоличествоВозвратнойТары");
	ТаблицаРеализации.Колонки.Добавить("НомерНаборки");
	ТаблицаРеализации.Колонки.Добавить("ТаблицаТовары");

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаРеализации.Добавить();
		
		//@skip-check query-in-loop
		НоваяСтрока.Организация=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Организация, Узел);
		
		//@skip-check query-in-loop
		НоваяСтрока.Склад=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Склад, Узел);
		
		//@skip-check query-in-loop
		НоваяСтрока.ФизЛицо=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.ФизическоеЛицо, Узел);
		
		//@skip-check query-in-loop
		НоваяСтрока.Контрагент=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Контрагент, Узел);
		
		//@skip-check query-in-loop
		НоваяСтрока.Сделка=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Сделка, Узел);
		НоваяСтрока.Комментарий=ВыборкаДетальныеЗаписи.Комментарий;
		НоваяСтрока.Номер=ВыборкаДетальныеЗаписи.Номер;
		НоваяСтрока.НомерНаборки=ВыборкаДетальныеЗаписи.НомерНаборки;
		НоваяСтрока.Проведен=ВыборкаДетальныеЗаписи.Проведен;
		НоваяСтрока.итКоличествоВозвратнойТары=ВыборкаДетальныеЗаписи.итКоличествоВозвратнойТары;
		НоваяСтрока.ПометкаУдаления=ВыборкаДетальныеЗаписи.ПометкаУдаления;
		НоваяСтрока.Дата=ВыборкаДетальныеЗаписи.Дата;
		НоваяСтрока.ИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ссылка.Метаданные().ПолноеИмя();
		НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		ТаблицаТовары=Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("Номенклатура");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатурыВДругойИБ");
		ТаблицаТовары.Колонки.Добавить("СерияИмяТипаПриемника");
		ТаблицаТовары.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмеренияМест");
		ТаблицаТовары.Колонки.Добавить("Коэффициент");
		ТаблицаТовары.Колонки.Добавить("Качество");
		ТаблицаТовары.Колонки.Добавить("Количество");
		ВыборкаТовары=ВыборкаДетальныеЗаписи.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			НоваяСтрокаТовары=ТаблицаТовары.Добавить();
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.Номенклатура=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.Номенклатура, Узел);
			НоваяСтрокаТовары.СерияНоменклатуры=ВыборкаТовары.СерияНоменклатуры.УникальныйИдентификатор();
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.СерияНоменклатурыВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.СерияНоменклатуры, Узел);
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.ХарактеристикаНоменклатуры=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.ХарактеристикаНоменклатуры, Узел);
			НоваяСтрокаТовары.СерияИмяТипаПриемника=ВыборкаТовары.СерияНоменклатуры.Метаданные().ПолноеИмя();
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.Качество=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.Качество, Узел);
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.ЕдиницаИзмерения=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.ЕдиницаИзмерения,
				Узел);
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.ЕдиницаИзмеренияМест=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.ЕдиницаИзмеренияМест, Узел);
			НоваяСтрокаТовары.Коэффициент=ВыборкаТовары.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрокаТовары.Количество=ВыборкаТовары.Количество;
		КонецЦикла;
		НоваяСтрока.ТаблицаТовары=ТаблицаТовары;

	КонецЦикла;
	СтруктураОбменаДанными.Вставить("ТаблицаРеализаций", ТаблицаРеализации);
КонецПроцедуры

Процедура ЗаполнитьДаннымиЗаказаПокупателя(СтруктураОбменаДанными, Узел)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяИзменения.Ссылка.Набран КАК Набран,
	|	ЗаказПокупателяИзменения.Ссылка.ДатаЗавершенияНаборки КАК ДатаЗавершенияНаборки,
	|	ЗаказПокупателяИзменения.Ссылка.Отгружен КАК Отгружен,
	|	ЗаказПокупателяИзменения.Ссылка.ВНаборе КАК ВНаборе,
	|	ЗаказПокупателяИзменения.Ссылка.ДатаФактическойОтгрузки КАК ДатаФактическойОтгрузки,
	|	ЗаказПокупателяИзменения.Ссылка КАК Ссылка,
	|	ЗаказПокупателяИзменения.Узел КАК Узел
	|ПОМЕСТИТЬ ВтДанныеЗаказов
	|ИЗ
	|	Документ.ЗаказПокупателя.Изменения КАК ЗаказПокупателяИзменения
	|ГДЕ
	|	ЗаказПокупателяИзменения.Узел = &Узел
	|	И ЗаказПокупателяИзменения.НомерСообщения <= &НомерСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеЗаказов.Набран КАК Набран,
	|	ВтДанныеЗаказов.ДатаЗавершенияНаборки КАК ДатаЗавершенияНаборки,
	|	ВтДанныеЗаказов.Отгружен КАК Отгружен,
	|	ВтДанныеЗаказов.ВНаборе КАК ВНаборе,
	|	ВтДанныеЗаказов.ДатаФактическойОтгрузки КАК ДатаФактическойОтгрузки,
	|	ВтДанныеЗаказов.Ссылка КАК Ссылка,
	|	ВтДанныеЗаказов.Узел КАК Узел
	|ИЗ
	|	ВтДанныеЗаказов КАК ВтДанныеЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	|		ПО ВтДанныеЗаказов.Узел = СоответствиеОбъектовДляОбмена.УзелОбмена
	|			И ВтДанныеЗаказов.Ссылка = СоответствиеОбъектовДляОбмена.СобственнаяСсылка";

	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТаблицаДанных=Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Набран");
	ТаблицаДанных.Колонки.Добавить("ДатаЗавершенияНаборки");
	ТаблицаДанных.Колонки.Добавить("Отгружен");
	ТаблицаДанных.Колонки.Добавить("ВНаборе");
	ТаблицаДанных.Колонки.Добавить("ДатаФактическойОтгрузки");
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи, , "Ссылка");
		
		//@skip-check query-in-loop
		НоваяСтрока.Ссылка=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Ссылка, Узел);
	КонецЦикла;
	СтруктураОбменаДанными.Вставить("ЗаказыПокупателя", ТаблицаДанных);
КонецПроцедуры

Процедура ЗаполнитьДаннымиСписания(СтруктураОбменаДанными, Узел)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеТоваровИзменения.Ссылка.Номер КАК Номер,
	|	СписаниеТоваровИзменения.Ссылка.Дата КАК Дата,
	|	СписаниеТоваровИзменения.Ссылка.Проведен КАК Проведен,
	|	СписаниеТоваровИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	СписаниеТоваровИзменения.Ссылка.Ответственный.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписаниеТоваровИзменения.Ссылка.Комментарий КАК Комментарий,
	|	СписаниеТоваровИзменения.Ссылка.Склад КАК Склад,
	|	СписаниеТоваровИзменения.Ссылка.Организация КАК Организация,
	|	СписаниеТоваровИзменения.Ссылка.Товары.(
	|		Номенклатура КАК Номенклатура,
	|		СерияНоменклатуры КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Качество КАК Качество,
	|		Количество КАК Количество
	|	) КАК Товары,
	|	СписаниеТоваровИзменения.Ссылка КАК Ссылка,
	|	СписаниеТоваровИзменения.Ссылка.Основание КАК Основание
	|ИЗ
	|	Документ.СписаниеТоваров.Изменения КАК СписаниеТоваровИзменения
	|ГДЕ
	|	СписаниеТоваровИзменения.Узел = &Узел
	|	И СписаниеТоваровИзменения.НомерСообщения <= &НомерСообщения";

	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТаблицаСписаний=Новый ТаблицаЗначений;
	ТаблицаСписаний.Колонки.Добавить("Номер");
	ТаблицаСписаний.Колонки.Добавить("Дата");
	ТаблицаСписаний.Колонки.Добавить("Проведен");
	ТаблицаСписаний.Колонки.Добавить("ПометкаУдаления");
	ТаблицаСписаний.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаСписаний.Колонки.Добавить("Комментарий");
	ТаблицаСписаний.Колонки.Добавить("Склад");
	ТаблицаСписаний.Колонки.Добавить("Организация");
	ТаблицаСписаний.Колонки.Добавить("Ссылка");
	ТаблицаСписаний.Колонки.Добавить("ДокументРезерва");
	ТаблицаСписаний.Колонки.Добавить("ИмяТипаПриемника");
	ТаблицаСписаний.Колонки.Добавить("ТаблицаТовары");

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаСписаний.Добавить();
		НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		НоваяСтрока.Номер=ВыборкаДетальныеЗаписи.Номер;
		НоваяСтрока.Дата=ВыборкаДетальныеЗаписи.Дата;
		НоваяСтрока.Проведен=ВыборкаДетальныеЗаписи.Проведен;
		НоваяСтрока.ПометкаУдаления=ВыборкаДетальныеЗаписи.ПометкаУдаления;
		
		//@skip-check query-in-loop
		НоваяСтрока.ФизическоеЛицо=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.ФизическоеЛицо, Узел);
		НоваяСтрока.Комментарий=ВыборкаДетальныеЗаписи.Комментарий;
		
		//@skip-check query-in-loop
		НоваяСтрока.Склад=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Склад, Узел);
        
        //@skip-check query-in-loop
		НоваяСтрока.Организация=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Организация, Узел);
		НоваяСтрока.ИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ссылка.Метаданные().ПолноеИмя();
		НоваяСтрока.ДокументРезерва=Неопределено;
		Если ТипЗнч(ВыборкаДетальныеЗаписи.Основание) = Тип("ДокументСсылка.итWMSНаборка") Тогда
			Если ТипЗнч(ВыборкаДетальныеЗаписи.Основание.итОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Если Не ВыборкаДетальныеЗаписи.Основание.итОснование.Пустая() Тогда 
					
					//@skip-check query-in-loop
					НоваяСтрока.ДокументРезерва=ПоискЭлементаСоответствияОбменаДругойИБ(
						ВыборкаДетальныеЗаписи.Основание.итОснование, Узел);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ТаблицаТовары=Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("Номенклатура");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатурыВДругойИБ");
		ТаблицаТовары.Колонки.Добавить("СерияИмяТипаПриемника");
		ТаблицаТовары.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаТовары.Колонки.Добавить("Качество");
		ТаблицаТовары.Колонки.Добавить("Количество");
		ВыборкаТовары=ВыборкаДетальныеЗаписи.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			НоваяСтрокаТовары= ТаблицаТовары.Добавить();
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.Номенклатура=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.Номенклатура, Узел);
			НоваяСтрокаТовары.СерияНоменклатуры=ВыборкаТовары.СерияНоменклатуры.УникальныйИдентификатор();
            
            //@skip-check query-in-loop
			НоваяСтрокаТовары.СерияНоменклатурыВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.СерияНоменклатуры, Узел);
			НоваяСтрокаТовары.СерияИмяТипаПриемника=ВыборкаТовары.СерияНоменклатуры.Метаданные().ПолноеИмя();
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.ХарактеристикаНоменклатуры=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.ХарактеристикаНоменклатуры, Узел);
			НоваяСтрокаТовары.Количество=ВыборкаТовары.Количество;
			
			//@skip-check query-in-loop
			НоваяСтрокаТовары.Качество=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.Качество, Узел);
		КонецЦикла;
		НоваяСтрока.ТаблицаТовары=ТаблицаТовары;
	КонецЦикла;
	СтруктураОбменаДанными.Вставить("ТаблицаСписаний", ТаблицаСписаний);
КонецПроцедуры

Процедура ЗаполнитьДаннымиДокументаКорректировкиСерий(СтруктураОбменаДанными, Узел)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаСерийИХарактеристикТоваровИзменения.Ссылка.Ссылка КАК Ссылка,
	|	КорректировкаСерийИХарактеристикТоваровИзменения.Ссылка.Номер КАК Номер,
	|	КорректировкаСерийИХарактеристикТоваровИзменения.Ссылка.Дата КАК Дата,
	|	КорректировкаСерийИХарактеристикТоваровИзменения.Ссылка.Проведен КАК Проведен,
	|	КорректировкаСерийИХарактеристикТоваровИзменения.Ссылка.Комментарий КАК Комментарий,
	|	КорректировкаСерийИХарактеристикТоваровИзменения.Ссылка.Организация КАК Организация,
	|	КорректировкаСерийИХарактеристикТоваровИзменения.Ссылка.Склад КАК Склад,
	|	КорректировкаСерийИХарактеристикТоваровИзменения.Ссылка.Товары.(
	|		Номенклатура КАК Номенклатура,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Качество КАК Качество,
	|		КоличествоМест КАК КоличествоМест,
	|		Количество КАК Количество,
	|		Коэффициент КАК Коэффициент,
	|		СерияНоменклатурыНовая КАК СерияНоменклатурыНовая,
	|		СерияНоменклатурыСтарая КАК СерияНоменклатурыСтарая,
	|		ХарактеристикаНоменклатурыНовая КАК ХарактеристикаНоменклатурыНовая,
	|		ХарактеристикаНоменклатурыСтарая КАК ХарактеристикаНоменклатурыСтарая,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	) КАК Товары,
	|	КорректировкаСерийИХарактеристикТоваровИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	КорректировкаСерийИХарактеристикТоваровИзменения.Ссылка.Ответственный.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.КорректировкаСерийИХарактеристикТоваров.Изменения КАК КорректировкаСерийИХарактеристикТоваровИзменения
	|ГДЕ
	|	КорректировкаСерийИХарактеристикТоваровИзменения.НомерСообщения <= &НомерСообщения
	|	И КорректировкаСерийИХарактеристикТоваровИзменения.Узел = &Узел";

	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТаблицаКорректировокСерий=Новый ТаблицаЗначений;
	ТаблицаКорректировокСерий.Колонки.Добавить("Ссылка");
	ТаблицаКорректировокСерий.Колонки.Добавить("Номер");
	ТаблицаКорректировокСерий.Колонки.Добавить("Дата");
	ТаблицаКорректировокСерий.Колонки.Добавить("Проведен");
	ТаблицаКорректировокСерий.Колонки.Добавить("Комментарий");
	ТаблицаКорректировокСерий.Колонки.Добавить("Организация");
	ТаблицаКорректировокСерий.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаКорректировокСерий.Колонки.Добавить("Склад");
	ТаблицаКорректировокСерий.Колонки.Добавить("ПометкаУдаления");
	ТаблицаКорректировокСерий.Колонки.Добавить("ИмяТипаПриемника");
	ТаблицаКорректировокСерий.Колонки.Добавить("ТаблицаТовары");

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаКорректировокСерий.Добавить();
		НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		НоваяСтрока.Номер=ВыборкаДетальныеЗаписи.Номер;
		НоваяСтрока.Дата=ВыборкаДетальныеЗаписи.Дата;
		НоваяСтрока.Проведен=ВыборкаДетальныеЗаписи.Проведен;
		НоваяСтрока.Комментарий=ВыборкаДетальныеЗаписи.Комментарий; 
		
		//@skip-check query-in-loop
		НоваяСтрока.Организация=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Организация, Узел);
		
		//@skip-check query-in-loop
		НоваяСтрока.ФизическоеЛицо=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.ФизическоеЛицо, Узел); 	
		
		//@skip-check query-in-loop
		НоваяСтрока.Склад=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Склад, Узел);
		НоваяСтрока.ПометкаУдаления=ВыборкаДетальныеЗаписи.ПометкаУдаления;
		НоваяСтрока.ИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ссылка.Метаданные().ПолноеИмя();
		ВыборкаТовары=ВыборкаДетальныеЗаписи.Товары.Выбрать();
		ТаблицаТовары=Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("Номенклатура");
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмеренияМест");
		ТаблицаТовары.Колонки.Добавить("Качество");
		ТаблицаТовары.Колонки.Добавить("КоличествоМест");
		ТаблицаТовары.Колонки.Добавить("Количество");
		ТаблицаТовары.Колонки.Добавить("Коэффициент");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатурыНовая");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатурыНоваяВДругойИБ");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатурыСтарая");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатурыСтараяВДругойИБ");
		ТаблицаТовары.Колонки.Добавить("ХарактеристикаНоменклатурыНовая");
		ТаблицаТовары.Колонки.Добавить("ХарактеристикаНоменклатурыСтарая");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатурыНоваяИмяТипаПриемника");
		ТаблицаТовары.Колонки.Добавить("СерияНоменклатурыСтараяИмяТипаПриемника");
		ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения");
		Пока ВыборкаТовары.Следующий() Цикл

			НоваяСтрокаТовары= ТаблицаТовары.Добавить();
		
		//@skip-check query-in-loop
			НоваяСтрокаТовары.Номенклатура=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.Номенклатура, Узел); 
		
		//@skip-check query-in-loop
			НоваяСтрокаТовары.ЕдиницаИзмеренияМест=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.ЕдиницаИзмеренияМест, Узел); 
		
		//@skip-check query-in-loop
			НоваяСтрокаТовары.Качество=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.Качество, Узел);
			НоваяСтрокаТовары.КоличествоМест=ВыборкаТовары.КоличествоМест;
			; 
		НоваяСтрокаТовары.Количество=ВыборкаТовары.Количество;
			НоваяСтрокаТовары.Коэффициент=ВыборкаТовары.Коэффициент;
			; 
		НоваяСтрокаТовары.СерияНоменклатурыНовая=ВыборкаТовары.СерияНоменклатурыНовая.УникальныйИдентификатор();
		
		//@skip-check query-in-loop
			НоваяСтрокаТовары.СерияНоменклатурыНоваяВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.СерияНоменклатурыНовая, Узел);
			НоваяСтрокаТовары.СерияНоменклатурыСтарая=ВыборкаТовары.СерияНоменклатурыСтарая.УникальныйИдентификатор();
		
		//@skip-check query-in-loop
			НоваяСтрокаТовары.СерияНоменклатурыСтараяВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.СерияНоменклатурыСтарая, Узел);
			НоваяСтрокаТовары.СерияНоменклатурыНоваяИмяТипаПриемника=ВыборкаТовары.СерияНоменклатурыНовая.Метаданные().ПолноеИмя();
			НоваяСтрокаТовары.СерияНоменклатурыСтараяИмяТипаПриемника=ВыборкаТовары.СерияНоменклатурыСтарая.Метаданные().ПолноеИмя();
       	
       	//@skip-check query-in-loop
			НоваяСтрокаТовары.ХарактеристикаНоменклатурыНовая=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.ХарактеристикаНоменклатурыНовая, Узел);
        
        //@skip-check query-in-loop
			НоваяСтрокаТовары.ХарактеристикаНоменклатурыСтарая=ПоискЭлементаСоответствияОбменаДругойИБ(
				ВыборкаТовары.ХарактеристикаНоменклатурыСтарая, Узел);
        
        //@skip-check query-in-loop
			НоваяСтрокаТовары.ЕдиницаИзмерения=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТовары.ЕдиницаИзмерения,
				Узел);

		КонецЦикла;
		НоваяСтрока.ТаблицаТовары=ТаблицаТовары;
	КонецЦикла;
	СтруктураОбменаДанными.Вставить("ТаблицаКорректировокСерий", ТаблицаКорректировокСерий);
КонецПроцедуры

Процедура ЗаполнитьДаннымиВнутреннегоЗаказа(СтруктураОбменаДанными, Узел)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнутреннийЗаказИзменения.Ссылка,
	|	ВнутреннийЗаказИзменения.Ссылка.ДатаФактическойОтгрузки КАК итДатаФактическойОтгрузки,
	|	ВнутреннийЗаказИзменения.Ссылка.Набран КАК Набран,
	|	ВнутреннийЗаказИзменения.Ссылка.ВНаборе КАК ВНаборе,
	|	ВнутреннийЗаказИзменения.Ссылка.ДатаЗавершенияНаборки КАК итДатаЗавершенияНаборки,
	|	ВнутреннийЗаказИзменения.Ссылка.Отгружен КАК Отгружен,
	|	ВнутреннийЗаказИзменения.Ссылка.КоличествоПаллет КАК итПаллет
	|ИЗ
	|	Документ.ВнутреннийЗаказ.Изменения КАК ВнутреннийЗаказИзменения
	|ГДЕ
	|	ВнутреннийЗаказИзменения.НомерСообщения <= &НомерСообщения
	|	И ВнутреннийЗаказИзменения.Узел = &Узел";

	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	ТаблицаДанных=Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("итДатаФактическойОтгрузки");
	ТаблицаДанных.Колонки.Добавить("Набран");
	ТаблицаДанных.Колонки.Добавить("ВНаборе");
	ТаблицаДанных.Колонки.Добавить("итДатаЗавершенияНаборки");
	ТаблицаДанных.Колонки.Добавить("Отгружен");
	ТаблицаДанных.Колонки.Добавить("итПаллет");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи, , "Ссылка");
		//@skip-check query-in-loop
		НоваяСтрока.Ссылка=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Ссылка, Узел);
	КонецЦикла;

	СтруктураОбменаДанными.Вставить("ВнутренниеЗаказы", ТаблицаДанных);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗапросовДанныхВрежимиОнлайн
Функция ПолучитьДанныеОнлайн(Знач СтруктураДанных) Экспорт
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("Статус", 404);
		СтруктураОтвета.Вставить("ОписаниеОшибки", "не верный формат входящих данных");
		Возврат СтруктураОтвета;
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(СтруктураДанных, "ТипПолученияДанных") Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("Статус", СтруктураДанных.Статус);
		СтруктураОтвета.Вставить("ОписаниеОшибки", СтруктураДанных.ОписаниеОшибки);
		Возврат СтруктураОтвета;
	КонецЕсли;
	Если СтруктураДанных.ТипПолученияДанных = "ПолучениеМарокПроверкиПоРеализации" Тогда
		СтруктураОтвета=ПолучитьДанныеМарокПоРеализацииПроверка(СтруктураДанных);
		Возврат СтруктураОтвета;
	КонецЕсли;
	Если СтруктураДанных.ТипПолученияДанных = "ПолучениеМарокКОАПоРеализации" Тогда
		СтруктураОтвета=ПолучитьДанныеМарокПоРеализацииКОА(СтруктураДанных);
		Возврат СтруктураОтвета;
	КонецЕсли;
	Если СтруктураДанных.ТипПолученияДанных = "ЗаписьПодвержденногоДокументаЕГАИС" Тогда
		СтруктураОтвета=ЗаписьПодвержденногоДокументаЕГАИС(СтруктураДанных);
		Возврат СтруктураОтвета;
	КонецЕсли;
	Если СтруктураДанных.ТипПолученияДанных = "ПолучитьМаркиПоКОА" Тогда
		СтруктураОтвета=ПолучениеДанныхМарокПоКОА(СтруктураДанных);
		Возврат СтруктураОтвета;
	КонецЕсли;
	Если СтруктураДанных.ТипПолученияДанных = "ПолучитьМаркиПоСОА" Тогда
		СтруктураОтвета=ПолучениеДанныхМарокПоСОА(СтруктураДанных);
		Возврат СтруктураОтвета;
	КонецЕсли;
КонецФункции

Функция ПолучениеДанныхМарокПоКОА(СтруктураДанных)
	Если Не СтруктураДанных.Свойство("НомерДокумента") Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("Статус", 404);
		СтруктураОтвета.Вставить("ОписаниеОшибки", "нет свойства НомерДокумента");
		Возврат СтруктураОтвета;
	КонецЕсли;
	Если Не СтруктураДанных.Свойство("УзелОбмена") Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("Статус", 404);
		СтруктураОтвета.Вставить("ОписаниеОшибки", "нет свойства УзелОбмена");
		Возврат СтруктураОтвета;
	КонецЕсли;
	Если Не СтруктураДанных.Свойство("ДатаДокумента") Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("Статус", 404);
		СтруктураОтвета.Вставить("ОписаниеОшибки", "нет свойства ДатаДокумента");
		Возврат СтруктураОтвета;
	КонецЕсли;
	УзелОбмена=ПолучитьУзелОбмена(СтруктураДанных.УзелОбмена);
	СтруктураОтвета=Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеАгрегацииДокумента.SSCC КАК SSCC,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеАгрегацииДокумента.GTIN КАК GTIN,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеАгрегацииДокумента.Марка КАК Марка
	|ПОМЕСТИТЬ ВтДанныеМарок
	|ИЗ
	|	Документ.итWMSКонтрольнаяОперацияАгрегации.ДанныеАгрегацииДокумента КАК итWMSКонтрольнаяОперацияАгрегацииДанныеАгрегацииДокумента
	|ГДЕ
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеАгрегацииДокумента.Ссылка.Номер ПОДОБНО ""%"" + &Номер
	|	И НАЧАЛОПЕРИОДА(итWMSКонтрольнаяОперацияАгрегацииДанныеАгрегацииДокумента.Ссылка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеМарок.SSCC КАК SSCC,
	|	ВтДанныеМарок.GTIN КАК GTIN,
	|	ВтДанныеМарок.Марка КАК Марка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ КАК СправкаБ
	|ПОМЕСТИТЬ ВтДанныеМарокПоСправкеБ
	|ИЗ
	|	ВтДанныеМарок КАК ВтДанныеМарок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
	|		ПО ВтДанныеМарок.Марка = алкХранилищеАкцизныхМарокСрезПоследних.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеМарокПоСправкеБ.SSCC КАК SSCC,
	|	ВтДанныеМарокПоСправкеБ.GTIN КАК GTIN
	|ИЗ
	|	ВтДанныеМарокПоСправкеБ КАК ВтДанныеМарокПоСправкеБ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеМарокПоСправкеБ.SSCC,
	|	ВтДанныеМарокПоСправкеБ.GTIN
	|ИТОГИ ПО
	|	SSCC
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеМарокПоСправкеБ.СправкаБ КАК СправкаБ,
	|	ВтДанныеМарокПоСправкеБ.Марка.ЗначениеШтрихКода КАК Марка,
	|	ВтДанныеМарокПоСправкеБ.GTIN КАК GTIN
	|ИЗ
	|	ВтДанныеМарокПоСправкеБ КАК ВтДанныеМарокПоСправкеБ
	|ИТОГИ ПО
	|	СправкаБ";

	Запрос.УстановитьПараметр("Дата", СтруктураДанных.ДатаДокумента);
	Запрос.УстановитьПараметр("Номер", СтруктураДанных.НомерДокумента);

	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаСправкаБ = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МассивМарокПоСправкеБ=Новый Массив;
	МассивSSCC=Новый Массив;

	Пока ВыборкаСправкаБ.Следующий() Цикл
		СтруктураМассива=Новый Структура;	
		//@skip-check query-in-loop
		СтруктураМассива.Вставить("СправкаБ", ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаСправкаБ.СправкаБ,
			УзелОбмена));
		ТаблицаМарок=Новый ТаблицаЗначений;
		ТаблицаМарок.Колонки.Добавить("Марка");
		ТаблицаМарок.Колонки.Добавить("GTIN");
		ВыборкаДетальныхЗаписейМарок = ВыборкаСправкаБ.Выбрать();

		Пока ВыборкаДетальныхЗаписейМарок.Следующий() Цикл
			НоваяСтрока=ТаблицаМарок.Добавить();
			НоваяСтрока.Марка=ВыборкаДетальныхЗаписейМарок.Марка;
			НоваяСтрока.GTIN=ВыборкаДетальныхЗаписейМарок.GTIN;
		КонецЦикла;
		СтруктураМассива.Вставить("ТаблицаМарок", ТаблицаМарок);
		МассивМарокПоСправкеБ.Добавить(СтруктураМассива);
	КонецЦикла;

	ВыборкаПоSSCC=МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоSSCC.Следующий() Цикл
		СтруктураМассива=Новый Структура;
		СтруктураМассива.Вставить("SSCC", ВыборкаПоSSCC.SSCC);
		ВыборкаКоробов=ВыборкаПоSSCC.Выбрать();
		МассивGTIN=Новый Массив;
		Пока ВыборкаКоробов.Следующий() Цикл
			МассивGTIN.Добавить(ВыборкаКоробов.GTIN);
		КонецЦикла;
		СтруктураМассива.Вставить("МассивGTIN", МассивGTIN);
		МассивSSCC.Добавить(СтруктураМассива);
	КонецЦикла;
	СтруктураОтвета.Вставить("МассивМарокПоСправкеБ", МассивМарокПоСправкеБ);
	СтруктураОтвета.Вставить("МассивSSCC", МассивSSCC);
	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучениеДанныхМарокПоСОА(СтруктураДанных)
	Если Не СтруктураДанных.Свойство("НомерДокумента") Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("Статус", 404);
		СтруктураОтвета.Вставить("ОписаниеОшибки", "нет свойства НомерДокумента");
		Возврат СтруктураОтвета;
	КонецЕсли;
	Если Не СтруктураДанных.Свойство("УзелОбмена") Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("Статус", 404);
		СтруктураОтвета.Вставить("ОписаниеОшибки", "нет свойства УзелОбмена");
		Возврат СтруктураОтвета;
	КонецЕсли;
	Если Не СтруктураДанных.Свойство("ДатаДокумента") Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("Статус", 404);
		СтруктураОтвета.Вставить("ОписаниеОшибки", "нет свойства ДатаДокумента");
		Возврат СтруктураОтвета;
	КонецЕсли;
	СтруктураОтвета=Новый Структура;
	УзелОбмена=ПолучитьУзелОбмена(СтруктураДанных.УзелОбмена);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMS_АгрегацияМарок.SSCC КАК SSCC,
	|	итWMS_АгрегацияМарок.GTIN КАК GTIN,
	|	итWMS_АгрегацияМарок.Марка КАК Марка
	|ПОМЕСТИТЬ ВтДанныеМарок
	|ИЗ
	|	РегистрСведений.итWMS_АгрегацияМарок КАК итWMS_АгрегацияМарок
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(итWMS_АгрегацияМарок.ДокументОснование.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И итWMS_АгрегацияМарок.ДокументОснование.Номер ПОДОБНО ""%"" + &Номер
	|	И ТИПЗНАЧЕНИЯ(итWMS_АгрегацияМарок.ДокументОснование.Ссылка) = ТИП(Документ.итwmsДокументСвободнойАгрегации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеМарок.SSCC КАК SSCC,
	|	ВтДанныеМарок.GTIN КАК GTIN,
	|	ВтДанныеМарок.Марка КАК Марка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ КАК СправкаБ
	|ПОМЕСТИТЬ ВтДанныеМарокПоСправкеБ
	|ИЗ
	|	ВтДанныеМарок КАК ВтДанныеМарок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
	|		ПО ВтДанныеМарок.Марка = алкХранилищеАкцизныхМарокСрезПоследних.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеМарокПоСправкеБ.SSCC КАК SSCC,
	|	ВтДанныеМарокПоСправкеБ.GTIN КАК GTIN
	|ИЗ
	|	ВтДанныеМарокПоСправкеБ КАК ВтДанныеМарокПоСправкеБ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеМарокПоСправкеБ.SSCC,
	|	ВтДанныеМарокПоСправкеБ.GTIN
	|ИТОГИ ПО
	|	SSCC
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеМарокПоСправкеБ.СправкаБ КАК СправкаБ,
	|	ВтДанныеМарокПоСправкеБ.Марка.ЗначениеШтрихКода КАК Марка,
	|	ВтДанныеМарокПоСправкеБ.GTIN КАК GTIN
	|ИЗ
	|	ВтДанныеМарокПоСправкеБ КАК ВтДанныеМарокПоСправкеБ
	|ИТОГИ ПО
	|	СправкаБ";

	Запрос.УстановитьПараметр("Дата", СтруктураДанных.ДатаДокумента);
	Запрос.УстановитьПараметр("Номер", СтруктураДанных.НомерДокумента);

	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаСправкаБ = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МассивМарокПоСправкеБ=Новый Массив;
	МассивSSCC=Новый Массив;

	Пока ВыборкаСправкаБ.Следующий() Цикл
		СтруктураМассива=Новый Структура;
		//@skip-check query-in-loop
		СтруктураМассива.Вставить("СправкаБ", ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаСправкаБ.СправкаБ,
			УзелОбмена));
		ТаблицаМарок=Новый ТаблицаЗначений;
		ТаблицаМарок.Колонки.Добавить("Марка");
		ТаблицаМарок.Колонки.Добавить("GTIN");
		ВыборкаДетальныхЗаписейМарок = ВыборкаСправкаБ.Выбрать();

		Пока ВыборкаДетальныхЗаписейМарок.Следующий() Цикл
			НоваяСтрока=ТаблицаМарок.Добавить();
			НоваяСтрока.Марка=ВыборкаДетальныхЗаписейМарок.Марка;
			НоваяСтрока.GTIN=ВыборкаДетальныхЗаписейМарок.GTIN;
		КонецЦикла;
		СтруктураМассива.Вставить("ТаблицаМарок", ТаблицаМарок);
		МассивМарокПоСправкеБ.Добавить(СтруктураМассива);
	КонецЦикла;

	ВыборкаПоSSCC=МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоSSCC.Следующий() Цикл
		СтруктураМассива=Новый Структура;
		СтруктураМассива.Вставить("SSCC", ВыборкаПоSSCC.SSCC);
		ВыборкаКоробов=ВыборкаПоSSCC.Выбрать();
		МассивGTIN=Новый Массив;
		Пока ВыборкаКоробов.Следующий() Цикл
			МассивGTIN.Добавить(ВыборкаКоробов.GTIN);
		КонецЦикла;
		СтруктураМассива.Вставить("МассивGTIN", МассивGTIN);
		МассивSSCC.Добавить(СтруктураМассива);
	КонецЦикла;
	СтруктураОтвета.Вставить("МассивМарокПоСправкеБ", МассивМарокПоСправкеБ);
	СтруктураОтвета.Вставить("МассивSSCC", МассивSSCC);
	Возврат СтруктураОтвета;
КонецФункции
Функция ЗаписьПодвержденногоДокументаЕГАИС(СтруктураДанных)
	Реализация=Документы.РеализацияТоваровУслуг.ПолучитьСсылку(
		Новый УникальныйИдентификатор(СтруктураДанных.СсылкаВДругойИБ));
	ОбъектРеализации=Реализация.ПолучитьОбъект();
	Если ОбъектРеализации = Неопределено Тогда
		Возврат СтруктураДанных;
	КонецЕсли;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных=Новый БлокировкаДанных;
	ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.ЗаписиПодтвержденияВыгрузкиВЕГАИС");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументРегУчета", Реализация);
	БлокировкаДанных.Заблокировать();

	Набор=РегистрыСведений.ЗаписиПодтвержденияВыгрузкиВЕГАИС.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументРегУчета.Установить(Реализация);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
	НоваяСтрока=Набор.Добавить();
	НоваяСтрока.ДокументРегУчета=Реализация;
	Набор.Записать();
	ЗафиксироватьТранзакцию();
	СтруктураДанных.Вставить("Записано", Истина);
	Возврат СтруктураДанных;
КонецФункции

Функция ПолучитьДанныеМарокПоРеализацииКОА(СтруктураДанных)
	УзелОбмена=ПолучитьУзелОбмена(СтруктураДанных.УзелОбмена);
	СтруктураОтвета=Новый Структура;
	Реализация=Документы.РеализацияТоваровУслуг.ПолучитьСсылку(СтруктураДанных.СсылкаВДругойИБ);
	ОбъектРеализации=Реализация.ПолучитьОбъект();
	Если ОбъектРеализации = Неопределено Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("Статус", 404);
		СтруктураОтвета.Вставить("ОписаниеОшибки", "реализация не найдена");
		Возврат СтруктураОтвета;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	итWMSКонтрольнаяОперацияАгрегации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КОА
	|ИЗ
	|	Документ.итWMSКонтрольнаяОперацияАгрегации КАК итWMSКонтрольнаяОперацияАгрегации
	|ГДЕ
	|	итWMSКонтрольнаяОперацияАгрегации.итОснование = &Реализация
	|	И итWMSКонтрольнаяОперацияАгрегации.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеАгрегацииДокумента.Марка КАК Марка,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеАгрегацииДокумента.GTIN КАК GTIN,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеАгрегацииДокумента.SSCC КАК SSCC,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеАгрегацииДокумента.СерияНоменклатуры КАК СерияНоменклатуры
	|ПОМЕСТИТЬ ДанныеКОА
	|ИЗ
	|	КОА КАК КОА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSКонтрольнаяОперацияАгрегации.ДанныеАгрегацииДокумента КАК итWMSКонтрольнаяОперацияАгрегацииДанныеАгрегацииДокумента
	|		ПО КОА.Ссылка = итWMSКонтрольнаяОперацияАгрегацииДанныеАгрегацииДокумента.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКОА.Марка.ЗначениеШтрихКода КАК Марка,
	|	ДанныеКОА.GTIN КАК GTIN,
	|	ДанныеКОА.SSCC КАК SSCC,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ КАК СправкаБ
	|ПОМЕСТИТЬ ИтоговыеДанныеКОА
	|ИЗ
	|	ДанныеКОА КАК ДанныеКОА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
	|		ПО ДанныеКОА.СерияНоменклатуры = алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКОА.GTIN,
	|	ДанныеКОА.SSCC,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ,
	|	ДанныеКОА.Марка.ЗначениеШтрихКода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыеДанныеКОА.СправкаБ КАК СправкаБ,
	|	ИтоговыеДанныеКОА.Марка КАК Марка,
	|	ИтоговыеДанныеКОА.GTIN КАК GTIN
	|ИЗ
	|	ИтоговыеДанныеКОА КАК ИтоговыеДанныеКОА
	|ИТОГИ ПО
	|	СправкаБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыеДанныеКОА.SSCC КАК SSCC,
	|	ИтоговыеДанныеКОА.GTIN КАК GTIN
	|ИЗ
	|	ИтоговыеДанныеКОА КАК ИтоговыеДанныеКОА
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговыеДанныеКОА.SSCC,
	|	ИтоговыеДанныеКОА.GTIN
	|ИТОГИ ПО
	|	SSCC";

	Запрос.УстановитьПараметр("Ссылка", Реализация);

	МассивРезультатов = Запрос.ВыполнитьПакет();

	ВыборкаПоСправкеБ = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	МассивМарокПоСправкеБ=Новый Массив;
	МассивSSCC=Новый Массив;

	Пока ВыборкаПоСправкеБ.Следующий() Цикл
		СтруктураМассива=Новый Структура;
		
		//@skip-check query-in-loop
		СтруктураМассива.Вставить("СправкаБ", ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаПоСправкеБ.СправкаБ,
			УзелОбмена));
		ТаблицаМарок=Новый ТаблицаЗначений;
		ТаблицаМарок.Колонки.Добавить("Марка");
		ТаблицаМарок.Колонки.Добавить("GTIN");
		ВыборкаДетальныхЗаписейМарок=ВыборкаПоСправкеБ.Выбрать();
		Пока ВыборкаДетальныхЗаписейМарок.Следующий() Цикл
			НоваяСтрока=ТаблицаМарок.Добавить();
			НоваяСтрока.Марка=ВыборкаДетальныхЗаписейМарок.Марка;
			НоваяСтрока.GTIN=ВыборкаДетальныхЗаписейМарок.GTIN;
		КонецЦикла;
		СтруктураМассива.Вставить("ТаблицаМарок", ТаблицаМарок);
		МассивМарокПоСправкеБ.Добавить(СтруктураМассива);
	КонецЦикла;

	ВыборкаПоSSCC=МассивРезультатов[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоSSCC.Следующий() Цикл
		СтруктураМассива=Новый Структура;
		СтруктураМассива.Вставить("SSCC", ВыборкаПоSSCC.SSCC);
		ВыборкаКоробов=ВыборкаПоSSCC.Выбрать();
		МассивGTIN=Новый Массив;
		Пока ВыборкаКоробов.Следующий() Цикл
			МассивGTIN.Добавить(ВыборкаКоробов.GTIN);
		КонецЦикла;
		СтруктураМассива.Вставить("МассивGTIN", МассивGTIN);
		МассивSSCC.Добавить(СтруктураМассива);
	КонецЦикла;
	СтруктураОтвета.Вставить("МассивМарокПоСправкеБ", МассивМарокПоСправкеБ);
	СтруктураОтвета.Вставить("МассивSSCC", МассивSSCC);
	Возврат СтруктураОтвета;
КонецФункции
Функция ПолучитьДанныеМарокПоРеализацииПроверка(СтруктураДанных)
	УзелОбмена=ПолучитьУзелОбмена(СтруктураДанных.УзелОбмена);
	СтруктураОтвета=Новый Структура;
	Реализация=Документы.РеализацияТоваровУслуг.ПолучитьСсылку(СтруктураДанных.СсылкаВДругойИБ);
	ОбъектРеализации=Реализация.ПолучитьОбъект();
	Если ОбъектРеализации = Неопределено Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("Статус", 404);
		СтруктураОтвета.Вставить("ОписаниеОшибки", "реализация не найдена");
		Возврат СтруктураОтвета;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	|	РеализацияТоваровУслуг.Основание КАК Наборка
	|ПОМЕСТИТЬ ВтРеализацияНаборка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтРеализацияНаборка.Реализация КАК Реализация,
	|	ВтРеализацияНаборка.Наборка КАК Наборка,
	|	итWMSПроверкаитОснования.Ссылка КАК Проверка
	|ПОМЕСТИТЬ ВтПроверка
	|ИЗ
	|	ВтРеализацияНаборка КАК ВтРеализацияНаборка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПроверка.итОснования КАК итWMSПроверкаитОснования
	|		ПО ВтРеализацияНаборка.Наборка = итWMSПроверкаитОснования.Документ
	|			И (итWMSПроверкаитОснования.Ссылка.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMS_МаркиВОбработке.Марка КАК Марка
	|ПОМЕСТИТЬ ВтМаркиПроверка
	|ИЗ
	|	ВтПроверка КАК ВтПроверка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMS_МаркиВОбработке КАК итWMS_МаркиВОбработке
	|		ПО ВтПроверка.Проверка = итWMS_МаркиВОбработке.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарокСрезПоследних.Упаковка КАК Упаковка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ КАК СправкаБ,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Марка.ЗначениеШтрихКода КАК Марка
	|ПОМЕСТИТЬ ВтМаркиУпаковки
	|ИЗ
	|	ВтМаркиПроверка КАК ВтМаркиПроверка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
	|		ПО ВтМаркиПроверка.Марка = алкХранилищеАкцизныхМарокСрезПоследних.Марка
	|			И (НЕ алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтМаркиУпаковки.Упаковка КАК GTIN,
	|	ВтМаркиУпаковки.СправкаБ КАК СправкаБ,
	|	ВтМаркиУпаковки.Марка КАК Марка,
	|	ЕСТЬNULL(алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки, """") КАК SSCC
	|ПОМЕСТИТЬ ВтИтог
	|ИЗ
	|	ВтМаркиУпаковки КАК ВтМаркиУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеУпаковок.СрезПоследних КАК алкХранилищеУпаковокСрезПоследних
	|		ПО ВтМаркиУпаковки.Упаковка = алкХранилищеУпаковокСрезПоследних.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтог.СправкаБ КАК СправкаБ,
	|	ВтИтог.Марка КАК Марка,
	|	ВтИтог.GTIN КАК GTIN
	|ИЗ
	|	ВтИтог КАК ВтИтог
	|ИТОГИ ПО
	|	СправкаБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтог.SSCC КАК SSCC,
	|	ВтИтог.GTIN КАК GTIN
	|ИЗ
	|	ВтИтог КАК ВтИтог
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИтог.SSCC,
	|	ВтИтог.GTIN
	|ИТОГИ ПО
	|	SSCC";

	Запрос.УстановитьПараметр("Ссылка", Реализация);

	МассивРезультатов = Запрос.ВыполнитьПакет();

	ВыборкаПоСправкеБ = МассивРезультатов[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	МассивМарокПоСправкеБ=Новый Массив;
	МассивSSCC=Новый Массив;

	Пока ВыборкаПоСправкеБ.Следующий() Цикл
		СтруктураМассива=Новый Структура;
		
		//@skip-check query-in-loop
		СтруктураМассива.Вставить("СправкаБ", ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаПоСправкеБ.СправкаБ,
			УзелОбмена));
		ТаблицаМарок=Новый ТаблицаЗначений;
		ТаблицаМарок.Колонки.Добавить("Марка");
		ТаблицаМарок.Колонки.Добавить("GTIN");
		ВыборкаДетальныхЗаписейМарок=ВыборкаПоСправкеБ.Выбрать();
		Пока ВыборкаДетальныхЗаписейМарок.Следующий() Цикл
			НоваяСтрока=ТаблицаМарок.Добавить();
			НоваяСтрока.Марка=ВыборкаДетальныхЗаписейМарок.Марка;
			НоваяСтрока.GTIN=ВыборкаДетальныхЗаписейМарок.GTIN;
		КонецЦикла;
		СтруктураМассива.Вставить("ТаблицаМарок", ТаблицаМарок);
		МассивМарокПоСправкеБ.Добавить(СтруктураМассива);
	КонецЦикла;

	ВыборкаПоSSCC=МассивРезультатов[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоSSCC.Следующий() Цикл
		СтруктураМассива=Новый Структура;
		СтруктураМассива.Вставить("SSCC", ВыборкаПоSSCC.SSCC);
		ВыборкаКоробов=ВыборкаПоSSCC.Выбрать();
		МассивGTIN=Новый Массив;
		Пока ВыборкаКоробов.Следующий() Цикл
			МассивGTIN.Добавить(ВыборкаКоробов.GTIN);
		КонецЦикла;
		СтруктураМассива.Вставить("МассивGTIN", МассивGTIN);
		МассивSSCC.Добавить(СтруктураМассива);
	КонецЦикла;
	СтруктураОтвета.Вставить("МассивМарокПоСправкеБ", МассивМарокПоСправкеБ);
	СтруктураОтвета.Вставить("МассивSSCC", МассивSSCC);
	Возврат СтруктураОтвета;
КонецФункции
Функция ПолучениеДанныхСвободнойАгрегации(СтруктураДанных)
	УзелОбмена=ПолучитьУзелОбмена(СтруктураДанных.УзелОбмена);
	СтруктураОтвета=Новый Структура;
	СОА=Документы.итWMSДокументСвободнойАгрегации.ПолучитьСсылку(СтруктураДанных.СсылкаВДругойИБ);
	ОбъектСОА=СОА.ПолучитьОбъект();
	Если ОбъектСОА = Неопределено Тогда
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("Статус", 404);
		СтруктураОтвета.Вставить("ОписаниеОшибки", "СОА не найдена");
		Возврат СтруктураОтвета;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMS_АгрегацияМарок.Марка КАК Марка,
	|	итWMS_АгрегацияМарок.SSCC КАК SSCC,
	|	итWMS_АгрегацияМарок.GTIN КАК GTIN
	|ПОМЕСТИТЬ ВтМаркиСОА
	|ИЗ
	|	РегистрСведений.итWMS_АгрегацияМарок КАК итWMS_АгрегацияМарок
	|ГДЕ
	|	итWMS_АгрегацияМарок.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтМаркиСОА.Марка.ЗначениеШтрихКода КАК Марка,
	|	ВтМаркиСОА.SSCC КАК SSCC,
	|	ВтМаркиСОА.GTIN КАК GTIN,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ КАК СправкаБ
	|ПОМЕСТИТЬ ВтИтог
	|ИЗ
	|	ВтМаркиСОА КАК ВтМаркиСОА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
	|		ПО ВтМаркиСОА.Марка = алкХранилищеАкцизныхМарокСрезПоследних.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтог.СправкаБ КАК СправкаБ,
	|	ВтИтог.Марка КАК Марка,
	|	ВтИтог.GTIN КАК GTIN
	|ИЗ
	|	ВтИтог КАК ВтИтог
	|ИТОГИ ПО
	|	СправкаБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтог.SSCC КАК SSCC,
	|	ВтИтог.GTIN КАК GTIN
	|ИЗ
	|	ВтИтог КАК ВтИтог
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИтог.SSCC,
	|	ВтИтог.GTIN
	|ИТОГИ ПО
	|	SSCC";

	Запрос.УстановитьПараметр("ДокументОснование", СОА);

	МассивРезультатов = Запрос.ВыполнитьПакет();

	ВыборкаПоСправкеБ = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	МассивМарокПоСправкеБ=Новый Массив;
	МассивSSCC=Новый Массив;

	Пока ВыборкаПоСправкеБ.Следующий() Цикл
		СтруктураМассива=Новый Структура;
		
		//@skip-check query-in-loop
		СтруктураМассива.Вставить("СправкаБ", ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаПоСправкеБ.СправкаБ,
			УзелОбмена));
		ТаблицаМарок=Новый ТаблицаЗначений;
		ТаблицаМарок.Колонки.Добавить("Марка");
		ТаблицаМарок.Колонки.Добавить("GTIN");
		ВыборкаДетальныхЗаписейМарок=ВыборкаПоСправкеБ.Выбрать();
		Пока ВыборкаДетальныхЗаписейМарок.Следующий() Цикл
			НоваяСтрока=ТаблицаМарок.Добавить();
			НоваяСтрока.Марка=ВыборкаДетальныхЗаписейМарок.Марка;
			НоваяСтрока.GTIN=ВыборкаДетальныхЗаписейМарок.GTIN;
		КонецЦикла;
		СтруктураМассива.Вставить("ТаблицаМарок", ТаблицаМарок);
		МассивМарокПоСправкеБ.Добавить(СтруктураМассива);
	КонецЦикла;

	ВыборкаПоSSCC=МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоSSCC.Следующий() Цикл
		СтруктураМассива=Новый Структура;
		СтруктураМассива.Вставить("SSCC", ВыборкаПоSSCC.SSCC);
		ВыборкаКоробов=ВыборкаПоSSCC.Выбрать();
		МассивGTIN=Новый Массив;
		Пока ВыборкаКоробов.Следующий() Цикл
			МассивGTIN.Добавить(ВыборкаКоробов.GTIN);
		КонецЦикла;
		СтруктураМассива.Вставить("МассивGTIN", МассивGTIN);
		МассивSSCC.Добавить(СтруктураМассива);
	КонецЦикла;
	СтруктураОтвета.Вставить("МассивМарокПоСправкеБ", МассивМарокПоСправкеБ);
	СтруктураОтвета.Вставить("МассивSSCC", МассивSSCC);
	Возврат СтруктураОтвета;
КонецФункции
#КонецОбласти

#Область СлужебныеФункцииИпроцедуры

Функция ПолучитьУзелОбмена(СсылкаВДругойИБ)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеОбъектовДляОбмена.УзелОбмена КАК УзелОбмена
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	|ГДЕ
	|	СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ = ПОДСТРОКА(&СсылкаВДругойИБ, 1, 100)
	|	И СоответствиеОбъектовДляОбмена.СобственнаяСсылка = НЕОПРЕДЕЛЕНО";

	Запрос.УстановитьПараметр("СсылкаВДругойИБ", Строка(СсылкаВДругойИБ));

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.УзелОбмена;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция ПоискЭлементаСоответствияОбмена(СсылкаВДругойИБ, УзелОбмена = Неопределено)
	ТаблицаДляБлокировки=Новый ТаблицаЗначений;
	ТаблицаДляБлокировки.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаДляБлокировки.Колонки.Добавить("УзелОбмена");
	НоваяСтрока=ТаблицаДляБлокировки.Добавить();
	НоваяСтрока.СсылкаВДругойИБ=Строка(СсылкаВДругойИБ);
	НоваяСтрока.УзелОбмена=УзелОбмена;

	БлокировкаДанных=Новый БлокировкаДанных;
	ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.СоответствиеОбъектовДляОбмена");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных=ТаблицаДляБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СсылкаВДругойИБ", "СсылкаВДругойИБ");
	Если УзелОбмена <> Неопределено Тогда
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("УзелОбмена", "УзелОбмена");
	КонецЕсли;
	БлокировкаДанных.Заблокировать();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеОбъектовДляОбмена.СобственнаяСсылка КАК СобственнаяСсылка
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &УзелОбмена = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоответствиеОбъектовДляОбмена.УзелОбмена = &УзелОбмена
	|		КОНЕЦ
	|	И СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ = ПОДСТРОКА(&СсылкаВДругойИБ, 1, 100)";

	Запрос.УстановитьПараметр("СсылкаВДругойИБ", Строка(СсылкаВДругойИБ));
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СобственнаяСсылка;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Пустой идентификатор.
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - Пустой идентификатор
Функция ПустойИдентификатор()
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
КонецФункции

Функция ПолучитьСписокПлановОбмена() Экспорт
	СоответсвиеДанных=Новый Соответствие;
	Для Каждого ЭлементПлана Из Метаданные.ПланыОбмена Цикл
		Выборка=ПланыОбмена[ЭлементПлана.имя].Выбрать();
		МассивВыборки=Новый Массив;
		Пока Выборка.Следующий() Цикл
			СтруктураДанных=Новый Структура;
			СтруктураДанных.Вставить("Имя", Выборка.Наименование);
			СтруктураДанных.Вставить("Ссылка", Выборка.Ссылка.УникальныйИдентификатор());
			СтруктураДанных.Вставить("Тип", Выборка.Ссылка.Метаданные().ПолноеИмя());
			МассивВыборки.Добавить(СтруктураДанных);
		КонецЦикла;
		СоответсвиеДанных.Вставить(ЭлементПлана.Имя, МассивВыборки);
	КонецЦикла;
	Возврат СоответсвиеДанных;
КонецФункции

Функция ЗаписатьДанныеСоотвПлановОбмена(СтруктураДанных) Экспорт
	СсылкаНаПланОбмена=ПланыОбмена[СтруктураДанных.Имя].ПолучитьСсылку(СтруктураДанных.Ссылка);
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	НаборЗаписей=РегистрыСведений.СоответствиеОбъектовДляОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УзелОбмена.Установить(СсылкаНаПланОбмена);
	НаборЗаписей.Отбор.СобственнаяСсылка.Установить(Неопределено);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	НоваяЗапись=НаборЗаписей.Добавить();
	НоваяЗапись.УзелОбмена=СсылкаНаПланОбмена;
	НоваяЗапись.СсылкаВДругойИБ=СтруктураДанных.СсылкаИсточник;
	НоваяЗапись.ИмяТипаПриемника=СтруктураДанных.ИмяТипаПриемника;
	НаборЗаписей.Записать();
	ЗафиксироватьТранзакцию();
	СтруктураОтвета=Новый Структура("ДанныеЗаписаны", Истина);
	Возврат СтруктураОтвета;
КонецФункции

Функция ПоискЭлементаСоответствияОбменаДругойИБ(СобственнаяСсылка, УзелОбмена)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ КАК СсылкаВДругойИБ
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	|ГДЕ
	|	СоответствиеОбъектовДляОбмена.УзелОбмена = &УзелОбмена
	|	И СоответствиеОбъектовДляОбмена.СобственнаяСсылка = &СобственнаяСсылка";

	Запрос.УстановитьПараметр("СобственнаяСсылка", СобственнаяСсылка);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Новый УникальныйИдентификатор(ВыборкаДетальныеЗаписи.СсылкаВДругойИБ);
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Поиск элемента соответствия обмена другой ИБСТипом приемника.
// 
// Параметры:
//  СобственнаяСсылка - Произвольный - Собственная ссылка
//  УзелОбмена - ПланОбменаСсылка.ОбменКА11 - Узел обмена
// 
// Возвращаемое значение:
//  Неопределено, Структура - Поиск элемента соответствия обмена другой ИБСТипом приемника:
// * ИмяТипаПриемника - Строка -
// * СсылкаВДругойИБ - УникальныйИдентификатор -
Функция ПоискЭлементаСоответствияОбменаДругойИБСТипомПриемника(СобственнаяСсылка, УзелОбмена)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ КАК СсылкаВДругойИБ,
	|	СоответствиеОбъектовДляОбмена.ИмяТипаПриемника КАК ИмяТипаПриемника
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	|ГДЕ
	|	СоответствиеОбъектовДляОбмена.УзелОбмена = &УзелОбмена
	|	И СоответствиеОбъектовДляОбмена.СобственнаяСсылка = &СобственнаяСсылка";

	Запрос.УстановитьПараметр("СобственнаяСсылка", СобственнаяСсылка);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураВозврата=Новый Структура;
		СтруктураВозврата.Вставить("ИмяТипаПриемника", ВыборкаДетальныеЗаписи.ИмяТипаПриемника);
		СтруктураВозврата.Вставить("СсылкаВДругойИБ",
			Новый УникальныйИдентификатор(ВыборкаДетальныеЗаписи.СсылкаВДругойИБ));
		Возврат СтруктураВозврата;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция ПроверитьНаличиеДанныхСправокАиБИСерий(СтрокаДанных)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СправкаА,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
	|ИЗ
	|	РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
	|ГДЕ
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры = &СерияНоменклатуры
	|	И алкСоответствияСправокАиБЕГАИСИСерий.СправкаА = &СправкаА
	|	И алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ = &СправкаБ";

	Запрос.УстановитьПараметр("СерияНоменклатуры", СтрокаДанных.СерияНоменклатуры);
	Запрос.УстановитьПараметр("СправкаА", СтрокаДанных.СправкаА);
	Запрос.УстановитьПараметр("СправкаБ", СтрокаДанных.СправкаБ);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	Возврат Ложь;
КонецФункции
Функция НайтиПользователяПоФизЛицу(ФизЛицо)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И Пользователи.ФизическоеЛицо = &ФизическоеЛицо";

	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицо);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции
#КонецОбласти

#Область ФормированиеПараметровПодключенияWeb
Функция СформироватьСтрокуПодключения(Узел)
	Параметры=СформироватьПараметрыПодключения(Узел);
	IPАдресСервера=Параметры.IPАдресСервера;
	ИмяПубликацииБазы=Параметры.ИмяПубликацииБазы;
	URLПространствоВебСервиса=Параметры.URLПространствоВебСервиса;
	СтрокаWSОпределения = "http://" + СокрЛП(IPАдресСервера) + "/" + СокрЛП(ИмяПубликацииБазы) + "/ws/" + СокрЛП(
		URLПространствоВебСервиса) + ".1cws?wsdl";
	Возврат СтрокаWSОпределения;
КонецФункции
Функция СформироватьПараметрыПодключения(Узел)
	IPАдресСервера=СокрЛП(Узел.IPАдресСервера);
	ИмяПубликацииБазы=СокрЛП(Узел.ИмяПубликацииБазы);
	URLПространствоВебСервиса=СокрЛП(Узел.URLПространствоВебСервиса);
	Структура=Новый Структура("IPАдресСервера,ИмяПубликацииБазы,URLПространствоВебСервиса", IPАдресСервера,
		ИмяПубликацииБазы, URLПространствоВебСервиса);
	Возврат Структура
КонецФункции
Функция СформироватьПараметрыПроксиСервера(Узел)
	URLПространствоВебСервиса=Узел.URLПространствоВебСервиса;
	Структура=Новый Структура;
	Структура.Вставить("URLПространствоИменСервиса", СокрЛП(URLПространствоВебСервиса));
	Структура.Вставить("ИмяСервиса", СокрЛП(URLПространствоВебСервиса));
	Структура.Вставить("ИмяТочкиПодключения", СокрЛП(URLПространствоВебСервиса) + "Soap");

	Возврат Структура
КонецФункции
#КонецОбласти