#Область РаботыСХранилищем

Процедура СохрнаитьНастройкиВХранилищеОбщихНастроек(КлючОбъекта,КлючНастроек,Настройки,ИмяПользователя) Экспорт 
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,КлючНастроек,Настройки,,ИмяПользователя);
КонецПроцедуры

Функция  ЗагрузитьНастройкиИзХранилищаОбщихНастроек(КлючОбъекта,КлючНастроек,ИмяПользователя) Экспорт 
	Возврат ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,КлючНастроек,,ИмяПользователя);
КонецФункции

#КонецОбласти

#Область ПриНачалеРаботыСистемы
Функция ЭтоПервыйЗапуск() Экспорт 
	Если  не Константы.ПервоначальноеЗаполнениеПроизведено.Получить() Тогда 
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура УстановитьПризнакПервоначальногоЗаполнения()  Экспорт 
	Константы.ПервоначальноеЗаполнениеПроизведено.Установить(Истина);
КонецПроцедуры

Процедура УстановитьСтратегииWMS() Экспорт
	ОчиститьСтратегии();
	УстановитьСтратегииРазмещения();
	УстановитьСтратегииПеремещения();
	УстановитьСтратегииНаборки();
КонецПроцедуры

Процедура ОчиститьСтратегии()
	Выборка=Справочники.итWMSСтратегии.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.Ссылка.Предопределенный Тогда 
			Продолжить;
		КонецЕсли;
		ОбъектУдаления=Выборка.Ссылка.ПолучитьОбъект();
		ОбъектУдаления.Удалить();
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьСтратегииНаборки()
    Родитель=Справочники.итWMSСтратегии.Наборка;
	////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ЗаполнитьТоварСогласноРозничнымПравилам(МенеджерВременныхТаблиц,ТекСтрокаТовары,ДанныеЗаполнения,НастройкиWMS)";
	НовыйЭлементСтратегий.Наименование="Алгоритм поиска товара в рознице";
	НовыйЭлементСтратегий.Описание="Алгоритм ищет товар только в розничных ячейках";
	НовыйЭлементСтратегий.Записать();
    ////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ОбработчикЗаполненияПоЗонам(МенеджерВременныхТаблиц,ТекСтрокаТовары,ДанныеЗаполнения)";
	НовыйЭлементСтратегий.Наименование="Алгоритм поиска товара по зонам(Пикинг,хранение)";
	НовыйЭлементСтратегий.Описание="Алгоритм ищет товар пользуясь информацией по стоку товаров,если количество товара, который необходимо отобрать меньше паллеты, или количество текущего товара в пикинге
	|больше нормы стока, тока поиск товара идет с ячеек пикинга , в противном случае с ячеек хранения";
	НовыйЭлементСтратегий.Записать();
    ////////////////////////////////////////////////////
    НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ОбработчикЗаполненияПоЗонамСУчетомПриорететаСП(МенеджерВременныхТаблиц,ТекСтрокаТовары,ДанныеЗаполнения,НастройкиWMS)";
	НовыйЭлементСтратегий.Наименование="Алгоритм поиска товара по зонам(Пикинг,хранение) с учетом приоретета складских помещений";
	НовыйЭлементСтратегий.Описание="Алгоритм ищет товар пользуясь информацией по стоку товаров,если количество товара, который необходимо отобрать меньше паллеты, или количество текущего товара в пикинге
	|больше нормы стока, тока поиск товара идет с ячеек пикинга , в противном случае с ячеек хранения, алгоритм применяется для каждого скласдкого помещения из настроек приоретета  по очереди.";
	НовыйЭлементСтратегий.Записать();
	////////////////////////////////////////////////////
    НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ОбработчикЗаполненияПоПриоритету(ТекСтрокаТовары,МенеджерВременныхТаблиц,ДанныеЗаполнения)";
	НовыйЭлементСтратегий.Наименование="Алгоритм поиска товара по зонам(Пикинг,хранение)";
	НовыйЭлементСтратегий.Описание="Алгоритм ищет товар по приоритету в начале в зоне хранения, а потом в зоне пикинга";
	НовыйЭлементСтратегий.Записать();
    ////////////////////////////////////////////////////
    НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ОбработчикЗаполненияПоПриорететамСПИЗонам(МенеджерВременныхТаблиц,ТекСтрокаТовары,ДанныеЗаполнения,НастройкиWMS)";
	НовыйЭлементСтратегий.Наименование="Алгоритм поиска товара по зонам(Пикинг,хранение) и складским помещениям";
	НовыйЭлементСтратегий.Описание="Алгоритм ищет товар по каждому складскому помещению отдельно , если количество товара необходимого к отбору меньше паллеты или количество стока больше нормы, то товар отбирается из 
	| зона пикинга , в противном случае из зоны хранения, если в зоне хранения товара не хватает, то товар ищется в зоне пикинга.";
	НовыйЭлементСтратегий.Записать();
    ////////////////////////////////////////////////////
    НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ОбработчикЗаполненияПоПриорететамСПИЗонамБезИзлишковИПаллеты(МенеджерВременныхТаблиц,ТекСтрокаТовары,ДанныеЗаполнения,НастройкиWMS)";
	НовыйЭлементСтратегий.Наименование="Алгоритм поиска товара по зонам(Пикинг,хранение), складским помещениям и условием паллеты";
	НовыйЭлементСтратегий.Описание="Алгоритм ищет товар по каждому складскому помещению отдельно , если количество товара необходимого к отбору меньше  паллеты или необдима 1 паллета товара , то товар отбирается из 
	| зона пикинга , в противном случае из зоны хранения, если в зоне хранения товара не хватает, то товар ищется в зоне пикинга.";
	НовыйЭлементСтратегий.Записать();
	////////////////////////////////////////////////////
    НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ОбработчикЗаполненияСквознойПоСПиЗонам(МенеджерВременныхТаблиц,ТекСтрокаТовары,ДанныеЗаполнения,НастройкиСтратегии)";
	НовыйЭлементСтратегий.Наименование="Алгоритм поиска товара по зонам(Пикинг,хранение), складским помещениям в несколько обходов";
	НовыйЭлементСтратегий.Описание="Алгоритм ищет товар в начале по 1 зоне за 1 обход во всех складских помещениях , если количество товара необходимого к отбору меньше  паллеты  , то товар отбирается из 
	| зона пикинга , в противном случае из зоны хранения, если в зоне хранения товара не хватает, то товар ищется в зоне пикинга.";
	НовыйЭлементСтратегий.Записать();



   
	КонецПроцедуры

Процедура УстановитьСтратегииПеремещения()
	
    Родитель=Справочники.итWMSСтратегии.Перемещение;
	////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ПоискЯчеекРазмещенияВРядИлиЛинию()";
	НовыйЭлементСтратегий.Наименование="Алгоритм размещения в 1 линию или ряд";
	НовыйЭлементСтратегий.Описание="Текущая стратегия старается подобрать ячейки для товара так, что бы разместить максимально компактно в 1 линию
	|, если нет подходящей линии, то алгоритм рассматривает 2 соседние линии в 1 пролете (ряде)";
	НовыйЭлементСтратегий.Записать();
	///////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ПоискЯчеекРазмещенияБлижайшаяКЗонеПриемки()";
	НовыйЭлементСтратегий.Наименование="Алгоритм размещения в ближайшую ячейку относительно текущей ячейки";
	НовыйЭлементСтратегий.Описание="Текущая стратегия старается разместить товар в ближайшую свободную ячейку относительно текущей ячейки паллеты.
	|Перемещение осуществляется игнорируя понятие <<Зоны склада>>(т.е пикинг или хранение роли не играет)";
	НовыйЭлементСтратегий.Записать();
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ПоискЯчеекРазмещенияБлижайшаяКЗонеПриемкиТолькоЯчейкиХранения()";
	НовыйЭлементСтратегий.Наименование="Алгоритм размещения в ближайшую ячейку ХРАНЕНИЯ относительно текущей ячейки";
	НовыйЭлементСтратегий.Описание="Текущая стратегия старается разместить товар в ближайшую свободную ячейку относительно текущей ячейки паллеты. 
	|Перемещение осуществляется только в ячейки зоны хранения, остальные ячейки игнорируются";
	НовыйЭлементСтратегий.Записать();
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="РазмещениеТовараСОграничиниемПоЛиниям()";
	НовыйЭлементСтратегий.Наименование="Алгоритм перемещения с указанием определенных линий";
	НовыйЭлементСтратегий.Описание="Текущая стратегия старается переместить товар в диапазон указанных линий, в пределах складского помещения указанного в документе,
	|приоритетом для данной стратегии являются ячейки хранения, если не указано обратное в параметре <<Приоритет пикинга>>";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Линия С";
	ЭлементТЗ.ТипЗначения="Число";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Линия По";
	ЭлементТЗ.ТипЗначения="Число";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Приоритет пикинга";
	ЭлементТЗ.ТипЗначения="Булево";
	НовыйЭлементСтратегий.Записать();
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="РаместитьТоварПоУчасткамПриоритетПикинга()";
	НовыйЭлементСтратегий.Наименование="Алгоритм перемещения товара по ассортиментным участкам в зоны пикинга";
	НовыйЭлементСтратегий.Описание="Текущая стратегия пытается перемещает товар в ячейки пикинга указанного ассортиментного участка в параметре <<Ассортиментный участок>>
	|,если ассортиментный участок не указан, то размещение происходит в ячейки ассортиметного участка закрепленного за номенклатурой по умолчанию, так же в данной стратегии
	| есть параметр <<Вид складской деятельности>>, которым так же можно ограничить список ячеект текущео ассортиментного участка, если вид складской деятельности не указан, берется вид складской деятельности из настроек по умолчанию";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Ассортиментный участок";
	ЭлементТЗ.ТипЗначения="СправочникСсылка.ит_WMS_АссортиментныеУчасткиСклада";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Вид складской деятельности";
	ЭлементТЗ.ТипЗначения="ПеречислениеСсылка.ит_WMS_ВидыСкладскойДеятельности";
	НовыйЭлементСтратегий.Записать();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="РаместитьТоварПоУчасткамПриоритетХранения()";
	НовыйЭлементСтратегий.Наименование="Алгоритм перемещения товара по ассортиментным участкам в зоны хранения";
	НовыйЭлементСтратегий.Описание="Текущая стратегия пытается переместить товар в ячейки хранения указанного ассортиментного участка в параметре <<Ассортиментный участок>>
	|,если ассортиментный участок не указан, то размещение происходит в ячейки ассортиметного участка закрепленного за номенклатурой по умолчанию, так же в данной стратегии
	| есть параметр <<Вид складской деятельности>>, которым так же можно ограничить список ячеект текущео ассортиментного участка, если вид складской деятельности не указан, берется вид складской деятельности из настроек по умолчанию";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Ассортиментный участок";
	ЭлементТЗ.ТипЗначения="СправочникСсылка.ит_WMS_АссортиментныеУчасткиСклада";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Вид складской деятельности";
	ЭлементТЗ.ТипЗначения="ПеречислениеСсылка.ит_WMS_ВидыСкладскойДеятельности";
	НовыйЭлементСтратегий.Записать();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	НоваяГруппа=Справочники.итWMSСтратегии.СоздатьГруппу();
	НоваяГруппа.Наименование="Стратегии поиска ячейки пикинга";
	НоваяГруппа.Родитель=Родитель;
	НоваяГруппа.Записать();
	Родитель=НоваяГруппа.Ссылка;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
    НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="НайтиЯчейкуПикингаВРазрезеТерриторииСклада(НастройкиWMS)";
	НовыйЭлементСтратегий.Наименование="Алгоритм поиска ближайшей свободной ячейки пикинга в разрезе территории склада";
	НовыйЭлементСтратегий.Описание="Текущая стратегии осуществляет поиск ближайшей ячейки пикинга относительно текущей ячейки паллета, по все территори склада";
	НовыйЭлементСтратегий.Записать();
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="НайтиЯчейкуПикингаТиповая(НастройкиWMS)";
	НовыйЭлементСтратегий.Наименование="Алгоритм поиска ближайшей свободной ячейки пикинга в разрезе складского помещения";
	НовыйЭлементСтратегий.Описание="Текущая стратегии осуществляет поиск ближайшей ячейки пикинга относительно текущей ячейки паллета в разрезе указанного складского помещения, 
	|или складского помещения назначенного по умолчанию для номенклатуры";
	НовыйЭлементСтратегий.Записать();
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="НайтиЯчейкуПикингаВРазрезеАссортиметногоУчастка(НастройкиWMS)";
	НовыйЭлементСтратегий.Наименование="Алгоритм поиска ближайшей свободной ячейки пикинга в разрезе ассортиментного участка";
	НовыйЭлементСтратегий.Описание="Текущая стратегии осуществляет поиск ближайшей ячейки пикинга относительно текущей ячейки паллета в разрезе  ассортиментного участка,
	|назначенного для номенклатуры , через механизм соотв. номенклатуры и ассортиментного участка";
	НовыйЭлементСтратегий.Записать();




	
	КонецПроцедуры

Процедура УстановитьСтратегииРазмещения()
	Родитель=Справочники.итWMSСтратегии.Размещение;
	////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ПоискЯчеекРазмещенияВРядИлиЛинию()";
	НовыйЭлементСтратегий.Наименование="Алгоритм размещения в 1 линию или ряд";
	НовыйЭлементСтратегий.Описание="Текущая стратегия старается подобрать ячейки для товара так, что бы разместить максимально компактно в 1 линию
	|, если нет подходящей линии, то алгоритм рассматривает 2 соседние линии в 1 пролете (ряде)";
	НовыйЭлементСтратегий.Записать();
	///////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ПоискЯчеекРазмещенияБлижайшаяКЗонеПриемки()";
	НовыйЭлементСтратегий.Наименование="Алгоритм размещения в ближайшие ячейки к зоне приёмки";
	НовыйЭлементСтратегий.Описание="Текущая стратегия старается разместить товар в ближайшие свободные ячейки к зоне приемки, для этого у чейки приемки  
	|должен быть заполнен параметр <<ЯчейкаНачалаРазмещения>>. Размещение осуществляется игнорируя понятие <<Зоны склада>>(т.е пикинг или хранение роли не играет)";
	НовыйЭлементСтратегий.Записать();
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="ПоискЯчеекРазмещенияБлижайшаяКЗонеПриемкиТолькоЯчейкиХранения()";
	НовыйЭлементСтратегий.Наименование="Алгоритм размещения в ближайшие ячейки ХРАНЕНИЯ к зоне приёмки";
	НовыйЭлементСтратегий.Описание="Текущая стратегия старается разместить товар в ближайшие свободные ячейки к зоне приемки, для этого у чейки приемки  
	|должен быть заполнен параметр <<ЯчейкаНачалаРазмещения>>. Размещение осуществляется только в ячейки зоны хранения, остальные ячейки игнорируются";
	НовыйЭлементСтратегий.Записать();
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="РазмещениеТовараСОграничиниемПоЛиниям()";
	НовыйЭлементСтратегий.Наименование="Алгоритм размещения с указанием определенных линий";
	НовыйЭлементСтратегий.Описание="Текущая стратегия старается разместить товар в диапазон указанных линий, в пределах складского помещения указанного в документе,
	|приоритетом для данной стратегии являются ячейки хранения, если не указано обратное в параметре <<Приоритет пикинга>>";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Линия С";
	ЭлементТЗ.ТипЗначения="Число";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Линия По";
	ЭлементТЗ.ТипЗначения="Число";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Приоритет пикинга";
	ЭлементТЗ.ТипЗначения="Булево";
	НовыйЭлементСтратегий.Записать();
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="РаместитьТоварПоУчасткамПриоритетПикинга()";
	НовыйЭлементСтратегий.Наименование="Алгоритм размещения товара по ассортиментным участкам в зоны пикинга";
	НовыйЭлементСтратегий.Описание="Текущая стратегия пытается разместить товар в ячейки пикинга указанного ассортиментного участка в параметре <<Ассортиментный участок>>
	|,если ассортиментный участок не указан, то размещение происходит в ячейки ассортиметного участка закрепленного за номенклатурой по умолчанию, так же в данной стратегии
	| есть параметр <<Вид складской деятельности>>, которым так же можно ограничить список ячеект текущео ассортиментного участка, если вид складской деятельности не указан, берется вид складской деятельности из настроек по умолчанию";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Ассортиментный участок";
	ЭлементТЗ.ТипЗначения="СправочникСсылка.ит_WMS_АссортиментныеУчасткиСклада";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Вид складской деятельности";
	ЭлементТЗ.ТипЗначения="ПеречислениеСсылка.ит_WMS_ВидыСкладскойДеятельности";
	НовыйЭлементСтратегий.Записать();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	НовыйЭлементСтратегий=Справочники.итWMSСтратегии.СоздатьЭлемент();
	НовыйЭлементСтратегий.Родитель=Родитель;
	НовыйЭлементСтратегий.ИмяМетода="РаместитьТоварПоУчасткамПриоритетХранения()";
	НовыйЭлементСтратегий.Наименование="Алгоритм размещения товара по ассортиментным участкам в зоны хранения";
	НовыйЭлементСтратегий.Описание="Текущая стратегия пытается разместить товар в ячейки хранения указанного ассортиментного участка в параметре <<Ассортиментный участок>>
	|,если ассортиментный участок не указан, то размещение происходит в ячейки ассортиметного участка закрепленного за номенклатурой по умолчанию, так же в данной стратегии
	| есть параметр <<Вид складской деятельности>>, которым так же можно ограничить список ячеект текущео ассортиментного участка, если вид складской деятельности не указан, берется вид складской деятельности из настроек по умолчанию";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Ассортиментный участок";
	ЭлементТЗ.ТипЗначения="СправочникСсылка.ит_WMS_АссортиментныеУчасткиСклада";
	ЭлементТЗ=НовыйЭлементСтратегий.ОпределениеПараметровСтрагеии.Добавить();
	ЭлементТЗ.Параметр="Вид складской деятельности";
	ЭлементТЗ.ТипЗначения="ПеречислениеСсылка.ит_WMS_ВидыСкладскойДеятельности";
	НовыйЭлементСтратегий.Записать();
	
	
	
	
КонецПроцедуры

#КонецОбласти

Функция НайтиПользователяВБазе(УникальныйИдентификатор) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ПользовательИБ = &ПользовательИБ";
	
	Запрос.УстановитьПараметр("ПользовательИБ", УникальныйИдентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат  ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
        Возврат Неопределено;
	КонецФункции

Процедура ФормированиеЛогистическогоРеестраВФоне(Параметры) Экспорт 
	ТаблицаДанных=Параметры.ТаблицаДанных;
	ДатаНачала=Параметры.ДатаНачала;
	ДатаОкончания=Параметры.ДатаОкончания;
	
	РезультатЗапроса=ЗапросДанныхРеестра(,ДатаНачала,ДатаОкончания);
Выборка=РезультатЗапроса.Выбрать();
ТаблицаДанных.Очистить();
Пока Выборка.Следующий() Цикл 
	НоваяСтрока=ТаблицаДанных.Добавить();
	Если Выборка.Отгружен Тогда 
		НоваяСтрока.Статус="Отгружен";
	ИначеЕсли Выборка.Набран Тогда 
		НоваяСтрока.Статус="Набран";
	ИначеЕсли  Выборка.ВНаборе   Тогда 
		НоваяСтрока.Статус="Создана наборка";		
	ИначеЕсли  Выборка.ОбработанЛогистом   Тогда 
		НоваяСтрока.Статус="ОбработанЛогистом";
	иначе
		НоваяСтрока.Статус="Не обработано";
	КонецЕсли;
        НоваяСтрока.Контрагент= Выборка.Контрагент;
          НоваяСтрока.Заказ= Выборка.Заказ;
НоваяСтрока.НомерВИсточнике= Выборка.НомерИсточника;
НоваяСтрока.АдресДоставки= Выборка.АдресДоставки;
НоваяСтрока.Транспорт= Выборка.Транспорт;
НоваяСтрока.Водитель= Выборка.Водитель;
НоваяСтрока.Комментарий= Выборка.Комментарий;
НоваяСтрока.ДатаОтгрукзи= Выборка.ДатаОтгрузки;
НоваяСтрока.НачалоПогрузки= Выборка.НачалоПогрузки;
НоваяСтрока.ЗавершениеПогрузки= Выборка.ЗавершениеПогрузки;
НоваяСтрока.ДатаПоставки= Выборка.ДатаПоставки;
НоваяСтрока.Транзит= Выборка.Транзит;
НоваяСтрока.Набран= Выборка.Набран;
НоваяСтрока.ВНаборе=Выборка.ВНаборе;
НоваяСтрока.Отгружен= Выборка.Отгружен;
НоваяСтрока.ДатаФактическойОтгрузки= Выборка.ДатаФактическойОтгрузки;
НоваяСтрока.Наборка= Выборка.Наборка;
НоваяСтрока.Наборщик= Выборка.Наборщик;
НоваяСтрока.Проверил= Выборка.Проверил;
НоваяСтрока.Отгрузка= Выборка.Отгрузка;
НоваяСтрока.Отгрузил= Выборка.Отгрузил;
НоваяСтрока.Свободник=Выборка.Свободник;
НоваяСтрока.Маршрут=Выборка.Маршрут;
НоваяСтрока.Реализация=Выборка.Реализация;
НоваяСтрока.Вес=Выборка.ВесБрутто;
НоваяСтрока.Организация=Выборка.Организация;
НоваяСтрока.ЗаказПроведен=Выборка.Заказ.Проведен;
НоваяСтрока.Проверка=Выборка.Проверка;
КонецЦикла;
ПоместитьВоВременноеХранилище(ТаблицаДанных,Параметры.АдресФоновыхДанных);
КонецПроцедуры
	
Функция ЗапросДанныхРеестра(ЗаказПокупателя=Неопределено,ДатаНачала,ДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ЗаказПокупателя.Комментарий КАК Комментарий,
		|	ЗаказПокупателя.Набран КАК Набран,
		|	ЗаказПокупателя.Отгружен КАК Отгружен,
		|	ЗаказПокупателя.НомерИсточника КАК НомерИсточника,
		|	ЗаказПокупателя.ОбработанЛогистом КАК ОбработанЛогистом,
		|	ЗаказПокупателя.ВНаборе КАК ВНаборе,
		|	ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя КАК итВремяНачалаПогрузкиКакВремя,
		|	ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя КАК итВремяЗавершенияПогрузкиКакВремя,
		|	ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ЗаказПокупателя.ДатаПоставки КАК ДатаПоставки,
		|	ЗаказПокупателя.ВесБрутто КАК ВесБрутто,
		|	ЗаказПокупателя.Транзит КАК Транзит,
		|	ПОДСТРОКА(ЗаказПокупателя.АдресДоставки, 1, 255) КАК АдресДоставки,
		|	ЗаказПокупателя.ДатаФактическойОтгрузки КАК ДатаФактическойОтгрузки
		|ПОМЕСТИТЬ ВтДанныеЗаказа
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ЗаказПокупателя.Выполнен
		|	И ЗаказПокупателя.Проведен
		|	И ВЫБОР
		|			КОГДА &Ссылка <> НЕОПРЕДЕЛЕНО
		|				ТОГДА ЗаказПокупателя.Ссылка = &Ссылка
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеЗаказа.Ссылка КАК Ссылка,
		|	ВтДанныеЗаказа.Контрагент КАК Контрагент,
		|	ВтДанныеЗаказа.Организация КАК Организация,
		|	ВтДанныеЗаказа.Комментарий КАК Комментарий,
		|	ВтДанныеЗаказа.Набран КАК Набран,
		|	ВтДанныеЗаказа.Отгружен КАК Отгружен,
		|	ВтДанныеЗаказа.НомерИсточника КАК НомерИсточника,
		|	ВтДанныеЗаказа.ОбработанЛогистом КАК ОбработанЛогистом,
		|	ВтДанныеЗаказа.ВНаборе КАК ВНаборе,
		|	ВтДанныеЗаказа.итВремяНачалаПогрузкиКакВремя КАК итВремяНачалаПогрузкиКакВремя,
		|	ВтДанныеЗаказа.итВремяЗавершенияПогрузкиКакВремя КАК итВремяЗавершенияПогрузкиКакВремя,
		|	ВтДанныеЗаказа.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВтДанныеЗаказа.ДатаПоставки КАК ДатаПоставки,
		|	ВтДанныеЗаказа.ВесБрутто КАК ВесБрутто,
		|	ВтДанныеЗаказа.Транзит КАК Транзит,
		|	итWMSНаборка.Ссылка КАК Наборка,
		|	итWMSНаборка.Проверил КАК Проверил,
		|	ПОДСТРОКА(итWMSНаборка.Комментарий, 1, 255) КАК Свободник,
		|	ВтДанныеЗаказа.АдресДоставки КАК АдресДоставки,
		|	ВтДанныеЗаказа.ДатаФактическойОтгрузки КАК ДатаФактическойОтгрузки
		|ПОМЕСТИТЬ ВтДанныеСНаборкой
		|ИЗ
		|	ВтДанныеЗаказа КАК ВтДанныеЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
		|		ПО ВтДанныеЗаказа.Ссылка = итWMSНаборка.итОснование
		|			И (итWMSНаборка.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеСНаборкой.Ссылка КАК Ссылка,
		|	ВтДанныеСНаборкой.Контрагент КАК Контрагент,
		|	ВтДанныеСНаборкой.Организация КАК Организация,
		|	ВтДанныеСНаборкой.Комментарий КАК Комментарий,
		|	ВтДанныеСНаборкой.Набран КАК Набран,
		|	ВтДанныеСНаборкой.Отгружен КАК Отгружен,
		|	ВтДанныеСНаборкой.НомерИсточника КАК НомерИсточника,
		|	ВтДанныеСНаборкой.ОбработанЛогистом КАК ОбработанЛогистом,
		|	ВтДанныеСНаборкой.ВНаборе КАК ВНаборе,
		|	ВтДанныеСНаборкой.итВремяНачалаПогрузкиКакВремя КАК итВремяНачалаПогрузкиКакВремя,
		|	ВтДанныеСНаборкой.итВремяЗавершенияПогрузкиКакВремя КАК итВремяЗавершенияПогрузкиКакВремя,
		|	ВтДанныеСНаборкой.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВтДанныеСНаборкой.ДатаПоставки КАК ДатаПоставки,
		|	ВтДанныеСНаборкой.ВесБрутто КАК ВесБрутто,
		|	ВтДанныеСНаборкой.Транзит КАК Транзит,
		|	ВтДанныеСНаборкой.Наборка КАК Наборка,
		|	ВтДанныеСНаборкой.Проверил КАК Проверил,
		|	итWMSПроверкаитОснования.Ссылка КАК Проверка,
		|	ВтДанныеСНаборкой.Свободник КАК Свободник,
		|	ВтДанныеСНаборкой.АдресДоставки КАК АдресДоставки,
		|	ВтДанныеСНаборкой.ДатаФактическойОтгрузки КАК ДатаФактическойОтгрузки
		|ПОМЕСТИТЬ ВтДанныеСПроверкой
		|ИЗ
		|	ВтДанныеСНаборкой КАК ВтДанныеСНаборкой
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.итWMSПроверка.итОснования КАК итWMSПроверкаитОснования
		|		ПО ВтДанныеСНаборкой.Наборка = итWMSПроверкаитОснования.Документ
		|			И (итWMSПроверкаитОснования.Ссылка.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеСПроверкой.Ссылка КАК Ссылка,
		|	ВтДанныеСПроверкой.Контрагент КАК Контрагент,
		|	ВтДанныеСПроверкой.Организация КАК Организация,
		|	ВтДанныеСПроверкой.Комментарий КАК Комментарий,
		|	ВтДанныеСПроверкой.Набран КАК Набран,
		|	ВтДанныеСПроверкой.Отгружен КАК Отгружен,
		|	ВтДанныеСПроверкой.НомерИсточника КАК НомерИсточника,
		|	ВтДанныеСПроверкой.ОбработанЛогистом КАК ОбработанЛогистом,
		|	ВтДанныеСПроверкой.ВНаборе КАК ВНаборе,
		|	ВтДанныеСПроверкой.итВремяНачалаПогрузкиКакВремя КАК итВремяНачалаПогрузкиКакВремя,
		|	ВтДанныеСПроверкой.итВремяЗавершенияПогрузкиКакВремя КАК итВремяЗавершенияПогрузкиКакВремя,
		|	ВтДанныеСПроверкой.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВтДанныеСПроверкой.ДатаПоставки КАК ДатаПоставки,
		|	ВтДанныеСПроверкой.ВесБрутто КАК ВесБрутто,
		|	ВтДанныеСПроверкой.Транзит КАК Транзит,
		|	ВтДанныеСПроверкой.Наборка КАК Наборка,
		|	ВтДанныеСПроверкой.Проверил КАК Проверил,
		|	ВтДанныеСПроверкой.Проверка КАК Проверка,
		|	ВложенныйЗапрос.Отгрузка КАК Отгрузка,
		|	ВложенныйЗапрос.Исполнитель КАК Отгрузил,
		|	ВтДанныеСПроверкой.Свободник КАК Свободник,
		|	ВтДанныеСПроверкой.АдресДоставки КАК АдресДоставки,
		|	ВтДанныеСПроверкой.ДатаФактическойОтгрузки КАК ДатаФактическойОтгрузки
		|ПОМЕСТИТЬ ВтДанныеСОтгрузкой
		|ИЗ
		|	ВтДанныеСПроверкой КАК ВтДанныеСПроверкой
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВтДанныеСПроверкой.Ссылка КАК Заказ,
		|			итWMSОтгрузкаитОснования.Ссылка КАК Отгрузка,
		|			ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяССылка) КАК Исполнитель
		|		ИЗ
		|			ВтДанныеСПроверкой КАК ВтДанныеСПроверкой
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSОтгрузка.итОснования КАК итWMSОтгрузкаитОснования
		|				ПО ВтДанныеСПроверкой.Наборка = итWMSОтгрузкаитОснования.Документ
		|					И (итWMSОтгрузкаитОснования.Ссылка.Проведен)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ВтДанныеСПроверкой.Ссылка,
		|			итWMSРучнаяОтгрузка.Ссылка,
		|			итWMSРучнаяОтгрузка.Исполнитель
		|		ИЗ
		|			ВтДанныеСПроверкой КАК ВтДанныеСПроверкой
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSРучнаяОтгрузка КАК итWMSРучнаяОтгрузка
		|				ПО ВтДанныеСПроверкой.Ссылка = итWMSРучнаяОтгрузка.итОснование
		|					И (итWMSРучнаяОтгрузка.Проведен)) КАК ВложенныйЗапрос
		|		ПО ВтДанныеСПроверкой.Ссылка = ВложенныйЗапрос.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSЗадачиТСД.ДокументОснование КАК ДокументОснование,
		|	итWMSЗадачиТСД.ТСД КАК ТСД,
		|	итWMSЗадачиТСД.ДатаНачала КАК ДатаНачала,
		|	итWMSЗадачиТСД.ИдЗадачи КАК ИдЗадачи
		|ПОМЕСТИТЬ ВтДанныезадачТСД
		|ИЗ
		|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|ГДЕ
		|	итWMSЗадачиТСД.ДокументОснование В
		|			(ВЫБРАТЬ
		|				ВтДанныеСОтгрузкой.Наборка КАК Док
		|			ИЗ
		|				ВтДанныеСОтгрузкой КАК ВтДанныеСОтгрузкой
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ВтДанныеСОтгрузкой.Проверка
		|			ИЗ
		|				ВтДанныеСОтгрузкой КАК ВтДанныеСОтгрузкой
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ВтДанныеСОтгрузкой.Отгрузка
		|			ИЗ
		|				ВтДанныеСОтгрузкой КАК ВтДанныеСОтгрузкой)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ДокументОснование КАК ДокументОснование,
		|	ВложенныйЗапрос.РаботникСклада КАК РаботникСклада
		|ПОМЕСТИТЬ ВтДанныеРаботникПоДокументам
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.ДокументОснование КАК ДокументОснование,
		|		МАКСИМУМ(итWMSСостояниеТСД.РаботникСклада) КАК РаботникСклада
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВтДанныезадачТСД.ТСД КАК ТСД,
		|			ВтДанныезадачТСД.ДокументОснование КАК ДокументОснование,
		|			ВтДанныезадачТСД.ДатаНачала КАК ДатаНачала,
		|			МАКСИМУМ(итWMSСостояниеТСД.Период) КАК Период
		|		ИЗ
		|			ВтДанныезадачТСД КАК ВтДанныезадачТСД
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСостояниеТСД КАК итWMSСостояниеТСД
		|				ПО ВтДанныезадачТСД.ДатаНачала >= итWMSСостояниеТСД.Период
		|					И ВтДанныезадачТСД.ТСД = итWMSСостояниеТСД.ТСД
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВтДанныезадачТСД.ТСД,
		|			ВтДанныезадачТСД.ДокументОснование,
		|			ВтДанныезадачТСД.ДатаНачала) КАК ВложенныйЗапрос
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСостояниеТСД КАК итWMSСостояниеТСД
		|			ПО ВложенныйЗапрос.Период = итWMSСостояниеТСД.Период
		|				И ВложенныйЗапрос.ТСД = итWMSСостояниеТСД.ТСД
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВложенныйЗапрос.ДокументОснование) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеСОтгрузкой.Ссылка КАК Ссылка,
		|	ВтДанныеСОтгрузкой.Контрагент КАК Контрагент,
		|	ВтДанныеСОтгрузкой.Организация КАК Организация,
		|	ВтДанныеСОтгрузкой.Комментарий КАК Комментарий,
		|	ВтДанныеСОтгрузкой.Набран КАК Набран,
		|	ВтДанныеСОтгрузкой.Отгружен КАК Отгружен,
		|	ВтДанныеСОтгрузкой.НомерИсточника КАК НомерИсточника,
		|	ВтДанныеСОтгрузкой.ОбработанЛогистом КАК ОбработанЛогистом,
		|	ВтДанныеСОтгрузкой.ВНаборе КАК ВНаборе,
		|	ВтДанныеСОтгрузкой.итВремяНачалаПогрузкиКакВремя КАК итВремяНачалаПогрузкиКакВремя,
		|	ВтДанныеСОтгрузкой.итВремяЗавершенияПогрузкиКакВремя КАК итВремяЗавершенияПогрузкиКакВремя,
		|	ВтДанныеСОтгрузкой.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВтДанныеСОтгрузкой.ДатаПоставки КАК ДатаПоставки,
		|	ВтДанныеСОтгрузкой.ВесБрутто КАК ВесБрутто,
		|	ВтДанныеСОтгрузкой.Транзит КАК Транзит,
		|	ВтДанныеСОтгрузкой.Наборка КАК Наборка,
		|	ВтДанныеСОтгрузкой.Проверил КАК Проверил,
		|	ВтДанныеСОтгрузкой.Проверка КАК Проверка,
		|	ВтДанныеСОтгрузкой.Отгрузка КАК Отгрузка,
		|	ВтДанныеСОтгрузкой.Отгрузил КАК Отгрузил,
		|	МаршрутизацияДокументыМаршрута.Ссылка.Транспорт КАК Транспорт,
		|	МаршрутизацияДокументыМаршрута.Ссылка.Водитель КАК Водитель,
		|	МаршрутизацияДокументыМаршрута.Ссылка.ТипТС КАК ТипТС,
		|	МаршрутизацияДокументыМаршрута.Ссылка.Грузоподъемность КАК Грузоподъемность,
		|	МаршрутизацияДокументыМаршрута.Ссылка.ГосНомер КАК ГосНомер,
		|	МаршрутизацияДокументыМаршрута.Ссылка КАК Маршрут,
		|	ВтДанныеСОтгрузкой.Свободник КАК Свободник,
		|	ВтДанныеСОтгрузкой.АдресДоставки КАК АдресДоставки,
		|	ВтДанныеСОтгрузкой.ДатаФактическойОтгрузки КАК ДатаФактическойОтгрузки
		|ПОМЕСТИТЬ ВтДанныеСМаршрутом
		|ИЗ
		|	ВтДанныеСОтгрузкой КАК ВтДанныеСОтгрузкой
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
		|		ПО ВтДанныеСОтгрузкой.Ссылка = МаршрутизацияДокументыМаршрута.Заказ
		|			И (МаршрутизацияДокументыМаршрута.Ссылка.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеСМаршрутом.Ссылка КАК Ссылка,
		|	ВтДанныеСМаршрутом.Контрагент КАК Контрагент,
		|	ВтДанныеСМаршрутом.Организация КАК Организация,
		|	ВтДанныеСМаршрутом.Комментарий КАК Комментарий,
		|	ВтДанныеСМаршрутом.Набран КАК Набран,
		|	ВтДанныеСМаршрутом.Отгружен КАК Отгружен,
		|	ВтДанныеСМаршрутом.НомерИсточника КАК НомерИсточника,
		|	ВтДанныеСМаршрутом.ОбработанЛогистом КАК ОбработанЛогистом,
		|	ВтДанныеСМаршрутом.ВНаборе КАК ВНаборе,
		|	ВтДанныеСМаршрутом.итВремяНачалаПогрузкиКакВремя КАК итВремяНачалаПогрузкиКакВремя,
		|	ВтДанныеСМаршрутом.итВремяЗавершенияПогрузкиКакВремя КАК итВремяЗавершенияПогрузкиКакВремя,
		|	ВтДанныеСМаршрутом.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВтДанныеСМаршрутом.ДатаПоставки КАК ДатаПоставки,
		|	ВтДанныеСМаршрутом.ВесБрутто КАК ВесБрутто,
		|	ВтДанныеСМаршрутом.Транзит КАК Транзит,
		|	ВтДанныеСМаршрутом.Наборка КАК Наборка,
		|	ВтДанныеСМаршрутом.Проверил КАК Проверил,
		|	ВтДанныеСМаршрутом.Проверка КАК Проверка,
		|	ВтДанныеСМаршрутом.Отгрузка КАК Отгрузка,
		|	ВтДанныеСМаршрутом.Отгрузил КАК Отгрузил,
		|	ВтДанныеСМаршрутом.Транспорт КАК Транспорт,
		|	ВтДанныеСМаршрутом.Водитель КАК Водитель,
		|	ВтДанныеСМаршрутом.ТипТС КАК ТипТС,
		|	ВтДанныеСМаршрутом.Грузоподъемность КАК Грузоподъемность,
		|	ВтДанныеСМаршрутом.ГосНомер КАК ГосНомер,
		|	ВтДанныеСМаршрутом.Маршрут КАК Маршрут,
		|	ВтДанныеСМаршрутом.Свободник КАК Свободник,
		|	ВтДанныеСМаршрутом.АдресДоставки КАК АдресДоставки,
		|	ВтДанныеСМаршрутом.ДатаФактическойОтгрузки КАК ДатаФактическойОтгрузки,
		|	РеализацияТоваровУслуг.Ссылка КАК Реализация
		|ПОМЕСТИТЬ ВтДанныеСРеализацией
		|ИЗ
		|	ВтДанныеСМаршрутом КАК ВтДанныеСМаршрутом
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВтДанныеСМаршрутом.Ссылка = РеализацияТоваровУслуг.Сделка
		|			И (РеализацияТоваровУслуг.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеСРеализацией.Ссылка КАК Заказ,
		|	ВтДанныеСРеализацией.Контрагент КАК Контрагент,
		|	ВтДанныеСРеализацией.Организация КАК Организация,
		|	ВтДанныеСРеализацией.Комментарий КАК Комментарий,
		|	ВтДанныеСРеализацией.Набран КАК Набран,
		|	ВтДанныеСРеализацией.Отгружен КАК Отгружен,
		|	ВтДанныеСРеализацией.НомерИсточника КАК НомерИсточника,
		|	ВтДанныеСРеализацией.ОбработанЛогистом КАК ОбработанЛогистом,
		|	ВтДанныеСРеализацией.ВНаборе КАК ВНаборе,
		|	ВтДанныеСРеализацией.итВремяНачалаПогрузкиКакВремя КАК НачалоПогрузки,
		|	ВтДанныеСРеализацией.итВремяЗавершенияПогрузкиКакВремя КАК ЗавершениеПогрузки,
		|	ВтДанныеСРеализацией.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВтДанныеСРеализацией.ДатаПоставки КАК ДатаПоставки,
		|	ВтДанныеСРеализацией.ВесБрутто КАК ВесБрутто,
		|	ВтДанныеСРеализацией.Транзит КАК Транзит,
		|	ВтДанныеСРеализацией.Наборка КАК Наборка,
		|	ВЫБОР
		|		КОГДА ВтДанныеСРеализацией.Проверил = ЗНАЧЕНИЕ(Справочник.физическиелица.ПустаяССылка)
		|			ТОГДА ЕСТЬNULL(ВтДанныеРаботникПоПроверке.РаботникСклада, ЗНАЧЕНИЕ(Справочник.итwmsРаботникиСклада.ПустаяССылка))
		|		ИНАЧЕ ВтДанныеСРеализацией.Проверил
		|	КОНЕЦ КАК Проверил,
		|	ВтДанныеСРеализацией.Проверка КАК Проверка,
		|	ВтДанныеСРеализацией.Отгрузка КАК Отгрузка,
		|	ВЫБОР
		|		КОГДА ВтДанныеСРеализацией.Отгрузил = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяССылка)
		|			ТОГДА ЕСТЬNULL(ВтДанныеРаботникПоОтгрузке.РаботникСклада, ЗНАЧЕНИЕ(Справочник.итwmsРаботникиСклада.ПустаяССылка))
		|		ИНАЧЕ ВтДанныеСРеализацией.Отгрузил
		|	КОНЕЦ КАК Отгрузил,
		|	ВтДанныеСРеализацией.Транспорт КАК Транспорт,
		|	ВтДанныеСРеализацией.Водитель КАК Водитель,
		|	ВтДанныеСРеализацией.ТипТС КАК ТипТС,
		|	ВтДанныеСРеализацией.Грузоподъемность КАК Грузоподъемность,
		|	ВтДанныеСРеализацией.ГосНомер КАК ГосНомер,
		|	ВтДанныеСРеализацией.Маршрут КАК Маршрут,
		|	ВтДанныеСРеализацией.Свободник КАК Свободник,
		|	ВтДанныеСРеализацией.АдресДоставки КАК АдресДоставки,
		|	ВтДанныеРаботникПоНаборке.РаботникСклада КАК Наборщик,
		|	ВтДанныеСРеализацией.ДатаФактическойОтгрузки КАК ДатаФактическойОтгрузки,
		|	ВтДанныеСРеализацией.Реализация КАК Реализация,
		|	ВЫБОР
		|		КОГДА ВтДанныеСРеализацией.Отгружен
		|			ТОГДА ""Отгружен""
		|		КОГДА ВтДанныеСРеализацией.Набран
		|			ТОГДА ""Набран""
		|		КОГДА ВтДанныеСРеализацией.ВНаборе
		|			ТОГДА ""Создана наборка""
		|		КОГДА ВтДанныеСРеализацией.ОбработанЛогистом
		|			ТОГДА ""ОбработанЛогистом""
		|		ИНАЧЕ ""Не обработано""
		|	КОНЕЦ КАК Статус
		|ИЗ
		|	ВтДанныеСРеализацией КАК ВтДанныеСРеализацией
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеРаботникПоДокументам КАК ВтДанныеРаботникПоНаборке
		|		ПО ВтДанныеСРеализацией.Наборка = ВтДанныеРаботникПоНаборке.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеРаботникПоДокументам КАК ВтДанныеРаботникПоПроверке
		|		ПО ВтДанныеСРеализацией.Проверка = ВтДанныеРаботникПоПроверке.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеРаботникПоДокументам КАК ВтДанныеРаботникПоОтгрузке
		|		ПО ВтДанныеСРеализацией.Отгрузка = ВтДанныеРаботникПоОтгрузке.ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОтгрузки,
		|	НачалоПогрузки";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Ссылка", ЗаказПокупателя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
    Возврат РезультатЗапроса;	
КонецФункции

	
Функция ПолучитьНастройкиИзХранилища() Экспорт 
	//Возврат ХранилищеОбщихНастроек.Загрузить("WMSНастройки","WMSНастройки",,"WMSНастройки");
	СтруктураНастроек=новый Структура;
	НаборЗаписей=РегистрыСведений.WMS_НастройкиСистемы.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для Каждого стр из НаборЗаписей Цикл 
		СтруктураНастроек.Вставить(стр.Ключ,стр.Значение.Получить());
	КонецЦикла;
	Возврат СтруктураНастроек;
	
КонецФункции

Процедура УстановкаНовогоНомераПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
ОрганизацияВМетаданных=Источник.Метаданные().Реквизиты.Найти("Организация");
Если ОрганизацияВМетаданных<>Неопределено Тогда
	Префикс=Источник.Организация.Префикс;
иначе
	ОрганизацияВМетаданных=Источник.Метаданные().Реквизиты.Найти("ОрганизацияОтправитель");
	Если ОрганизацияВМетаданных<>Неопределено Тогда
		Префикс=Источник.ОрганизацияОтправитель.Префикс;
	КонецЕсли;
КонецЕсли;


Префикс=Префикс+Константы.ПрефиксИнформационнойБазы.Получить();
Если СтрДлина(Префикс)>0 Тогда
Префикс=Префикс+"-";	
КонецЕсли;
КонецПроцедуры

// Функция - Получить настройки из хранилища по свойствам
//
// Параметры:
//  Свойства - Строка -  Строка свойствт,разделенных  запятой.
// 
// Возвращаемое значение:
// Структура - Структура запрошенных свойств
//
Функция  ПолучитьНастройкиИзХранилищаПоСвойствам(Свойства) Экспорт 
	МассивСвойств=итWMSСлужебныеПроцедурыИФункции.Split(Свойства,",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	WMS_НастройкиСистемы.Ключ КАК Ключ,
	|	WMS_НастройкиСистемы.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.WMS_НастройкиСистемы КАК WMS_НастройкиСистемы
	|ГДЕ
	|	WMS_НастройкиСистемы.Ключ В(&МассивСвойств)";
	
	Запрос.УстановитьПараметр("МассивСвойств", МассивСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтруктураНастроек=новый Структура;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураНастроек.Вставить(ВыборкаДетальныеЗаписи.Ключ,ВыборкаДетальныеЗаписи.Значение.Получить());
	КонецЦикла;
	
	Возврат СтруктураНастроек;
КонецФункции
Процедура СохранитьНастройкиВХранилище(СтруктураХраненияДанных) Экспорт 
	
	//ХранилищеОбщихНастроек.Сохранить("WMSНастройки","WMSНастройки",СтруктураХраненияДанных,,"WMSНастройки");
	Для Каждого Свойства из СтруктураХраненияДанных Цикл 
		МенеджерЗаписи=РегистрыСведений.WMS_НастройкиСистемы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ключ=Свойства.Ключ;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Ключ=Свойства.Ключ;
		МенеджерЗаписи.Значение=новый ХранилищеЗначения(Свойства.Значение,новый СжатиеДанных(9));
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры
Процедура итWMSРазблокировкаЯчеекПослеИнвентаризации() Экспорт
	ДатаОбработки=ТекущаяДата();
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итСкладскиеЯчейки.Ссылка КАК Ячейка
	|ИЗ
	|	Справочник.итСкладскиеЯчейки КАК итСкладскиеЯчейки
	|ГДЕ
	|	итСкладскиеЯчейки.ДатаСнятияБлокировкиИнвентаризации > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И итСкладскиеЯчейки.ДатаСнятияБлокировкиИнвентаризации <= &ДатаОбработки
	|
	|СГРУППИРОВАТЬ ПО
	|	итСкладскиеЯчейки.Ссылка";
	
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектЯчейки=ВыборкаДетальныеЗаписи.Ячейка.ПолучитьОбъект();
		ОбъектЯчейки.Заблокирована=Ложь;
		ОбъектЯчейки.ДатаСнятияБлокировкиИнвентаризации='00010101';
		ОбъектЯчейки.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
Процедура итWMS_ОчискаКОА_ПоИстечениюСрока() Экспорт
	Данные=ПолучитьНастройкиИзХранилища();
	Если не Данные.Свойство("СкрокГодностиКОАВДнях") Тогда 
		ЗаписьЖурналаРегистрации("итWMS_ОчискаКОА_ПоИстечениюСрока",,,,"Ошибка исполнения задания, нет данных настроек <<СкрокГодностиКОАВДнях>>");
		Возврат
	КонецЕсли;
	Если Данные.СкрокГодностиКОАВДнях=0 Тогда 
		Возврат
	КонецЕсли;
	
	Если Данные.СкрокГодностиКОАВДнях<30 Тогда
		ЗаписьЖурналаРегистрации("итWMS_ОчискаКОА_ПоИстечениюСрока",,,,"Ошибка исполнения задания,СкрокГодностиКОАВДнях меньше 30 дней");
		Возврат
	КонецЕсли;	
	
	ДатаОтсчета=ТекущаяДата()-(Данные.СкрокГодностиКОАВДнях*24*60*60);
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSКонтрольнаяОперацияАгрегации.Ссылка
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.итWMSКонтрольнаяОперацияАгрегации КАК итWMSКонтрольнаяОперацияАгрегации
	|ГДЕ
	|	итWMSКонтрольнаяОперацияАгрегации.Дата <= &ДатаОтсчета
	|	И итWMSКонтрольнаяОперацияАгрегации.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Завершен)
	|	И НЕ итWMSКонтрольнаяОперацияАгрегации.ОбработанОчисткойПоСрокуГодности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итWMSКонтрольнаяОперацияАгрегации.Ссылка
	|ИЗ
	|	Документ.итWMSКонтрольнаяОперацияАгрегации КАК итWMSКонтрольнаяОперацияАгрегации
	|ГДЕ
	|	итWMSКонтрольнаяОперацияАгрегации.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой)
	|	И итWMSКонтрольнаяОперацияАгрегации.Дата <= &ДатаОтсчета
	|	И НЕ итWMSКонтрольнаяОперацияАгрегации.ОбработанОчисткойПоСрокуГодности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Ссылка";
	
	Запрос.УстановитьПараметр("ДатаОтсчета", ДатаОтсчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектИзменения=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектИзменения.ДанныеАгрегацииДокумента.Очистить();
		ОбъектИзменения.ОбработанОчисткойПоСрокуГодности=Истина;
		ОбъектИзменения.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры
// Процедура - Создать задачи к инвентаризации отмененных задач
// создает документ ит wms  задачи инвентаризации на ячейки отмененых задач, с определенными причинами
// Параметры:
//  Ссылка	 - ДокументСсылка.итWMSНаборка,ДокументСсылка.итWMSПеремещения	 - ссылка на обрабатываемый документ 
//
Процедура СоздатьЗадачиКИнвентаризацииОтмененныхЗадач(Ссылка) Экспорт 
	///Удалить процедуру
КонецПроцедуры
Процедура ит_WMS_УдалениеУстаревшихДанныхХранилища() Экспорт
	ДатаДляЗАпроса=ТекущаяДата()-(24*60*60);	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ит_WMS_ХранилищеДанных.КлючХраненияДанных
	|ИЗ
	|	РегистрСведений.ит_WMS_ХранилищеДанных КАК ит_WMS_ХранилищеДанных
	|ГДЕ
	|	ит_WMS_ХранилищеДанных.ДатаСохранения <= &ДатаЗапроса
	|	И НЕ ит_WMS_ХранилищеДанных.НеУдалять";
	
	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаДляЗАпроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи=РегистрыСведений.ит_WMS_ХранилищеДанных.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.КлючХраненияДанных=ВыборкаДетальныеЗаписи.КлючХраненияДанных;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	
КонецПроцедуры
// Процедура - Проведение документов привелигированно
// проводит документ  с признаком привилигированный, если такой механизм у документа имеется.
// Текущий механизм должен позволять игнорировать все проверки  или большую их часть
// Параметры:
//  СсылкаНаОбъект	 - ДокументСсылка - Ссылка на документ 
//  ОбъектДанных	 - Произвольное	 -  объект документа
//
Процедура ПроведениеДокументовПривелигированно(СсылкаНаОбъект=Неопределено,ОбъектДанных=Неопределено) Экспорт 
	Если СсылкаНаОбъект=Неопределено и ОбъектДанных=Неопределено Тогда 
		Возврат
	КонецЕсли;
	Если ОбъектДанных=Неопределено Тогда 
		ОбъектДанных=СсылкаНаОбъект.ПолучитьОбъект();
	КонецЕсли;
	Попытка
		ОбъектДанных.ПривилигированноеПроведение=Истина;
	Исключение
	КонецПопытки;
	ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение)
КонецПроцедуры

Процедура ит_WMS_КонтрольПроведенностиДокументов() Экспорт
	Дата =ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыКДополнительнойОбработке.Документ КАК Документ,
	|	ДокументыКДополнительнойОбработке.Документ.Проведен КАК Проведен
	|ИЗ
	|	РегистрСведений.ДокументыКДополнительнойОбработке КАК ДокументыКДополнительнойОбработке
	|ГДЕ
	|	ДокументыКДополнительнойОбработке.АлгоритмОбработки = &АлгоритмОбработки";
	
	Запрос.УстановитьПараметр("АлгоритмОбработки", Справочники.АлгоритмыДопОбработкиДокументов.ДопроведениеДокументовЗаТСД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка  
			Если ВыборкаДетальныеЗаписи.Проведен Тогда 
				ПроведениеДокументовПривелигированно(ВыборкаДетальныеЗаписи.Документ);
			КонецЕсли;     
		итWMSСлужебныеПроцедурыИФункции.УдалитьЗаписьДопОбработкиОтложенногоПроведения(ВыборкаДетальныеЗаписи.Документ);
		Исключение
			Ошибка=ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ПроведениеWMSДокументов",,,,Строка(ВыборкаДетальныеЗаписи.Ссылка)+" "+Ошибка);
		КонецПопытки;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура СоздатьМаркиСБлокировкой(МассивМарок)Экспорт 
	Для Каждого стр из МассивМарок Цикл 
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных=новый БлокировкаДанных;
	ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.ТаблицаДляБлокировкиСозданияМарки");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ЗначениеШтрихКода",стр);
	БлокировкаДанных.Заблокировать();
	Марка=итWMSСлужебныеПроцедурыИФункции.НайтиМаркуПоЗначению(стр);
	Если Марка=Неопределено Тогда
	Марка=Справочники.Марки.СоздатьЭлемент();
	Марка.ЗначениеШтрихКода=стр;
	Марка.ДатаРегистрации=ТекущаяДата();
	Марка.Записать();
	КонецЕсли;	
	ЗафиксироватьТранзакцию();
	КонецЦикла;

КонецПроцедуры

Процедура СервесныйСоздатьМаркиСБлокировкой(МассивМарок)Экспорт
	Для Каждого стр из МассивМарок Цикл 
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных=новый БлокировкаДанных;
	ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.ТаблицаДляБлокировкиСозданияМарки");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ЗначениеШтрихКода",стр);
	БлокировкаДанных.Заблокировать();
	Марка=итWMSСлужебныеПроцедурыИФункции.СервиснаяНайтиМаркуПоЗначению(стр);
	Если Марка=Неопределено Тогда
	Марка=Справочники.Марки1.СоздатьЭлемент();
	Марка.ЗначениеШтрихКода=стр;
	Марка.ДатаРегистрации=ТекущаяДата();
	Марка.Записать();
	КонецЕсли;	
	ЗафиксироватьТранзакцию();
	КонецЦикла;
	КонецПроцедуры


Процедура ОбработкаОтложенногоПривелигированногоПроведения(Документ) Экспорт
	ПроведениеДокументовПривелигированно(Документ);
КонецПроцедуры

Процедура ОбработкаОтложенногоПроведения(Документ) Экспорт
	ОбъектДанных=Документ.ПолучитьОбъект();
	ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение);	
КонецПроцедуры

Функция ПолучитьДанныеКастомизацииСозданияНаОсновании() Экспорт 
	Возврат ХранилищеОбщихНастроек.Загрузить("ит_WMS_КастомизацияСозданияНаОсновании","ит_WMS_КастомизацияСозданияНаОсновании",,"ит_WMS_КастомизацияСозданияНаОсновании");
КонецФункции

// Изменить настройки пользователя по умолчанию.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
//  ТаблицаНастроек - ТаблицаЗначений - Таблица настроек
Процедура ИзменитьНастройкиПользователяПоУмолчанию(Пользователь,ТаблицаНастроек) Экспорт
ОбъектПользователя=Пользователь.ПолучитьОбъект();
ОбъектПользователя.НастройкиПоУмолчанию.Очистить();
ОбъектПользователя.НастройкиПоУмолчанию.Загрузить(ТаблицаНастроек);	
ОбъектПользователя.Записать();
КонецПроцедуры


// Процедура - Записать данные входа выхода
//
// Параметры:
//  СтруктураПараметров	 - Структура - 
//
Процедура ЗаписатьДанныеВходаВыхода(СтруктураПараметров) Экспорт 
	
	    НаборЗаписей=РегистрыСведений.ДанныеВходаВыходаРаботника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(СтруктураПараметров.Дата);
		НаборЗаписей.Отбор.Организация.Установить(СтруктураПараметров.Организация);
		НаборЗаписей.Отбор.РаботникСклада.Установить(СтруктураПараметров.РаботникСклада);
		НаборЗаписей.Отбор.ДействиеВходаВыхода.Установить(СтруктураПараметров.ТипДействия);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.Дата=СтруктураПараметров.Дата;
		НоваяЗапись.Организация=СтруктураПараметров.Организация;
		НоваяЗапись.РаботникСклада=СтруктураПараметров.РаботникСклада;
		НоваяЗапись.ДействиеВходаВыхода=СтруктураПараметров.ТипДействия;
		НаборЗаписей.Записать();

	КонецПроцедуры


#Область РассылкаПочтойЧерезСистемнуюЗапись

Процедура РазослатьПисьмаСистемнойПочтой(МассивАдресов,ТелоПисьма,ТемаПисьма,МассивФайлов=Неопределено) Экспорт 
	СистемнаяПочта=Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗапись;
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераSMTP = СистемнаяПочта.SMTPСервер;
	Профиль.ПользовательSMTP = СистемнаяПочта.ЛогинSMTP;
	Профиль.ПарольSMTP = СистемнаяПочта.ПарольSMTP;
	Профиль.ИспользоватьSSLSMTP = Истина;
	Профиль.ПортSMTP = СистемнаяПочта.ПортSMTP; 
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	Почта = Новый ИнтернетПочта;     
	Почта.Подключиться(Профиль);
	Для Каждого стр из МассивАдресов Цикл 
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Текст = Письмо.Тексты.Добавить(ТелоПисьма);
		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		Письмо.Тема = ТемаПисьма; 
		Письмо.Отправитель = СистемнаяПочта.АдресЭлектроннойПочты;
		Письмо.ИмяОтправителя = СистемнаяПочта.АдресЭлектроннойПочты;
		Письмо.Получатели.Добавить(стр);
		Если МассивФайлов<>Неопределено Тогда 
			Для Каждого  стр из МассивФайлов Цикл 
				Письмо.Вложения.Добавить(стр);
			КонецЦикла;
		КонецЕсли;
		Почта.Послать(Письмо);
	КонецЦикла;
	Почта.Отключиться();
КонецПроцедуры

#КонецОбласти

#Область ДаннныеСветофора

Функция РассчетСветофораПриемка() Экспорт 
	Цвет=1;
	
	ДатаТекущая=ТекущаяДата();
	НеделюНазад=ДатаТекущая-(24*60*60*7);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.Ссылка) КАК Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.ДатаПоступления МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ЗаказПоставщику.итВремяФактическогоПрибытия <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ЗаказПоставщику.итВремяФактическойВыгрузки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ЗаказПоставщику.Проведен";
	
	Запрос.УстановитьПараметр("ДатаНачала", НеделюНазад);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаТекущая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличествоМашинНаПриходе=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КоличествоМашинНаПриходе=ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Если КоличествоМашинНаПриходе=null или КоличествоМашинНаПриходе=Неопределено Тогда 
		КоличествоМашинНаПриходе=0;
	КонецЕсли;
	Если КоличествоМашинНаПриходе>4 и КоличествоМашинНаПриходе<8 Тогда 
		Цвет= 2;
	КонецЕсли;
	Если КоличествоМашинНаПриходе>=8 Тогда 
		Цвет= 3;
	КонецЕсли;
	ЗаписьJSON=новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
    ЗаписьJSON.ЗаписатьБезОбработки("{"+""""+"Colour"+""""+":"+""""+Строка(Цвет)+""""+","+""""+"Quantity"+""""+":"+""""+Строка(КоличествоМашинНаПриходе)+""""+"}");

       Возврат ЗаписьJSON.Закрыть();
	
	КонецФункции


Функция РассчетДанныхНаборки() Экспорт 
	Цвет=1;		
	ДатаТекущая=ТекущаяДата();
	ДатаНачала=ДатаТекущая-24*60*60;
	ДатаОкончания=ДатаТекущая+24*60*60;
	
    Значение=ЗагрузитьНастройкиИзХранилищаОбщихНастроек("итWMSМотивационныйОтчет","итWMSМотивационныйОтчет","итWMSМотивационныйОтчет");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)) КАК ДатаОтгрузки
		|ПОМЕСТИТЬ ВтДанныеЗаказов
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Проведен
		|	И ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ ЗаказПокупателя.Набран
		|	И ЗаказПокупателя.Выполнен
		|	И ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя <> ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеЗаказов.Ссылка,
		|	ВтДанныеЗаказов.ДатаОтгрузки,
		|	итWMSНаборка.Ссылка КАК Наборка
		|ПОМЕСТИТЬ ВтДанныеНаборок
		|ИЗ
		|	ВтДанныеЗаказов КАК ВтДанныеЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
		|		ПО ВтДанныеЗаказов.Ссылка = итWMSНаборка.итОснование
		|			И (итWMSНаборка.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSСтрокиЗадачТСД.идСтроки,
		|	ВложенныйЗапрос.ДокументОснование,
		|	ВложенныйЗапрос.ИдЗадачи,
		|	ВложенныйЗапрос.Состояние
		|ПОМЕСТИТЬ РеальноеСостояниеЗадачДокумента
		|ИЗ
		|	(ВЫБРАТЬ
		|		итWMSЗадачиТСД.ДокументОснование КАК ДокументОснование,
		|		итWMSЗадачиТСД.ИдЗадачи КАК ИдЗадачи,
		|		итWMSЗадачиТСД.Состояние КАК Состояние
		|	ИЗ
		|		ВтДанныеНаборок КАК ВтДанныеНаборок
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|			ПО ВтДанныеНаборок.Наборка = итWMSЗадачиТСД.ДокументОснование
		|	
		|	СГРУППИРОВАТЬ ПО
		|		итWMSЗадачиТСД.ДокументОснование,
		|		итWMSЗадачиТСД.ИдЗадачи,
		|		итWMSЗадачиТСД.Состояние) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|		ПО ВложенныйЗапрос.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSСтрокиЗадачТСД.идСтроки,
		|	ВложенныйЗапрос.ДокументОснование,
		|	ВложенныйЗапрос.ИдЗадачи,
		|	ВложенныйЗапрос.Состояние
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSНаборкаТовары.Ссылка КАК ДокументОснование,
		|	итWMSНаборкаТовары.Номенклатура КАК Номенклатура,
		|	итWMSНаборкаТовары.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итWMSНаборкаТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	итWMSНаборкаТовары.СерияНоменклатуры.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	итWMSНаборкаТовары.ЯчейкаПикинга КАК ЯчейкаПикинга,
		|	СУММА(итWMSНаборкаТовары.КоличествоФакт) КАК КоличествоФакт,
		|	МАКСИМУМ(итWMSНаборкаТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете) КАК КоличествоНаПаллете,
		|	МАКСИМУМ(итWMSНаборкаТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоВСлое) КАК КоличествоВСлое,
		|	МАКСИМУМ(итWMSНаборкаТовары.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент) КАК КоличествоВКоробе,
		|	итWMSНаборкаТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
		|	итWMSНаборкаТовары.Ссылка.Контрагент КАК Контрагент,
		|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
		|	итWMSНаборкаТовары.ЯчейкаОтправитель,
		|	итWMSНаборкаТовары.ИдентификаторСтроки,
		|	итWMSНаборкаТовары.Количество,
		|	ВтДанныеНаборок.Ссылка КАК Заказ,
		|	ВтДанныеНаборок.ДатаОтгрузки КАК ДатаОтгрузкиЗаказа
		|ПОМЕСТИТЬ ВтДанныеНаборки
		|ИЗ
		|	ВтДанныеНаборок КАК ВтДанныеНаборок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ РеальноеСостояниеЗадачДокумента КАК РеальноеСостояниеЗадачДокумента
		|			ПО итWMSНаборкаТовары.ИдентификаторСтроки = РеальноеСостояниеЗадачДокумента.идСтроки
		|				И итWMSНаборкаТовары.Ссылка = РеальноеСостояниеЗадачДокумента.ДокументОснование
		|		ПО ВтДанныеНаборок.Наборка = итWMSНаборкаТовары.Ссылка
		|ГДЕ
		|	итWMSНаборкаТовары.Ссылка.Проведен
		|	И ВЫБОР
		|			КОГДА итWMSНаборкаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихдокументов.Зарезервирован)
		|				ТОГДА итWMSНаборкаТовары.СостояниеЗадачи В (ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению), ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.ПустаяСсылка))
		|			ИНАЧЕ ЕСТЬNULL(РеальноеСостояниеЗадачДокумента.Состояние, итWMSНаборкаТовары.СостояниеЗадачи) В (ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению), ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполняется))
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSНаборкаТовары.Номенклатура,
		|	итWMSНаборкаТовары.СерияНоменклатуры,
		|	итWMSНаборкаТовары.ИдентификаторУпаковки,
		|	итWMSНаборкаТовары.СерияНоменклатуры.итПризнакПомарочногоУчета,
		|	итWMSНаборкаТовары.ЯчейкаПикинга,
		|	итWMSНаборкаТовары.ЯчейкаПолучатель,
		|	итWMSНаборкаТовары.Ссылка.Контрагент,
		|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
		|	итWMSНаборкаТовары.ЯчейкаОтправитель,
		|	итWMSНаборкаТовары.ИдентификаторСтроки,
		|	итWMSНаборкаТовары.Количество,
		|	итWMSНаборкаТовары.Ссылка,
		|	ВтДанныеНаборок.Ссылка,
		|	ВтДанныеНаборок.ДатаОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборки.ДокументОснование,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеНаборки.ИдентификаторСтроки) КАК КоличествоСтрок
		|ПОМЕСТИТЬ ВтКоличествоСтрокНаборки
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеНаборки.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеНаборки.ИдентификаторСтроки) КАК КоличествоСтрокПаллеты,
		|	ВтДанныеНаборки.ДокументОснование
		|ПОМЕСТИТЬ ВтКоличествоСтрокВПаллете
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеНаборки.ДокументОснование,
		|	ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ДокументОснование КАК ДокументОснование,
		|	СУММА(ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ВложенныйЗапрос.КоэффициентПаллетНаборки + 0.4999 КАК ЧИСЛО(15, 0))) < 1
		|				ТОГДА 1
		|			ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.КоэффициентПаллетНаборки + 0.4999 КАК ЧИСЛО(15, 0))
		|		КОНЕЦ) КАК КоэффициентПаллетНаборки
		|ПОМЕСТИТЬ КоличествоПаллетНаборкиПоКоэф
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВтДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|		СУММА(ВтДанныеНаборки.Количество / ВЫБОР
		|				КОГДА ЕСТЬNULL(ВтДанныеНаборки.КоличествоНаПаллете, 0) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(ВтДанныеНаборки.КоличествоНаПаллете, 0)
		|			КОНЕЦ) КАК КоэффициентПаллетНаборки
		|	ИЗ
		|		ВтДанныеНаборки КАК ВтДанныеНаборки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВтДанныеНаборки.ДокументОснование) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеНаборки.ЯчейкаОтправитель) КАК КоличествоЯчеек,
		|	ВтДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|	ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель
		|ПОМЕСТИТЬ КоличествоЯчеекНаборки
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеНаборки.ДокументОснование,
		|	ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ВложенныйЗапрос.КоличествоНаПаллете КАК КоличествоНаПаллете,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.ДокументОснование КАК ДокументОснование,
		|	ВложенныйЗапрос.ЯчейкаОтправитель,
		|	ВложенныйЗапрос.Количество
		|ПОМЕСТИТЬ ИнформацияПоНецелымПаллетымНаборки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВтДанныеНаборки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|		ВтДанныеНаборки.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
		|		СУММА(ВтДанныеНаборки.Количество) КАК Количество,
		|		МАКСИМУМ(ВтДанныеНаборки.КоличествоНаПаллете) КАК КоличествоНаПаллете,
		|		ВтДанныеНаборки.Номенклатура КАК Номенклатура,
		|		ВтДанныеНаборки.ДокументОснование КАК ДокументОснование
		|	ИЗ
		|		ВтДанныеНаборки КАК ВтДанныеНаборки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВтДанныеНаборки.ИдентификаторУпаковки,
		|		ВтДанныеНаборки.Номенклатура,
		|		ВтДанныеНаборки.ДокументОснование,
		|		ВтДанныеНаборки.ЯчейкаОтправитель) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Количество <> ВложенныйЗапрос.КоличествоНаПаллете
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|	ВтДанныеНаборки.Номенклатура КАК Номенклатура,
		|	ВтДанныеНаборки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтДанныеНаборки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ВтДанныеНаборки.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	ВтДанныеНаборки.КоличествоНаПаллете КАК КоличествоНаПаллете,
		|	ВтДанныеНаборки.КоличествоВСлое КАК КоличествоВСлое,
		|	ВтДанныеНаборки.КоличествоВКоробе КАК КоличествоВКоробе,
		|	ВЫБОР
		|		КОГДА НЕ ИнформацияПоНецелымПаллетымНаборки.ИдентификаторУпаковки ЕСТЬ NULL
		|			ТОГДА ВЫРАЗИТЬ(ВтДанныеНаборки.Количество / ЕСТЬNULL(ВтДанныеНаборки.КоличествоВКоробе, 1) - 0.49999 КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоВнепаллетныхКоробов,
		|	1 / ВтКоличествоСтрокВПаллете.КоличествоСтрокПаллеты КАК КоэффициентПаллеты,
		|	ВтДанныеНаборки.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
		|	ВтДанныеНаборки.Контрагент КАК Контрагент,
		|	1 / ВтКоличествоСтрокВПаллете.КоличествоСтрокПаллеты КАК КоэффициентЗадачи,
		|	ВЫБОР
		|		КОГДА НЕ ИнформацияПоНецелымПаллетымНаборки.ИдентификаторУпаковки ЕСТЬ NULL
		|			ТОГДА ВЫРАЗИТЬ((ВтДанныеНаборки.Количество / ЕСТЬNULL(ВтДанныеНаборки.КоличествоВКоробе, 1) - (ВЫРАЗИТЬ(ВтДанныеНаборки.Количество / ЕСТЬNULL(ВтДанныеНаборки.КоличествоВКоробе, 1) - 0.49999 КАК ЧИСЛО(15, 0)))) * ВтДанныеНаборки.КоличествоВКоробе + 0.49999 КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоВнеКоробочныхБутылок,
		|	КоличествоЯчеекНаборки.КоличествоЯчеек КАК КоличествоЯчеекЗадачи,
		|	ВтКоличествоСтрокВПаллете.КоличествоСтрокПаллеты КАК КоличествоСтрокЗадачи,
		|	ВтДанныеНаборки.ЯчейкаОтправитель,
		|	ВтДанныеНаборки.Количество,
		|	ВтДанныеНаборки.ДатаОтгрузкиЗаказа,
		|	ВтДанныеНаборки.Заказ
		|ПОМЕСТИТЬ ВтПодготовленныеДанныеНаборки
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИнформацияПоНецелымПаллетымНаборки КАК ИнформацияПоНецелымПаллетымНаборки
		|		ПО ВтДанныеНаборки.ИдентификаторУпаковки = ИнформацияПоНецелымПаллетымНаборки.ИдентификаторУпаковки
		|			И ВтДанныеНаборки.Номенклатура = ИнформацияПоНецелымПаллетымНаборки.Номенклатура
		|			И ВтДанныеНаборки.ДокументОснование = ИнформацияПоНецелымПаллетымНаборки.ДокументОснование
		|			И ВтДанныеНаборки.ЯчейкаОтправитель = ИнформацияПоНецелымПаллетымНаборки.ЯчейкаОтправитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоЯчеекНаборки КАК КоличествоЯчеекНаборки
		|		ПО ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель = КоличествоЯчеекНаборки.ИдентификаторУпаковкиПолучатель
		|			И ВтДанныеНаборки.ДокументОснование = КоличествоЯчеекНаборки.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоличествоСтрокВПаллете КАК ВтКоличествоСтрокВПаллете
		|		ПО ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель = ВтКоличествоСтрокВПаллете.ИдентификаторУпаковкиПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтПодготовленныеДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|	ВтПодготовленныеДанныеНаборки.Номенклатура КАК Номенклатура,
		|	ВтПодготовленныеДанныеНаборки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтПодготовленныеДанныеНаборки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	ВтПодготовленныеДанныеНаборки.КоличествоНаПаллете КАК КоличествоНаПаллете,
		|	ВтПодготовленныеДанныеНаборки.КоличествоВСлое КАК КоличествоВСлое,
		|	ВтПодготовленныеДанныеНаборки.КоличествоВКоробе КАК КоличествоВКоробе,
		|	ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов КАК КоличествоВнепаллетныхКоробов,
		|	ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета
		|			ТОГДА ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов * &СтоимостьКоробаПМУ
		|		ИНАЧЕ ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов * &СтоимостьКороба
		|	КОНЕЦ КАК СуммаКоробов,
		|	КоличествоПаллетНаборкиПоКоэф.КоэффициентПаллетНаборки * &СтоимостьПаллетыНаборки / ВтКоличествоСтрокНаборки.КоличествоСтрок КАК СуммаПосещения,
		|	ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета
		|			ТОГДА ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов * &СтоимостьКоробаПМУ
		|		ИНАЧЕ ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов * &СтоимостьКороба
		|	КОНЕЦ + КоличествоПаллетНаборкиПоКоэф.КоэффициентПаллетНаборки * &СтоимостьПаллетыНаборки / ВтКоличествоСтрокНаборки.КоличествоСтрок + ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета
		|			ТОГДА ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиПМУНаборка
		|		ИНАЧЕ ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиНаборка
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.Контрагент.ит_WMS_ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА &СтоимостьНаборкиРозница / ЕСТЬNULL(ВтКоличествоСтрокНаборки.КоличествоСтрок, 1)
		|		ИНАЧЕ &СтоимостьНаборки / ЕСТЬNULL(ВтКоличествоСтрокНаборки.КоличествоСтрок, 1)
		|	КОНЕЦ + (ВтПодготовленныеДанныеНаборки.КоличествоЯчеекЗадачи - 1) * &СтоимостьЗаПосещениеЯчейкиНаборка * ВтПодготовленныеДанныеНаборки.КоэффициентЗадачи КАК Всего,
		|	ВтПодготовленныеДанныеНаборки.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
		|	ВтПодготовленныеДанныеНаборки.Контрагент КАК Контрагент,
		|	ВтПодготовленныеДанныеНаборки.КоэффициентЗадачи КАК КоэффициентЗадачи,
		|	ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок КАК КоличествоВнеКоробочныхБутылок,
		|	ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета
		|			ТОГДА ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиПМУНаборка
		|		ИНАЧЕ ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиНаборка
		|	КОНЕЦ КАК СуммаБутылок,
		|	ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.Контрагент.ит_WMS_ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА &СтоимостьНаборкиРозница / ЕСТЬNULL(ВтКоличествоСтрокНаборки.КоличествоСтрок, 1)
		|		ИНАЧЕ &СтоимостьНаборки / ЕСТЬNULL(ВтКоличествоСтрокНаборки.КоличествоСтрок, 1)
		|	КОНЕЦ КАК СтоимостьДокумента,
		|	ВтПодготовленныеДанныеНаборки.КоэффициентПаллеты КАК КоэффициентПаллеты,
		|	ВтПодготовленныеДанныеНаборки.ЯчейкаОтправитель,
		|	ВтПодготовленныеДанныеНаборки.Количество,
		|	ВтПодготовленныеДанныеНаборки.ДатаОтгрузкиЗаказа,
		|	ВтПодготовленныеДанныеНаборки.Заказ
		|ПОМЕСТИТЬ ИтоговыеДанныеНаборок
		|ИЗ
		|	ВтПодготовленныеДанныеНаборки КАК ВтПодготовленныеДанныеНаборки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоличествоСтрокНаборки КАК ВтКоличествоСтрокНаборки
		|		ПО ВтПодготовленныеДанныеНаборки.ДокументОснование = ВтКоличествоСтрокНаборки.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоПаллетНаборкиПоКоэф КАК КоличествоПаллетНаборкиПоКоэф
		|		ПО ВтПодготовленныеДанныеНаборки.ДокументОснование = КоличествоПаллетНаборкиПоКоэф.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыеДанныеНаборок.ДокументОснование,
		|	СУММА(ИтоговыеДанныеНаборок.Всего) КАК Всего,
		|	ИтоговыеДанныеНаборок.ДатаОтгрузкиЗаказа
		|ПОМЕСТИТЬ РассчетВсегоЗаЗаказ
		|ИЗ
		|	ИтоговыеДанныеНаборок КАК ИтоговыеДанныеНаборок
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтоговыеДанныеНаборок.ДокументОснование,
		|	ИтоговыеДанныеНаборок.ДатаОтгрузкиЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборки.ДокументОснование
		|ПОМЕСТИТЬ НаборкиКОтбору
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеНаборки.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSПеремещениеТовары.Номенклатура,
		|	итWMSПеремещениеТовары.Характеристика,
		|	итWMSПеремещениеТовары.СерияНоменклатуры,
		|	итWMSПеремещениеТовары.Качество,
		|	итWMSПеремещениеТовары.ДатаРозлива,
		|	итWMSПеремещениеТовары.Количество,
		|	итWMSПеремещениеТовары.ЯчейкаОтправитель,
		|	итWMSПеремещениеТовары.ЯчейкаПолучатель,
		|	ВложенныйЗапрос.Состояние,
		|	итWMSПеремещениеТовары.ИдентификаторУпаковки,
		|	итWMSПеремещениеТовары.ИдентификаторСтроки,
		|	итWMSПеремещениеТовары.Ссылка,
		|	итWMSПеремещениеТовары.ЯчейкаОтправитель.Ярус,
		|	итWMSПеремещениеТовары.ЯчейкаПолучатель.Ярус,
		|	итWMSПеремещениеТовары.СерияНоменклатуры.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	итWMSПеремещениеТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете КАК итКоличествоНаПаллете,
		|	НаборкиКОтбору.ДокументОснование
		|ПОМЕСТИТЬ ВтДанныеПеремещения
		|ИЗ
		|	НаборкиКОтбору КАК НаборкиКОтбору
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПеремещение.Товары КАК итWMSПеремещениеТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				итWMSСтрокиЗадачТСД.идСтроки КАК идСтроки,
		|				ВложенныйЗапрос.ИдЗадачи КАК ИдЗадачи,
		|				ВложенныйЗапрос.Состояние КАК Состояние,
		|				ВложенныйЗапрос.Ссылка КАК Ссылка
		|			ИЗ
		|				(ВЫБРАТЬ
		|					итWMSЗадачиТСД.ИдЗадачи КАК ИдЗадачи,
		|					итWMSЗадачиТСД.Состояние КАК Состояние,
		|					итWMSПеремещение.Ссылка КАК Ссылка
		|				ИЗ
		|					НаборкиКОтбору КАК НаборкиКОтбору
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПеремещение КАК итWMSПеремещение
		|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|							ПО итWMSПеремещение.Ссылка = итWMSЗадачиТСД.ДокументОснование
		|						ПО НаборкиКОтбору.ДокументОснование = итWMSПеремещение.итОснование
		|							И (итWMSПеремещение.ПеремещениеВПикинг)
		|				ГДЕ
		|					итWMSПеремещение.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(перечисление.итwmsСтатусыСкладскихДокументов.Распределяется), ЗНАЧЕНИЕ(перечисление.итwmsСтатусыСкладскихДокументов.Распределен))
		|					И итWMSПеремещение.Ссылка.Проведен) КАК ВложенныйЗапрос
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|					ПО ВложенныйЗапрос.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи) КАК ВложенныйЗапрос
		|			ПО итWMSПеремещениеТовары.Ссылка = ВложенныйЗапрос.Ссылка
		|				И итWMSПеремещениеТовары.ИдентификаторСтроки = ВложенныйЗапрос.идСтроки
		|		ПО (итWMSПеремещениеТовары.Ссылка.ПеремещениеВПикинг)
		|			И НаборкиКОтбору.ДокументОснование = итWMSПеремещениеТовары.Ссылка.итОснование
		|ГДЕ
		|	итWMSПеремещениеТовары.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(перечисление.итwmsСтатусыСкладскихДокументов.Зарезервирован), ЗНАЧЕНИЕ(перечисление.итwmsСтатусыСкладскихДокументов.Распределяется), ЗНАЧЕНИЕ(перечисление.итwmsСтатусыСкладскихДокументов.Распределен))
		|	И итWMSПеремещениеТовары.Ссылка.Проведен
		|	И ВЫБОР
		|			КОГДА итWMSПеремещениеТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихдокументов.Зарезервирован)
		|				ТОГДА итWMSПеремещениеТовары.СостояниеЗадачи В (ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению), ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.ПустаяСсылка))
		|			ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.Состояние, итWMSПеремещениеТовары.СостояниеЗадачи) В (ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению), ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполняется))
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеПеремещения.ИдентификаторУпаковки,
		|	ВтДанныеПеремещения.ЯчейкаОтправитель,
		|	ВтДанныеПеремещения.ЯчейкаПолучатель,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеПеремещения.ИдентификаторСтроки) КАК КоличествоСтрок,
		|	ВтДанныеПеремещения.Ссылка
		|ПОМЕСТИТЬ СтрокВЗадаче
		|ИЗ
		|	ВтДанныеПеремещения КАК ВтДанныеПеремещения
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеПеремещения.ИдентификаторУпаковки,
		|	ВтДанныеПеремещения.ЯчейкаОтправитель,
		|	ВтДанныеПеремещения.ЯчейкаПолучатель,
		|	ВтДанныеПеремещения.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеПеремещения.Номенклатура,
		|	ВтДанныеПеремещения.Характеристика,
		|	ВтДанныеПеремещения.СерияНоменклатуры,
		|	ВтДанныеПеремещения.Качество,
		|	ВтДанныеПеремещения.ДатаРозлива,
		|	ВтДанныеПеремещения.Количество,
		|	ВтДанныеПеремещения.ЯчейкаОтправитель,
		|	ВтДанныеПеремещения.ЯчейкаПолучатель,
		|	ВтДанныеПеремещения.Состояние,
		|	ВтДанныеПеремещения.ИдентификаторУпаковки,
		|	ВтДанныеПеремещения.ИдентификаторСтроки,
		|	ВтДанныеПеремещения.Ссылка,
		|	ВЫБОР
		|		КОГДА ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> ""1""
		|				И ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> ""0""
		|				И ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> ""00""
		|				И ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> """"
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ / СтрокВЗадаче.КоличествоСтрок * &СтоимостьСпуска КАК Спуск,
		|	ВЫБОР
		|		КОГДА ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> ""1""
		|				И ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> ""0""
		|				И ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> ""00""
		|				И ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> """"
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ / СтрокВЗадаче.КоличествоСтрок * &СтоимостьПодъема КАК Подъем,
		|	ВЫБОР
		|		КОГДА ВтДанныеПеремещения.итПризнакПомарочногоУчета
		|				И ВтДанныеПеремещения.Количество < ВтДанныеПеремещения.итКоличествоНаПаллете
		|			ТОГДА 1 / СтрокВЗадаче.КоличествоСтрок * &СтоимостьПМУПеремещения
		|		ИНАЧЕ 1 / СтрокВЗадаче.КоличествоСтрок * &СтоимостьПеремещения
		|	КОНЕЦ КАК Перемещение,
		|	ВЫБОР
		|		КОГДА ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> ""1""
		|				И ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> ""0""
		|				И ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> ""00""
		|				И ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> """"
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ / СтрокВЗадаче.КоличествоСтрок * &СтоимостьСпуска + ВЫБОР
		|		КОГДА ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> ""1""
		|				И ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> ""0""
		|				И ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> ""00""
		|				И ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> """"
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ / СтрокВЗадаче.КоличествоСтрок * &СтоимостьПодъема + ВЫБОР
		|		КОГДА ВтДанныеПеремещения.итПризнакПомарочногоУчета
		|				И ВтДанныеПеремещения.Количество < ВтДанныеПеремещения.итКоличествоНаПаллете
		|			ТОГДА 1 / СтрокВЗадаче.КоличествоСтрок * &СтоимостьПМУПеремещения
		|		ИНАЧЕ 1 / СтрокВЗадаче.КоличествоСтрок * &СтоимостьПеремещения
		|	КОНЕЦ КАК Всего,
		|	ВтДанныеПеремещения.ДокументОснование КАК Наборка
		|ПОМЕСТИТЬ ВтПеремещениеПодготовленныеДанные
		|ИЗ
		|	ВтДанныеПеремещения КАК ВтДанныеПеремещения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокВЗадаче КАК СтрокВЗадаче
		|		ПО ВтДанныеПеремещения.Ссылка = СтрокВЗадаче.Ссылка
		|			И ВтДанныеПеремещения.ИдентификаторУпаковки = СтрокВЗадаче.ИдентификаторУпаковки
		|			И ВтДанныеПеремещения.ЯчейкаОтправитель = СтрокВЗадаче.ЯчейкаОтправитель
		|			И ВтДанныеПеремещения.ЯчейкаПолучатель = СтрокВЗадаче.ЯчейкаПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтПеремещениеПодготовленныеДанные.Наборка,
		|	ВтПеремещениеПодготовленныеДанные.Ссылка,
		|	СУММА(ВтПеремещениеПодготовленныеДанные.Всего) КАК Всего
		|ПОМЕСТИТЬ ИтогоПоПеремещению
		|ИЗ
		|	ВтПеремещениеПодготовленныеДанные КАК ВтПеремещениеПодготовленныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтПеремещениеПодготовленныеДанные.Наборка,
		|	ВтПеремещениеПодготовленныеДанные.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РассчетВсегоЗаЗаказ.ДокументОснование,
		|	РассчетВсегоЗаЗаказ.Всего + ЕСТЬNULL(ИтогоПоПеремещению.Всего, 0) КАК Всего,
		|	РассчетВсегоЗаЗаказ.ДатаОтгрузкиЗаказа,
		|	ДОБАВИТЬКДАТЕ(РассчетВсегоЗаЗаказ.ДатаОтгрузкиЗаказа, СЕКУНДА, -(РассчетВсегоЗаЗаказ.Всего + ЕСТЬNULL(ИтогоПоПеремещению.Всего, 0))) КАК ДатаОтгрузкиЗаМинусомВремениНабора,
		|	РАЗНОСТЬДАТ(&ДатаТекущая, ДОБАВИТЬКДАТЕ(РассчетВсегоЗаЗаказ.ДатаОтгрузкиЗаказа, СЕКУНДА, -(РассчетВсегоЗаЗаказ.Всего + ЕСТЬNULL(ИтогоПоПеремещению.Всего, 0))), ЧАС) КАК ДоНаборкиМинимум,
		|	НЕ ИтогоПоПеремещению.Ссылка ЕСТЬ NULL КАК НеВыполненноеПеремещение
		|ИЗ
		|	РассчетВсегоЗаЗаказ КАК РассчетВсегоЗаЗаказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогоПоПеремещению КАК ИтогоПоПеремещению
		|		ПО РассчетВсегоЗаЗаказ.ДокументОснование = ИтогоПоПеремещению.Наборка
		|ГДЕ
		|	РАЗНОСТЬДАТ(&ДатаТекущая, ДОБАВИТЬКДАТЕ(РассчетВсегоЗаЗаказ.ДатаОтгрузкиЗаказа, СЕКУНДА, -РассчетВсегоЗаЗаказ.Всего), ЧАС) <= 8";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);	
	Запрос.УстановитьПараметр("ДатаТекущая",ДатаТекущая);
	Запрос.УстановитьПараметр("СтоимостьБутылкиНаборка", Значение.СтоимостьБутылкиНаборка);
	Запрос.УстановитьПараметр("СтоимостьБутылкиПМУНаборка", Значение.СтоимостьБутылкиПМУНаборка);
	Запрос.УстановитьПараметр("СтоимостьКороба", Значение.СтоимостьКороба);
	Запрос.УстановитьПараметр("СтоимостьКоробаПМУ", Значение.СтоимостьКоробаПМУ);
	Запрос.УстановитьПараметр("СтоимостьНаборки", Значение.СтоимостьНаборки);
	Запрос.УстановитьПараметр("СтоимостьЗаПосещениеЯчейкиНаборка",Значение.СтоимостьЗаПосещениеЯчейкиНаборка);
	Запрос.УстановитьПараметр("СтоимостьНаборкиРозница", Значение.СтоимостьНаборкиРозница);
	Запрос.УстановитьПараметр("СтоимостьПаллетыНаборки", Значение.СтоимостьПаллетыНаборки);

	Запрос.УстановитьПараметр("СтоимостьСпуска", Значение.СтоимостьСпуска);
	Запрос.УстановитьПараметр("СтоимостьПодъема",Значение.СтоимостьПодъема);
	Запрос.УстановитьПараметр("СтоимостьПМУПеремещения", Значение.СтоимостьПеремещенияПМУ);
	Запрос.УстановитьПараметр("СтоимостьПеремещения", Значение.СтоимостьПеремещения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка=РезультатЗапроса.Выбрать();
	СчетчикЖелтый=0;
	СчетчикКрасный=0;
	ТекущийСчетчик=0;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДоНаборкиМинимум >6 и  Выборка.ДоНаборкиМинимум <=8 Тогда
			Если Цвет<=2 Тогда 
				Цвет=2;
			КонецЕсли;
			СчетчикЖелтый=СчетчикЖелтый+1;
		иначе
			Цвет=3;
			СчетчикКрасный=СчетчикКрасный+1;
		КонецЕсли;	
	КонецЦикла;
	Если Цвет=2 Тогда 
		ТекущийСчетчик=СчетчикЖелтый;
	ИначеЕсли Цвет=3 Тогда 
		ТекущийСчетчик=СчетчикКрасный;
	КонецЕсли;
	ЗаписьJSON=новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
    ЗаписьJSON.ЗаписатьБезОбработки("{"+""""+"Colour"+""""+":"+""""+Строка(Цвет)+""""+","+""""+"Quantity"+""""+":"+""""+Строка(ТекущийСчетчик)+""""+"}");

	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция ДанныеСветофораНаборкиJSON() Экспорт
	ДатаТекущая=ТекущаяДата();
	ДатаНачала=ДатаТекущая-24*60*60;
	ДатаОкончания=ДатаТекущая+24*60*60;
			
    Значение=ЗагрузитьНастройкиИзХранилищаОбщихНастроек("итWMSМотивационныйОтчет","итWMSМотивационныйОтчет","итWMSМотивационныйОтчет");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)) КАК ДатаОтгрузки
		|ПОМЕСТИТЬ ВтДанныеЗаказов
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Проведен
		|	И ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ ЗаказПокупателя.Набран
		|	И ЗаказПокупателя.Выполнен
		|	И ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя <> ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеЗаказов.Ссылка,
		|	ВтДанныеЗаказов.ДатаОтгрузки,
		|	итWMSНаборка.Ссылка КАК Наборка
		|ПОМЕСТИТЬ ВтДанныеНаборок
		|ИЗ
		|	ВтДанныеЗаказов КАК ВтДанныеЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
		|		ПО ВтДанныеЗаказов.Ссылка = итWMSНаборка.итОснование
		|			И (итWMSНаборка.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSСтрокиЗадачТСД.идСтроки,
		|	ВложенныйЗапрос.ДокументОснование,
		|	ВложенныйЗапрос.ИдЗадачи,
		|	ВложенныйЗапрос.Состояние
		|ПОМЕСТИТЬ РеальноеСостояниеЗадачДокумента
		|ИЗ
		|	(ВЫБРАТЬ
		|		итWMSЗадачиТСД.ДокументОснование КАК ДокументОснование,
		|		итWMSЗадачиТСД.ИдЗадачи КАК ИдЗадачи,
		|		итWMSЗадачиТСД.Состояние КАК Состояние
		|	ИЗ
		|		ВтДанныеНаборок КАК ВтДанныеНаборок
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|			ПО ВтДанныеНаборок.Наборка = итWMSЗадачиТСД.ДокументОснование
		|	
		|	СГРУППИРОВАТЬ ПО
		|		итWMSЗадачиТСД.ДокументОснование,
		|		итWMSЗадачиТСД.ИдЗадачи,
		|		итWMSЗадачиТСД.Состояние) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|		ПО ВложенныйЗапрос.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSСтрокиЗадачТСД.идСтроки,
		|	ВложенныйЗапрос.ДокументОснование,
		|	ВложенныйЗапрос.ИдЗадачи,
		|	ВложенныйЗапрос.Состояние
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSНаборкаТовары.Ссылка КАК ДокументОснование,
		|	итWMSНаборкаТовары.Номенклатура КАК Номенклатура,
		|	итWMSНаборкаТовары.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итWMSНаборкаТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	итWMSНаборкаТовары.СерияНоменклатуры.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	итWMSНаборкаТовары.ЯчейкаПикинга КАК ЯчейкаПикинга,
		|	СУММА(итWMSНаборкаТовары.КоличествоФакт) КАК КоличествоФакт,
		|	МАКСИМУМ(итWMSНаборкаТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете) КАК КоличествоНаПаллете,
		|	МАКСИМУМ(итWMSНаборкаТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоВСлое) КАК КоличествоВСлое,
		|	МАКСИМУМ(итWMSНаборкаТовары.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент) КАК КоличествоВКоробе,
		|	итWMSНаборкаТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
		|	итWMSНаборкаТовары.Ссылка.Контрагент КАК Контрагент,
		|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
		|	итWMSНаборкаТовары.ЯчейкаОтправитель,
		|	итWMSНаборкаТовары.ИдентификаторСтроки,
		|	итWMSНаборкаТовары.Количество,
		|	ВтДанныеНаборок.Ссылка КАК Заказ,
		|	ВтДанныеНаборок.ДатаОтгрузки КАК ДатаОтгрузкиЗаказа
		|ПОМЕСТИТЬ ВтДанныеНаборки
		|ИЗ
		|	ВтДанныеНаборок КАК ВтДанныеНаборок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ РеальноеСостояниеЗадачДокумента КАК РеальноеСостояниеЗадачДокумента
		|			ПО итWMSНаборкаТовары.ИдентификаторСтроки = РеальноеСостояниеЗадачДокумента.идСтроки
		|				И итWMSНаборкаТовары.Ссылка = РеальноеСостояниеЗадачДокумента.ДокументОснование
		|		ПО ВтДанныеНаборок.Наборка = итWMSНаборкаТовары.Ссылка
		|ГДЕ
		|	итWMSНаборкаТовары.Ссылка.Проведен
		|	И ВЫБОР
		|			КОГДА итWMSНаборкаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихдокументов.Зарезервирован)
		|				ТОГДА итWMSНаборкаТовары.СостояниеЗадачи В (ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению), ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.ПустаяСсылка))
		|			ИНАЧЕ ЕСТЬNULL(РеальноеСостояниеЗадачДокумента.Состояние, итWMSНаборкаТовары.СостояниеЗадачи) В (ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению), ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполняется))
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSНаборкаТовары.Номенклатура,
		|	итWMSНаборкаТовары.СерияНоменклатуры,
		|	итWMSНаборкаТовары.ИдентификаторУпаковки,
		|	итWMSНаборкаТовары.СерияНоменклатуры.итПризнакПомарочногоУчета,
		|	итWMSНаборкаТовары.ЯчейкаПикинга,
		|	итWMSНаборкаТовары.ЯчейкаПолучатель,
		|	итWMSНаборкаТовары.Ссылка.Контрагент,
		|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
		|	итWMSНаборкаТовары.ЯчейкаОтправитель,
		|	итWMSНаборкаТовары.ИдентификаторСтроки,
		|	итWMSНаборкаТовары.Количество,
		|	итWMSНаборкаТовары.Ссылка,
		|	ВтДанныеНаборок.Ссылка,
		|	ВтДанныеНаборок.ДатаОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборки.ДокументОснование,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеНаборки.ИдентификаторСтроки) КАК КоличествоСтрок
		|ПОМЕСТИТЬ ВтКоличествоСтрокНаборки
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеНаборки.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеНаборки.ИдентификаторСтроки) КАК КоличествоСтрокПаллеты,
		|	ВтДанныеНаборки.ДокументОснование
		|ПОМЕСТИТЬ ВтКоличествоСтрокВПаллете
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеНаборки.ДокументОснование,
		|	ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ДокументОснование КАК ДокументОснование,
		|	СУММА(ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ВложенныйЗапрос.КоэффициентПаллетНаборки + 0.4999 КАК ЧИСЛО(15, 0))) < 1
		|				ТОГДА 1
		|			ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.КоэффициентПаллетНаборки + 0.4999 КАК ЧИСЛО(15, 0))
		|		КОНЕЦ) КАК КоэффициентПаллетНаборки
		|ПОМЕСТИТЬ КоличествоПаллетНаборкиПоКоэф
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВтДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|		СУММА(ВтДанныеНаборки.Количество / ВЫБОР
		|				КОГДА ЕСТЬNULL(ВтДанныеНаборки.КоличествоНаПаллете, 0) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(ВтДанныеНаборки.КоличествоНаПаллете, 0)
		|			КОНЕЦ) КАК КоэффициентПаллетНаборки
		|	ИЗ
		|		ВтДанныеНаборки КАК ВтДанныеНаборки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВтДанныеНаборки.ДокументОснование) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеНаборки.ЯчейкаОтправитель) КАК КоличествоЯчеек,
		|	ВтДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|	ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель
		|ПОМЕСТИТЬ КоличествоЯчеекНаборки
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеНаборки.ДокументОснование,
		|	ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ВложенныйЗапрос.КоличествоНаПаллете КАК КоличествоНаПаллете,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.ДокументОснование КАК ДокументОснование,
		|	ВложенныйЗапрос.ЯчейкаОтправитель,
		|	ВложенныйЗапрос.Количество
		|ПОМЕСТИТЬ ИнформацияПоНецелымПаллетымНаборки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВтДанныеНаборки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|		ВтДанныеНаборки.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
		|		СУММА(ВтДанныеНаборки.Количество) КАК Количество,
		|		МАКСИМУМ(ВтДанныеНаборки.КоличествоНаПаллете) КАК КоличествоНаПаллете,
		|		ВтДанныеНаборки.Номенклатура КАК Номенклатура,
		|		ВтДанныеНаборки.ДокументОснование КАК ДокументОснование
		|	ИЗ
		|		ВтДанныеНаборки КАК ВтДанныеНаборки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВтДанныеНаборки.ИдентификаторУпаковки,
		|		ВтДанныеНаборки.Номенклатура,
		|		ВтДанныеНаборки.ДокументОснование,
		|		ВтДанныеНаборки.ЯчейкаОтправитель) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Количество <> ВложенныйЗапрос.КоличествоНаПаллете
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|	ВтДанныеНаборки.Номенклатура КАК Номенклатура,
		|	ВтДанныеНаборки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтДанныеНаборки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ВтДанныеНаборки.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	ВтДанныеНаборки.КоличествоНаПаллете КАК КоличествоНаПаллете,
		|	ВтДанныеНаборки.КоличествоВСлое КАК КоличествоВСлое,
		|	ВтДанныеНаборки.КоличествоВКоробе КАК КоличествоВКоробе,
		|	ВЫБОР
		|		КОГДА НЕ ИнформацияПоНецелымПаллетымНаборки.ИдентификаторУпаковки ЕСТЬ NULL
		|			ТОГДА ВЫРАЗИТЬ(ВтДанныеНаборки.Количество / ЕСТЬNULL(ВтДанныеНаборки.КоличествоВКоробе, 1) - 0.49999 КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоВнепаллетныхКоробов,
		|	1 / ВтКоличествоСтрокВПаллете.КоличествоСтрокПаллеты КАК КоэффициентПаллеты,
		|	ВтДанныеНаборки.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
		|	ВтДанныеНаборки.Контрагент КАК Контрагент,
		|	1 / ВтКоличествоСтрокВПаллете.КоличествоСтрокПаллеты КАК КоэффициентЗадачи,
		|	ВЫБОР
		|		КОГДА НЕ ИнформацияПоНецелымПаллетымНаборки.ИдентификаторУпаковки ЕСТЬ NULL
		|			ТОГДА ВЫРАЗИТЬ((ВтДанныеНаборки.Количество / ЕСТЬNULL(ВтДанныеНаборки.КоличествоВКоробе, 1) - (ВЫРАЗИТЬ(ВтДанныеНаборки.Количество / ЕСТЬNULL(ВтДанныеНаборки.КоличествоВКоробе, 1) - 0.49999 КАК ЧИСЛО(15, 0)))) * ВтДанныеНаборки.КоличествоВКоробе + 0.49999 КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоВнеКоробочныхБутылок,
		|	КоличествоЯчеекНаборки.КоличествоЯчеек КАК КоличествоЯчеекЗадачи,
		|	ВтКоличествоСтрокВПаллете.КоличествоСтрокПаллеты КАК КоличествоСтрокЗадачи,
		|	ВтДанныеНаборки.ЯчейкаОтправитель,
		|	ВтДанныеНаборки.Количество,
		|	ВтДанныеНаборки.ДатаОтгрузкиЗаказа,
		|	ВтДанныеНаборки.Заказ
		|ПОМЕСТИТЬ ВтПодготовленныеДанныеНаборки
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИнформацияПоНецелымПаллетымНаборки КАК ИнформацияПоНецелымПаллетымНаборки
		|		ПО ВтДанныеНаборки.ИдентификаторУпаковки = ИнформацияПоНецелымПаллетымНаборки.ИдентификаторУпаковки
		|			И ВтДанныеНаборки.Номенклатура = ИнформацияПоНецелымПаллетымНаборки.Номенклатура
		|			И ВтДанныеНаборки.ДокументОснование = ИнформацияПоНецелымПаллетымНаборки.ДокументОснование
		|			И ВтДанныеНаборки.ЯчейкаОтправитель = ИнформацияПоНецелымПаллетымНаборки.ЯчейкаОтправитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоЯчеекНаборки КАК КоличествоЯчеекНаборки
		|		ПО ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель = КоличествоЯчеекНаборки.ИдентификаторУпаковкиПолучатель
		|			И ВтДанныеНаборки.ДокументОснование = КоличествоЯчеекНаборки.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоличествоСтрокВПаллете КАК ВтКоличествоСтрокВПаллете
		|		ПО ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель = ВтКоличествоСтрокВПаллете.ИдентификаторУпаковкиПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтПодготовленныеДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|	ВтПодготовленныеДанныеНаборки.Номенклатура КАК Номенклатура,
		|	ВтПодготовленныеДанныеНаборки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтПодготовленныеДанныеНаборки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	ВтПодготовленныеДанныеНаборки.КоличествоНаПаллете КАК КоличествоНаПаллете,
		|	ВтПодготовленныеДанныеНаборки.КоличествоВСлое КАК КоличествоВСлое,
		|	ВтПодготовленныеДанныеНаборки.КоличествоВКоробе КАК КоличествоВКоробе,
		|	ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов КАК КоличествоВнепаллетныхКоробов,
		|	ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета
		|			ТОГДА ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов * &СтоимостьКоробаПМУ
		|		ИНАЧЕ ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов * &СтоимостьКороба
		|	КОНЕЦ КАК СуммаКоробов,
		|	КоличествоПаллетНаборкиПоКоэф.КоэффициентПаллетНаборки * &СтоимостьПаллетыНаборки / ВтКоличествоСтрокНаборки.КоличествоСтрок КАК СуммаПосещения,
		|	ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета
		|			ТОГДА ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов * &СтоимостьКоробаПМУ
		|		ИНАЧЕ ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов * &СтоимостьКороба
		|	КОНЕЦ + КоличествоПаллетНаборкиПоКоэф.КоэффициентПаллетНаборки * &СтоимостьПаллетыНаборки / ВтКоличествоСтрокНаборки.КоличествоСтрок + ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета
		|			ТОГДА ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиПМУНаборка
		|		ИНАЧЕ ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиНаборка
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.Контрагент.ит_WMS_ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА &СтоимостьНаборкиРозница / ЕСТЬNULL(ВтКоличествоСтрокНаборки.КоличествоСтрок, 1)
		|		ИНАЧЕ &СтоимостьНаборки / ЕСТЬNULL(ВтКоличествоСтрокНаборки.КоличествоСтрок, 1)
		|	КОНЕЦ + (ВтПодготовленныеДанныеНаборки.КоличествоЯчеекЗадачи - 1) * &СтоимостьЗаПосещениеЯчейкиНаборка * ВтПодготовленныеДанныеНаборки.КоэффициентЗадачи КАК Всего,
		|	ВтПодготовленныеДанныеНаборки.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
		|	ВтПодготовленныеДанныеНаборки.Контрагент КАК Контрагент,
		|	ВтПодготовленныеДанныеНаборки.КоэффициентЗадачи КАК КоэффициентЗадачи,
		|	ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок КАК КоличествоВнеКоробочныхБутылок,
		|	ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета
		|			ТОГДА ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиПМУНаборка
		|		ИНАЧЕ ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиНаборка
		|	КОНЕЦ КАК СуммаБутылок,
		|	ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.Контрагент.ит_WMS_ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА &СтоимостьНаборкиРозница / ЕСТЬNULL(ВтКоличествоСтрокНаборки.КоличествоСтрок, 1)
		|		ИНАЧЕ &СтоимостьНаборки / ЕСТЬNULL(ВтКоличествоСтрокНаборки.КоличествоСтрок, 1)
		|	КОНЕЦ КАК СтоимостьДокумента,
		|	ВтПодготовленныеДанныеНаборки.КоэффициентПаллеты КАК КоэффициентПаллеты,
		|	ВтПодготовленныеДанныеНаборки.ЯчейкаОтправитель,
		|	ВтПодготовленныеДанныеНаборки.Количество,
		|	ВтПодготовленныеДанныеНаборки.ДатаОтгрузкиЗаказа,
		|	ВтПодготовленныеДанныеНаборки.Заказ
		|ПОМЕСТИТЬ ИтоговыеДанныеНаборок
		|ИЗ
		|	ВтПодготовленныеДанныеНаборки КАК ВтПодготовленныеДанныеНаборки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоличествоСтрокНаборки КАК ВтКоличествоСтрокНаборки
		|		ПО ВтПодготовленныеДанныеНаборки.ДокументОснование = ВтКоличествоСтрокНаборки.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоПаллетНаборкиПоКоэф КАК КоличествоПаллетНаборкиПоКоэф
		|		ПО ВтПодготовленныеДанныеНаборки.ДокументОснование = КоличествоПаллетНаборкиПоКоэф.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыеДанныеНаборок.ДокументОснование,
		|	СУММА(ИтоговыеДанныеНаборок.Всего) КАК Всего,
		|	ИтоговыеДанныеНаборок.ДатаОтгрузкиЗаказа
		|ПОМЕСТИТЬ РассчетВсегоЗаЗаказ
		|ИЗ
		|	ИтоговыеДанныеНаборок КАК ИтоговыеДанныеНаборок
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтоговыеДанныеНаборок.ДокументОснование,
		|	ИтоговыеДанныеНаборок.ДатаОтгрузкиЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборки.ДокументОснование
		|ПОМЕСТИТЬ НаборкиКОтбору
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеНаборки.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSПеремещениеТовары.Номенклатура,
		|	итWMSПеремещениеТовары.Характеристика,
		|	итWMSПеремещениеТовары.СерияНоменклатуры,
		|	итWMSПеремещениеТовары.Качество,
		|	итWMSПеремещениеТовары.ДатаРозлива,
		|	итWMSПеремещениеТовары.Количество,
		|	итWMSПеремещениеТовары.ЯчейкаОтправитель,
		|	итWMSПеремещениеТовары.ЯчейкаПолучатель,
		|	ВложенныйЗапрос.Состояние,
		|	итWMSПеремещениеТовары.ИдентификаторУпаковки,
		|	итWMSПеремещениеТовары.ИдентификаторСтроки,
		|	итWMSПеремещениеТовары.Ссылка,
		|	итWMSПеремещениеТовары.ЯчейкаОтправитель.Ярус,
		|	итWMSПеремещениеТовары.ЯчейкаПолучатель.Ярус,
		|	итWMSПеремещениеТовары.СерияНоменклатуры.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	итWMSПеремещениеТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете КАК итКоличествоНаПаллете,
		|	НаборкиКОтбору.ДокументОснование
		|ПОМЕСТИТЬ ВтДанныеПеремещения
		|ИЗ
		|	НаборкиКОтбору КАК НаборкиКОтбору
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПеремещение.Товары КАК итWMSПеремещениеТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				итWMSСтрокиЗадачТСД.идСтроки КАК идСтроки,
		|				ВложенныйЗапрос.ИдЗадачи КАК ИдЗадачи,
		|				ВложенныйЗапрос.Состояние КАК Состояние,
		|				ВложенныйЗапрос.Ссылка КАК Ссылка
		|			ИЗ
		|				(ВЫБРАТЬ
		|					итWMSЗадачиТСД.ИдЗадачи КАК ИдЗадачи,
		|					итWMSЗадачиТСД.Состояние КАК Состояние,
		|					итWMSПеремещение.Ссылка КАК Ссылка
		|				ИЗ
		|					НаборкиКОтбору КАК НаборкиКОтбору
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПеремещение КАК итWMSПеремещение
		|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|							ПО итWMSПеремещение.Ссылка = итWMSЗадачиТСД.ДокументОснование
		|						ПО НаборкиКОтбору.ДокументОснование = итWMSПеремещение.итОснование
		|							И (итWMSПеремещение.ПеремещениеВПикинг)
		|				ГДЕ
		|					итWMSПеремещение.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(перечисление.итwmsСтатусыСкладскихДокументов.Распределяется), ЗНАЧЕНИЕ(перечисление.итwmsСтатусыСкладскихДокументов.Распределен))
		|					И итWMSПеремещение.Ссылка.Проведен) КАК ВложенныйЗапрос
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|					ПО ВложенныйЗапрос.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи) КАК ВложенныйЗапрос
		|			ПО итWMSПеремещениеТовары.Ссылка = ВложенныйЗапрос.Ссылка
		|				И итWMSПеремещениеТовары.ИдентификаторСтроки = ВложенныйЗапрос.идСтроки
		|		ПО (итWMSПеремещениеТовары.Ссылка.ПеремещениеВПикинг)
		|			И НаборкиКОтбору.ДокументОснование = итWMSПеремещениеТовары.Ссылка.итОснование
		|ГДЕ
		|	итWMSПеремещениеТовары.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(перечисление.итwmsСтатусыСкладскихДокументов.Зарезервирован), ЗНАЧЕНИЕ(перечисление.итwmsСтатусыСкладскихДокументов.Распределяется), ЗНАЧЕНИЕ(перечисление.итwmsСтатусыСкладскихДокументов.Распределен))
		|	И итWMSПеремещениеТовары.Ссылка.Проведен
		|	И ВЫБОР
		|			КОГДА итWMSПеремещениеТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихдокументов.Зарезервирован)
		|				ТОГДА итWMSПеремещениеТовары.СостояниеЗадачи В (ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению), ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.ПустаяСсылка))
		|			ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.Состояние, итWMSПеремещениеТовары.СостояниеЗадачи) В (ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению), ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполняется))
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеПеремещения.ИдентификаторУпаковки,
		|	ВтДанныеПеремещения.ЯчейкаОтправитель,
		|	ВтДанныеПеремещения.ЯчейкаПолучатель,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеПеремещения.ИдентификаторСтроки) КАК КоличествоСтрок,
		|	ВтДанныеПеремещения.Ссылка
		|ПОМЕСТИТЬ СтрокВЗадаче
		|ИЗ
		|	ВтДанныеПеремещения КАК ВтДанныеПеремещения
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеПеремещения.ИдентификаторУпаковки,
		|	ВтДанныеПеремещения.ЯчейкаОтправитель,
		|	ВтДанныеПеремещения.ЯчейкаПолучатель,
		|	ВтДанныеПеремещения.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеПеремещения.Номенклатура,
		|	ВтДанныеПеремещения.Характеристика,
		|	ВтДанныеПеремещения.СерияНоменклатуры,
		|	ВтДанныеПеремещения.Качество,
		|	ВтДанныеПеремещения.ДатаРозлива,
		|	ВтДанныеПеремещения.Количество,
		|	ВтДанныеПеремещения.ЯчейкаОтправитель,
		|	ВтДанныеПеремещения.ЯчейкаПолучатель,
		|	ВтДанныеПеремещения.Состояние,
		|	ВтДанныеПеремещения.ИдентификаторУпаковки,
		|	ВтДанныеПеремещения.ИдентификаторСтроки,
		|	ВтДанныеПеремещения.Ссылка,
		|	ВЫБОР
		|		КОГДА ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> ""1""
		|				И ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> ""0""
		|				И ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> ""00""
		|				И ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> """"
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ / СтрокВЗадаче.КоличествоСтрок * &СтоимостьСпуска КАК Спуск,
		|	ВЫБОР
		|		КОГДА ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> ""1""
		|				И ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> ""0""
		|				И ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> ""00""
		|				И ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> """"
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ / СтрокВЗадаче.КоличествоСтрок * &СтоимостьПодъема КАК Подъем,
		|	ВЫБОР
		|		КОГДА ВтДанныеПеремещения.итПризнакПомарочногоУчета
		|				И ВтДанныеПеремещения.Количество < ВтДанныеПеремещения.итКоличествоНаПаллете
		|			ТОГДА 1 / СтрокВЗадаче.КоличествоСтрок * &СтоимостьПМУПеремещения
		|		ИНАЧЕ 1 / СтрокВЗадаче.КоличествоСтрок * &СтоимостьПеремещения
		|	КОНЕЦ КАК Перемещение,
		|	ВЫБОР
		|		КОГДА ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> ""1""
		|				И ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> ""0""
		|				И ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> ""00""
		|				И ВтДанныеПеремещения.ЯчейкаОтправительЯрус <> """"
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ / СтрокВЗадаче.КоличествоСтрок * &СтоимостьСпуска + ВЫБОР
		|		КОГДА ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> ""1""
		|				И ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> ""0""
		|				И ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> ""00""
		|				И ВтДанныеПеремещения.ЯчейкаПолучательЯрус <> """"
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ / СтрокВЗадаче.КоличествоСтрок * &СтоимостьПодъема + ВЫБОР
		|		КОГДА ВтДанныеПеремещения.итПризнакПомарочногоУчета
		|				И ВтДанныеПеремещения.Количество < ВтДанныеПеремещения.итКоличествоНаПаллете
		|			ТОГДА 1 / СтрокВЗадаче.КоличествоСтрок * &СтоимостьПМУПеремещения
		|		ИНАЧЕ 1 / СтрокВЗадаче.КоличествоСтрок * &СтоимостьПеремещения
		|	КОНЕЦ КАК Всего,
		|	ВтДанныеПеремещения.ДокументОснование КАК Наборка
		|ПОМЕСТИТЬ ВтПеремещениеПодготовленныеДанные
		|ИЗ
		|	ВтДанныеПеремещения КАК ВтДанныеПеремещения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокВЗадаче КАК СтрокВЗадаче
		|		ПО ВтДанныеПеремещения.Ссылка = СтрокВЗадаче.Ссылка
		|			И ВтДанныеПеремещения.ИдентификаторУпаковки = СтрокВЗадаче.ИдентификаторУпаковки
		|			И ВтДанныеПеремещения.ЯчейкаОтправитель = СтрокВЗадаче.ЯчейкаОтправитель
		|			И ВтДанныеПеремещения.ЯчейкаПолучатель = СтрокВЗадаче.ЯчейкаПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтПеремещениеПодготовленныеДанные.Наборка,
		|	ВтПеремещениеПодготовленныеДанные.Ссылка,
		|	СУММА(ВтПеремещениеПодготовленныеДанные.Всего) КАК Всего
		|ПОМЕСТИТЬ ИтогоПоПеремещению
		|ИЗ
		|	ВтПеремещениеПодготовленныеДанные КАК ВтПеремещениеПодготовленныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтПеремещениеПодготовленныеДанные.Наборка,
		|	ВтПеремещениеПодготовленныеДанные.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РассчетВсегоЗаЗаказ.ДокументОснование,
		|	ВЫРАЗИТЬ(РассчетВсегоЗаЗаказ.Всего + ЕСТЬNULL(ИтогоПоПеремещению.Всего, 0) КАК ЧИСЛО(15, 0)) КАК Всего,
		|	РассчетВсегоЗаЗаказ.ДатаОтгрузкиЗаказа,
		|	ДОБАВИТЬКДАТЕ(РассчетВсегоЗаЗаказ.ДатаОтгрузкиЗаказа, СЕКУНДА, -(РассчетВсегоЗаЗаказ.Всего + ЕСТЬNULL(ИтогоПоПеремещению.Всего, 0))) КАК ДатаОтгрузкиЗаМинусомВремениНабора,
		|	РАЗНОСТЬДАТ(&ДатаТекущая, ДОБАВИТЬКДАТЕ(РассчетВсегоЗаЗаказ.ДатаОтгрузкиЗаказа, СЕКУНДА, -(РассчетВсегоЗаЗаказ.Всего + ЕСТЬNULL(ИтогоПоПеремещению.Всего, 0))), ЧАС) КАК ДоОтгрузкиСУчетомВремениНаборки,
		|	ДОБАВИТЬКДАТЕ(&ДатаТекущая, СЕКУНДА, РассчетВсегоЗаЗаказ.Всего + ЕСТЬNULL(ИтогоПоПеремещению.Всего, 0)) КАК ПланируемаяДатаЗавершенияДокумента,
		|	НЕ ИтогоПоПеремещению.Ссылка ЕСТЬ NULL КАК НеВыполненноеПеремещение
		|ИЗ
		|	РассчетВсегоЗаЗаказ КАК РассчетВсегоЗаЗаказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогоПоПеремещению КАК ИтогоПоПеремещению
		|		ПО РассчетВсегоЗаЗаказ.ДокументОснование = ИтогоПоПеремещению.Наборка
		|ГДЕ
		|	РАЗНОСТЬДАТ(&ДатаТекущая, ДОБАВИТЬКДАТЕ(РассчетВсегоЗаЗаказ.ДатаОтгрузкиЗаказа, СЕКУНДА, -РассчетВсегоЗаЗаказ.Всего), ЧАС) <= 8";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);	
	Запрос.УстановитьПараметр("ДатаТекущая",ДатаТекущая);
	Запрос.УстановитьПараметр("СтоимостьБутылкиНаборка", Значение.СтоимостьБутылкиНаборка);
	Запрос.УстановитьПараметр("СтоимостьБутылкиПМУНаборка", Значение.СтоимостьБутылкиПМУНаборка);
	Запрос.УстановитьПараметр("СтоимостьКороба", Значение.СтоимостьКороба);
	Запрос.УстановитьПараметр("СтоимостьКоробаПМУ", Значение.СтоимостьКоробаПМУ);
	Запрос.УстановитьПараметр("СтоимостьНаборки", Значение.СтоимостьНаборки);
	Запрос.УстановитьПараметр("СтоимостьЗаПосещениеЯчейкиНаборка",Значение.СтоимостьЗаПосещениеЯчейкиНаборка);
	Запрос.УстановитьПараметр("СтоимостьНаборкиРозница", Значение.СтоимостьНаборкиРозница);
	Запрос.УстановитьПараметр("СтоимостьПаллетыНаборки", Значение.СтоимостьПаллетыНаборки);
	
	Запрос.УстановитьПараметр("СтоимостьСпуска", Значение.СтоимостьСпуска);
	Запрос.УстановитьПараметр("СтоимостьПодъема",Значение.СтоимостьПодъема);
	Запрос.УстановитьПараметр("СтоимостьПМУПеремещения", Значение.СтоимостьПеремещенияПМУ);
	Запрос.УстановитьПараметр("СтоимостьПеремещения", Значение.СтоимостьПеремещения);


	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаписьJSON=новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
    ЗаписьJSON.ЗаписатьБезОбработки("{"+""""+"#Table"+""""+":{");
	Выборка=РезультатЗапроса.Выбрать();
	Счтечик=1;
	Пока Выборка.Следующий() Цикл
	Если Счтечик>1 Тогда 
		ЗаписьJSON.ЗаписатьБезОбработки(",");
	КонецЕсли;
	ЗаписьJSON.ЗаписатьБезОбработки(""""+"Row"+Счтечик+""""+":[");	
	ЗаписьJSON.ЗаписатьБезОбработки(""""+Строка(Выборка.ДокументОснование)+?(Выборка.НеВыполненноеПеремещение,"(Перемещение)","")+""""+","+
	""""+Строка(Выборка.ДатаОтгрузкиЗаказа)+""""+","+
	""""+Строка(Выборка.ПланируемаяДатаЗавершенияДокумента)+""""+","+
	""""+Строка(Выборка.ДоОтгрузкиСУчетомВремениНаборки)+""""+","+
	""""+Строка(Выборка.Всего)+"/"+Строка(Окр(Выборка.Всего/60,0))+""""+"]");
	Счтечик=Счтечик+1;	
	КонецЦикла;
    ЗаписьJSON.ЗаписатьБезОбработки("}
	|}");
    Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция РассчетСветофораПроверка()Экспорт 
	Цвет=1;
	ДатаТекущая=ТекущаяДата();
	ДатаНачала=ДатаТекущая-24*60*60;
	ДатаОкончания=ДатаТекущая+24*60*60;
    Значение=ЗагрузитьНастройкиИзХранилищаОбщихНастроек("итWMSМотивационныйОтчет","итWMSМотивационныйОтчет","итWMSМотивационныйОтчет");

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаценкиКА.Контрагент,
		|	НаценкиКА.ТипЗадачи,
		|	НаценкиКА.ЦенаЗаЗадачу
		|ПОМЕСТИТЬ НаценкаКА
		|ИЗ
		|	&НаценкиКА КАК НаценкиКА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)) КАК ДатаОтгрузки
		|ПОМЕСТИТЬ ВтДанныеЗаказов
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Проведен
		|	И ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ЗаказПокупателя.Выполнен
		|	И ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя <> ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
		|	И НЕ ЗаказПокупателя.Отгружен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеЗаказов.Ссылка КАК Ссылка,
		|	ВтДанныеЗаказов.ДатаОтгрузки КАК ДатаОтгрузки,
		|	итWMSНаборка.Ссылка КАК Наборка
		|ПОМЕСТИТЬ ВтДанныеНаборок
		|ИЗ
		|	ВтДанныеЗаказов КАК ВтДанныеЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
		|		ПО ВтДанныеЗаказов.Ссылка = итWMSНаборка.итОснование
		|			И (итWMSНаборка.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборок.Наборка
		|ПОМЕСТИТЬ НаборкиСПроверками
		|ИЗ
		|	ВтДанныеНаборок КАК ВтДанныеНаборок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПроверка.итОснования КАК итWMSПроверкаитОснования
		|		ПО ВтДанныеНаборок.Наборка = итWMSПроверкаитОснования.Документ
		|			И (итWMSПроверкаитОснования.Ссылка.Проведен)
		|ГДЕ
		|	итWMSПроверкаитОснования.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Выполнен), ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.ВыполненСОшибкой), ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Завершен))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборок.Наборка,
		|	итWMSПроверкаитОснования.Ссылка КАК Проверка,
		|	ВтДанныеНаборок.ДатаОтгрузки,
		|	ВтДанныеНаборок.Ссылка КАК Заказ
		|ПОМЕСТИТЬ НаборкиСПроверкамиВработе
		|ИЗ
		|	ВтДанныеНаборок КАК ВтДанныеНаборок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПроверка.итОснования КАК итWMSПроверкаитОснования
		|		ПО ВтДанныеНаборок.Наборка = итWMSПроверкаитОснования.Документ
		|			И (итWMSПроверкаитОснования.Ссылка.Проведен)
		|ГДЕ
		|	итWMSПроверкаитОснования.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Зарезервирован), ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Распределяется), ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Распределен))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ДокументОснование,
		|	ВложенныйЗапрос.ИдЗадачи,
		|	ВложенныйЗапрос.Состояние,
		|	итWMSСтрокиЗадачТСД.идСтроки
		|ПОМЕСТИТЬ РеальныеСостояниязадачПроверки
		|ИЗ
		|	(ВЫБРАТЬ
		|		итWMSЗадачиТСД.ДокументОснование КАК ДокументОснование,
		|		итWMSЗадачиТСД.ИдЗадачи КАК ИдЗадачи,
		|		итWMSЗадачиТСД.Состояние КАК Состояние
		|	ИЗ
		|		НаборкиСПроверкамиВработе КАК НаборкиСПроверкамиВработе
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|			ПО НаборкиСПроверкамиВработе.Проверка = итWMSЗадачиТСД.ДокументОснование
		|	
		|	СГРУППИРОВАТЬ ПО
		|		итWMSЗадачиТСД.ДокументОснование,
		|		итWMSЗадачиТСД.ИдЗадачи,
		|		итWMSЗадачиТСД.Состояние) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|		ПО ВложенныйЗапрос.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ДокументОснование,
		|	ВложенныйЗапрос.ИдЗадачи,
		|	ВложенныйЗапрос.Состояние,
		|	итWMSСтрокиЗадачТСД.идСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборкиСПроверкамиВработе.Заказ КАК Заказ,
		|	НаборкиСПроверкамиВработе.ДатаОтгрузки КАК ДатаОтгрузки,
		|	итWMSПроверкаТовары.ИдентификаторУпаковки,
		|	итWMSПроверкаТовары.ИдентификаторСтроки,
		|	итWMSПроверкаТовары.Номенклатура,
		|	итWMSПроверкаТовары.СерияНоменклатуры,
		|	итWMSПроверкаТовары.Ячейка,
		|	итWMSПроверкаТовары.Количество,
		|	итWMSПроверкаТовары.КоличествоФакт,
		|	итWMSПроверкаТовары.Ссылка,
		|	итWMSПроверкаТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете КАК итКоличествоНаПаллете,
		|	итWMSПроверкаТовары.СерияНоменклатуры.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	итWMSПроверкаТовары.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент КАК ВКоробе,
		|	итWMSПроверкаТовары.Ссылка.Контрагент,
		|	итWMSПроверкаТовары.Ссылка.Контрагент.ит_WMS_ВидСкладскойДеятельности КАК ВидСкладскойДеятельности
		|ПОМЕСТИТЬ ВтДанныеКРассчету
		|ИЗ
		|	НаборкиСПроверкамиВработе КАК НаборкиСПроверкамиВработе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПроверка.Товары КАК итWMSПроверкаТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ РеальныеСостояниязадачПроверки КАК РеальныеСостояниязадачПроверки
		|			ПО итWMSПроверкаТовары.ИдентификаторСтроки = РеальныеСостояниязадачПроверки.идСтроки
		|				И итWMSПроверкаТовары.Ссылка = РеальныеСостояниязадачПроверки.ДокументОснование
		|		ПО НаборкиСПроверкамиВработе.Проверка = итWMSПроверкаТовары.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА итWMSПроверкаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Зарезервирован)
		|				ТОГДА итWMSПроверкаТовары.СостояниеЗадачи В (ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.Квыполнению))
		|			ИНАЧЕ ЕСТЬNULL(РеальныеСостояниязадачПроверки.Состояние, итWMSПроверкаТовары.СостояниеЗадачи) В (ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.Квыполнению), ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.Выполняется))
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтДанныеНаборок.Ссылка,
		|	ВтДанныеНаборок.ДатаОтгрузки,
		|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
		|	итWMSНаборкаТовары.ИдентификаторСтроки,
		|	итWMSНаборкаТовары.Номенклатура,
		|	итWMSНаборкаТовары.СерияНоменклатуры,
		|	итWMSНаборкаТовары.ЯчейкаПолучатель,
		|	итWMSНаборкаТовары.Количество,
		|	итWMSНаборкаТовары.КоличествоФакт,
		|	итWMSНаборкаТовары.Ссылка,
		|	итWMSНаборкаТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете,
		|	итWMSНаборкаТовары.СерияНоменклатуры.итПризнакПомарочногоУчета,
		|	итWMSНаборкаТовары.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент,
		|	итWMSНаборкаТовары.Ссылка.Контрагент,
		|	итWMSНаборкаТовары.Ссылка.Контрагент.ит_WMS_ВидСкладскойДеятельности
		|ИЗ
		|	ВтДанныеНаборок КАК ВтДанныеНаборок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		|		ПО ВтДанныеНаборок.Наборка = итWMSНаборкаТовары.Ссылка
		|ГДЕ
		|	НЕ итWMSНаборкаТовары.Ссылка В
		|				(ВЫБРАТЬ
		|					НаборкиСПроверкамиВработе.Наборка
		|				ИЗ
		|					НаборкиСПроверкамиВработе КАК НаборкиСПроверкамиВработе)
		|	И НЕ итWMSНаборкаТовары.Ссылка В
		|				(ВЫБРАТЬ
		|					НаборкиСПроверками.Наборка
		|				ИЗ
		|					НаборкиСПроверками КАК НаборкиСПроверками)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеКРассчету.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеКРассчету.ИдентификаторСтроки) КАК СтрокВДокументе
		|ПОМЕСТИТЬ КоличествоСтрокВДокументе
		|ИЗ
		|	ВтДанныеКРассчету КАК ВтДанныеКРассчету
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеКРассчету.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеКРассчету.ИдентификаторУпаковки,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеКРассчету.ИдентификаторСтроки) КАК СтрокВПаллете,
		|	ВтДанныеКРассчету.Ссылка
		|ПОМЕСТИТЬ КоличествоСтрокВПаллете
		|ИЗ
		|	ВтДанныеКРассчету КАК ВтДанныеКРассчету
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеКРассчету.Ссылка,
		|	ВтДанныеКРассчету.ИдентификаторУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеКРассчету.Заказ,
		|	ВтДанныеКРассчету.ДатаОтгрузки,
		|	ВтДанныеКРассчету.ИдентификаторУпаковки,
		|	ВтДанныеКРассчету.ИдентификаторСтроки,
		|	ВтДанныеКРассчету.Номенклатура,
		|	ВтДанныеКРассчету.СерияНоменклатуры,
		|	ВтДанныеКРассчету.Ячейка,
		|	ВтДанныеКРассчету.Количество,
		|	ВтДанныеКРассчету.КоличествоФакт,
		|	ВтДанныеКРассчету.Ссылка,
		|	ВтДанныеКРассчету.итКоличествоНаПаллете,
		|	ВтДанныеКРассчету.итПризнакПомарочногоУчета,
		|	ВтДанныеКРассчету.ВКоробе,
		|	ВЫБОР
		|		КОГДА ВтДанныеКРассчету.итПризнакПомарочногоУчета
		|				И ВтДанныеКРассчету.Количество <> ВтДанныеКРассчету.итКоличествоНаПаллете
		|			ТОГДА ВЫРАЗИТЬ(ВтДанныеКРассчету.Количество / ЕСТЬNULL(ВтДанныеКРассчету.ВКоробе, 1) + 0.49999 КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоВнепаллетныхКоробов,
		|	1 / КоличествоСтрокВПаллете.СтрокВПаллете КАК КоэффициентЗадачи,
		|	ВЫБОР
		|		КОГДА ВтДанныеКРассчету.итПризнакПомарочногоУчета
		|				И ВтДанныеКРассчету.Количество <> ВтДанныеКРассчету.итКоличествоНаПаллете
		|			ТОГДА 0
		|		ИНАЧЕ 1 / КоличествоСтрокВПаллете.СтрокВПаллете
		|	КОНЕЦ КАК КоэффициентОбработкиНеПМУПаллеты,
		|	ВЫБОР
		|		КОГДА ВтДанныеКРассчету.Количество <> ВтДанныеКРассчету.итКоличествоНаПаллете
		|			ТОГДА 1 / КоличествоСтрокВПаллете.СтрокВПаллете
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоэффициентОплатыЗаОпалечивание,
		|	ВЫБОР
		|		КОГДА ВтДанныеКРассчету.итПризнакПомарочногоУчета
		|				И ВтДанныеКРассчету.Количество <> ВтДанныеКРассчету.итКоличествоНаПаллете
		|			ТОГДА ВЫРАЗИТЬ((ВтДанныеКРассчету.Количество / ЕСТЬNULL(ВтДанныеКРассчету.ВКоробе, 1) - (ВЫРАЗИТЬ(ВтДанныеКРассчету.Количество / ЕСТЬNULL(ВтДанныеКРассчету.ВКоробе, 1) - 0.49999 КАК ЧИСЛО(15, 0)))) * ВтДанныеКРассчету.ВКоробе + 0.49999 КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоВнеКоробочныхБутылок,
		|	ВтДанныеКРассчету.ВидСкладскойДеятельности,
		|	ВтДанныеКРассчету.Контрагент,
		|	КоличествоСтрокВДокументе.СтрокВДокументе,
		|	ЕСТЬNULL(НаценкаКА.ЦенаЗаЗадачу, 0) / КоличествоСтрокВПаллете.СтрокВПаллете КАК СуммаЗаКА
		|ПОМЕСТИТЬ ВтПроверкаПодготовленныеДанные
		|ИЗ
		|	ВтДанныеКРассчету КАК ВтДанныеКРассчету
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоСтрокВДокументе КАК КоличествоСтрокВДокументе
		|		ПО ВтДанныеКРассчету.Ссылка = КоличествоСтрокВДокументе.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоСтрокВПаллете КАК КоличествоСтрокВПаллете
		|		ПО ВтДанныеКРассчету.Ссылка = КоличествоСтрокВПаллете.Ссылка
		|			И ВтДанныеКРассчету.ИдентификаторУпаковки = КоличествоСтрокВПаллете.ИдентификаторУпаковки
		|		ЛЕВОЕ СОЕДИНЕНИЕ НаценкаКА КАК НаценкаКА
		|		ПО ВтДанныеКРассчету.Контрагент = НаценкаКА.Контрагент
		|			И (НаценкаКА.ТипЗадачи = ЗНАЧЕНИЕ(Перечисление.итwmsТипыЗадачТСД.Проверка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтПроверкаПодготовленныеДанные.Заказ,
		|	ВтПроверкаПодготовленныеДанные.ДатаОтгрузки,
		|	ВтПроверкаПодготовленныеДанные.ИдентификаторУпаковки,
		|	ВтПроверкаПодготовленныеДанные.ИдентификаторСтроки,
		|	ВтПроверкаПодготовленныеДанные.Номенклатура,
		|	ВтПроверкаПодготовленныеДанные.СерияНоменклатуры,
		|	ВтПроверкаПодготовленныеДанные.Ячейка,
		|	ВтПроверкаПодготовленныеДанные.Количество,
		|	ВтПроверкаПодготовленныеДанные.КоличествоФакт,
		|	ВтПроверкаПодготовленныеДанные.Ссылка,
		|	ВтПроверкаПодготовленныеДанные.итКоличествоНаПаллете,
		|	ВтПроверкаПодготовленныеДанные.итПризнакПомарочногоУчета,
		|	ВтПроверкаПодготовленныеДанные.ВКоробе,
		|	ВтПроверкаПодготовленныеДанные.КоличествоВнепаллетныхКоробов,
		|	ВтПроверкаПодготовленныеДанные.КоэффициентЗадачи,
		|	ВтПроверкаПодготовленныеДанные.КоэффициентОбработкиНеПМУПаллеты,
		|	ВтПроверкаПодготовленныеДанные.КоэффициентОплатыЗаОпалечивание,
		|	ВтПроверкаПодготовленныеДанные.КоличествоВнеКоробочныхБутылок,
		|	ВтПроверкаПодготовленныеДанные.ВидСкладскойДеятельности,
		|	ВтПроверкаПодготовленныеДанные.Контрагент,
		|	ВтПроверкаПодготовленныеДанные.СтрокВДокументе,
		|	ВтПроверкаПодготовленныеДанные.КоличествоВнепаллетныхКоробов * &АгрегацияКоробов КАК СуммаКоробов,
		|	ВтПроверкаПодготовленныеДанные.КоэффициентЗадачи * &ФизическаяПроверка КАК СуммаПосещения,
		|	ВтПроверкаПодготовленныеДанные.КоэффициентОбработкиНеПМУПаллеты * &АгрегацияПаллеты КАК СуммаПроверкиПаллеты,
		|	ВЫБОР
		|		КОГДА ВтПроверкаПодготовленныеДанные.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА 0
		|		ИНАЧЕ ВтПроверкаПодготовленныеДанные.КоэффициентОплатыЗаОпалечивание * &Опалечивание
		|	КОНЕЦ КАК СуммаОпалечивания,
		|	ВтПроверкаПодготовленныеДанные.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиПроверка КАК СуммаБутылок,
		|	ВЫБОР
		|		КОГДА ВтПроверкаПодготовленныеДанные.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА &СтоимостьПроверкиРозница / ЕСТЬNULL(ВтПроверкаПодготовленныеДанные.СтрокВДокументе, 1)
		|		ИНАЧЕ &СтоимостьПроверки / ЕСТЬNULL(ВтПроверкаПодготовленныеДанные.СтрокВДокументе, 1)
		|	КОНЕЦ КАК СтоимостьДокумента,
		|	ВтПроверкаПодготовленныеДанные.СуммаЗаКА,
		|	ВтПроверкаПодготовленныеДанные.КоличествоВнепаллетныхКоробов * &АгрегацияКоробов + ВтПроверкаПодготовленныеДанные.КоэффициентЗадачи * &ФизическаяПроверка + ВтПроверкаПодготовленныеДанные.КоэффициентОбработкиНеПМУПаллеты * &АгрегацияПаллеты + ВЫБОР
		|		КОГДА ВтПроверкаПодготовленныеДанные.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА 0
		|		ИНАЧЕ ВтПроверкаПодготовленныеДанные.КоэффициентОплатыЗаОпалечивание * &Опалечивание
		|	КОНЕЦ + ВтПроверкаПодготовленныеДанные.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиПроверка + ВЫБОР
		|		КОГДА ВтПроверкаПодготовленныеДанные.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА &СтоимостьПроверкиРозница / ЕСТЬNULL(ВтПроверкаПодготовленныеДанные.СтрокВДокументе, 1)
		|		ИНАЧЕ &СтоимостьПроверки / ЕСТЬNULL(ВтПроверкаПодготовленныеДанные.СтрокВДокументе, 1)
		|	КОНЕЦ + ВтПроверкаПодготовленныеДанные.СуммаЗаКА КАК Всего
		|ПОМЕСТИТЬ ВиИтоговыеДанныеПроверка
		|ИЗ
		|	ВтПроверкаПодготовленныеДанные КАК ВтПроверкаПодготовленныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВиИтоговыеДанныеПроверка.Ссылка,
		|	ВиИтоговыеДанныеПроверка.ДатаОтгрузки,
		|	СУММА(ВиИтоговыеДанныеПроверка.Всего) КАК Всего
		|ПОМЕСТИТЬ ВсегоВремениНаДокумент
		|ИЗ
		|	ВиИтоговыеДанныеПроверка КАК ВиИтоговыеДанныеПроверка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВиИтоговыеДанныеПроверка.Ссылка,
		|	ВиИтоговыеДанныеПроверка.ДатаОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсегоВремениНаДокумент.Ссылка,
		|	ВсегоВремениНаДокумент.ДатаОтгрузки,
		|	ВсегоВремениНаДокумент.Всего,
		|	ДОБАВИТЬКДАТЕ(ВсегоВремениНаДокумент.ДатаОтгрузки, СЕКУНДА, -ВсегоВремениНаДокумент.Всего) КАК ВремяОтгрузкиЗаМинусомВремяПроверки,
		|	РАЗНОСТЬДАТ(&ДатаТекущая, ДОБАВИТЬКДАТЕ(ВсегоВремениНаДокумент.ДатаОтгрузки, СЕКУНДА, -ВсегоВремениНаДокумент.Всего), ЧАС) КАК ВремяДоОтгрузкиЗаМинусомВремениПроверки
		|ИЗ
		|	ВсегоВремениНаДокумент КАК ВсегоВремениНаДокумент
		|ГДЕ
		|	РАЗНОСТЬДАТ(&ДатаТекущая, ДОБАВИТЬКДАТЕ(ВсегоВремениНаДокумент.ДатаОтгрузки, СЕКУНДА, -ВсегоВремениНаДокумент.Всего), ЧАС) < 4";
	
	Запрос.УстановитьПараметр("НаценкиКА",Значение.ТаблицаНаценокПоКАВыгрузка);
	Запрос.УстановитьПараметр("АгрегацияКоробов", Значение.АгрегацияКоробов);
	Запрос.УстановитьПараметр("АгрегацияПаллеты", Значение.АгрегацияПаллеты);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаТекущая", ДатаТекущая);
	Запрос.УстановитьПараметр("Опалечивание", Значение.Опалечивание);
	Запрос.УстановитьПараметр("СтоимостьБутылкиПроверка", Значение.СтоимостьБутылкиПроверка);
	Запрос.УстановитьПараметр("СтоимостьПроверки", Значение.СтоимостьПроверки);
	Запрос.УстановитьПараметр("СтоимостьПроверкиРозница", Значение.СтоимостьПроверкиРозница);
	Запрос.УстановитьПараметр("ФизическаяПроверка", Значение.ФизическаяПроверка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СчетчикЖелтый=0;
	СчетчикКрасный=0;
	ТекущийСчетчик=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.ВремяДоОтгрузкиЗаМинусомВремениПроверки >2 и  ВыборкаДетальныеЗаписи.ВремяДоОтгрузкиЗаМинусомВремениПроверки <=4 Тогда
			Если Цвет<=2 Тогда 
				Цвет=2;
			КонецЕсли;
			СчетчикЖелтый=СчетчикЖелтый+1;
		иначе
			Цвет=3;
			СчетчикКрасный=СчетчикКрасный+1;
		КонецЕсли;	
	КонецЦикла;
	Если Цвет=2 Тогда 
		ТекущийСчетчик=СчетчикЖелтый;
	ИначеЕсли Цвет=3 Тогда 
		ТекущийСчетчик=СчетчикКрасный;
	КонецЕсли;
	ЗаписьJSON=новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
    ЗаписьJSON.ЗаписатьБезОбработки("{"+""""+"Colour"+""""+":"+""""+Строка(Цвет)+""""+","+""""+"Quantity"+""""+":"+""""+Строка(ТекущийСчетчик)+""""+"}");

	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция ДанныеСветофораПроверкаJSON() Экспорт 		
	ДатаТекущая=ТекущаяДата();
	ДатаНачала=ДатаТекущая-24*60*60;
	ДатаОкончания=ДатаТекущая+24*60*60;
    Значение=ЗагрузитьНастройкиИзХранилищаОбщихНастроек("итWMSМотивационныйОтчет","итWMSМотивационныйОтчет","итWMSМотивационныйОтчет");

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаценкиКА.Контрагент,
		|	НаценкиКА.ТипЗадачи,
		|	НаценкиКА.ЦенаЗаЗадачу
		|ПОМЕСТИТЬ НаценкаКА
		|ИЗ
		|	&НаценкиКА КАК НаценкиКА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)) КАК ДатаОтгрузки
		|ПОМЕСТИТЬ ВтДанныеЗаказов
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Проведен
		|	И ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ЗаказПокупателя.Выполнен
		|	И ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя <> ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
		|	И НЕ ЗаказПокупателя.Отгружен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеЗаказов.Ссылка КАК Ссылка,
		|	ВтДанныеЗаказов.ДатаОтгрузки КАК ДатаОтгрузки,
		|	итWMSНаборка.Ссылка КАК Наборка
		|ПОМЕСТИТЬ ВтДанныеНаборок
		|ИЗ
		|	ВтДанныеЗаказов КАК ВтДанныеЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
		|		ПО ВтДанныеЗаказов.Ссылка = итWMSНаборка.итОснование
		|			И (итWMSНаборка.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборок.Наборка
		|ПОМЕСТИТЬ НаборкиСПроверками
		|ИЗ
		|	ВтДанныеНаборок КАК ВтДанныеНаборок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПроверка.итОснования КАК итWMSПроверкаитОснования
		|		ПО ВтДанныеНаборок.Наборка = итWMSПроверкаитОснования.Документ
		|			И (итWMSПроверкаитОснования.Ссылка.Проведен)
		|ГДЕ
		|	итWMSПроверкаитОснования.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Выполнен), ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.ВыполненСОшибкой), ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Завершен))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборок.Наборка,
		|	итWMSПроверкаитОснования.Ссылка КАК Проверка,
		|	ВтДанныеНаборок.ДатаОтгрузки,
		|	ВтДанныеНаборок.Ссылка КАК Заказ
		|ПОМЕСТИТЬ НаборкиСПроверкамиВработе
		|ИЗ
		|	ВтДанныеНаборок КАК ВтДанныеНаборок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПроверка.итОснования КАК итWMSПроверкаитОснования
		|		ПО ВтДанныеНаборок.Наборка = итWMSПроверкаитОснования.Документ
		|			И (итWMSПроверкаитОснования.Ссылка.Проведен)
		|ГДЕ
		|	итWMSПроверкаитОснования.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Зарезервирован), ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Распределяется), ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Распределен))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ДокументОснование,
		|	ВложенныйЗапрос.ИдЗадачи,
		|	ВложенныйЗапрос.Состояние,
		|	итWMSСтрокиЗадачТСД.идСтроки
		|ПОМЕСТИТЬ РеальныеСостояниязадачПроверки
		|ИЗ
		|	(ВЫБРАТЬ
		|		итWMSЗадачиТСД.ДокументОснование КАК ДокументОснование,
		|		итWMSЗадачиТСД.ИдЗадачи КАК ИдЗадачи,
		|		итWMSЗадачиТСД.Состояние КАК Состояние
		|	ИЗ
		|		НаборкиСПроверкамиВработе КАК НаборкиСПроверкамиВработе
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|			ПО НаборкиСПроверкамиВработе.Проверка = итWMSЗадачиТСД.ДокументОснование
		|	
		|	СГРУППИРОВАТЬ ПО
		|		итWMSЗадачиТСД.ДокументОснование,
		|		итWMSЗадачиТСД.ИдЗадачи,
		|		итWMSЗадачиТСД.Состояние) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|		ПО ВложенныйЗапрос.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ДокументОснование,
		|	ВложенныйЗапрос.ИдЗадачи,
		|	ВложенныйЗапрос.Состояние,
		|	итWMSСтрокиЗадачТСД.идСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборкиСПроверкамиВработе.Заказ КАК Заказ,
		|	НаборкиСПроверкамиВработе.ДатаОтгрузки КАК ДатаОтгрузки,
		|	итWMSПроверкаТовары.ИдентификаторУпаковки,
		|	итWMSПроверкаТовары.ИдентификаторСтроки,
		|	итWMSПроверкаТовары.Номенклатура,
		|	итWMSПроверкаТовары.СерияНоменклатуры,
		|	итWMSПроверкаТовары.Ячейка,
		|	итWMSПроверкаТовары.Количество,
		|	итWMSПроверкаТовары.КоличествоФакт,
		|	итWMSПроверкаТовары.Ссылка,
		|	итWMSПроверкаТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете КАК итКоличествоНаПаллете,
		|	итWMSПроверкаТовары.СерияНоменклатуры.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	итWMSПроверкаТовары.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент КАК ВКоробе,
		|	итWMSПроверкаТовары.Ссылка.Контрагент,
		|	итWMSПроверкаТовары.Ссылка.Контрагент.ит_WMS_ВидСкладскойДеятельности КАК ВидСкладскойДеятельности
		|ПОМЕСТИТЬ ВтДанныеКРассчету
		|ИЗ
		|	НаборкиСПроверкамиВработе КАК НаборкиСПроверкамиВработе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПроверка.Товары КАК итWMSПроверкаТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ РеальныеСостояниязадачПроверки КАК РеальныеСостояниязадачПроверки
		|			ПО итWMSПроверкаТовары.ИдентификаторСтроки = РеальныеСостояниязадачПроверки.идСтроки
		|				И итWMSПроверкаТовары.Ссылка = РеальныеСостояниязадачПроверки.ДокументОснование
		|		ПО НаборкиСПроверкамиВработе.Проверка = итWMSПроверкаТовары.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА итWMSПроверкаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Зарезервирован)
		|				ТОГДА итWMSПроверкаТовары.СостояниеЗадачи В (ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.Квыполнению))
		|			ИНАЧЕ ЕСТЬNULL(РеальныеСостояниязадачПроверки.Состояние, итWMSПроверкаТовары.СостояниеЗадачи) В (ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.Квыполнению), ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.Выполняется))
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтДанныеНаборок.Ссылка,
		|	ВтДанныеНаборок.ДатаОтгрузки,
		|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
		|	итWMSНаборкаТовары.ИдентификаторСтроки,
		|	итWMSНаборкаТовары.Номенклатура,
		|	итWMSНаборкаТовары.СерияНоменклатуры,
		|	итWMSНаборкаТовары.ЯчейкаПолучатель,
		|	итWMSНаборкаТовары.Количество,
		|	итWMSНаборкаТовары.КоличествоФакт,
		|	итWMSНаборкаТовары.Ссылка,
		|	итWMSНаборкаТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете,
		|	итWMSНаборкаТовары.СерияНоменклатуры.итПризнакПомарочногоУчета,
		|	итWMSНаборкаТовары.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент,
		|	итWMSНаборкаТовары.Ссылка.Контрагент,
		|	итWMSНаборкаТовары.Ссылка.Контрагент.ит_WMS_ВидСкладскойДеятельности
		|ИЗ
		|	ВтДанныеНаборок КАК ВтДанныеНаборок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		|		ПО ВтДанныеНаборок.Наборка = итWMSНаборкаТовары.Ссылка
		|ГДЕ
		|	НЕ итWMSНаборкаТовары.Ссылка В
		|				(ВЫБРАТЬ
		|					НаборкиСПроверкамиВработе.Наборка
		|				ИЗ
		|					НаборкиСПроверкамиВработе КАК НаборкиСПроверкамиВработе)
		|	И НЕ итWMSНаборкаТовары.Ссылка В
		|				(ВЫБРАТЬ
		|					НаборкиСПроверками.Наборка
		|				ИЗ
		|					НаборкиСПроверками КАК НаборкиСПроверками)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеКРассчету.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеКРассчету.ИдентификаторСтроки) КАК СтрокВДокументе
		|ПОМЕСТИТЬ КоличествоСтрокВДокументе
		|ИЗ
		|	ВтДанныеКРассчету КАК ВтДанныеКРассчету
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеКРассчету.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеКРассчету.ИдентификаторУпаковки,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеКРассчету.ИдентификаторСтроки) КАК СтрокВПаллете,
		|	ВтДанныеКРассчету.Ссылка
		|ПОМЕСТИТЬ КоличествоСтрокВПаллете
		|ИЗ
		|	ВтДанныеКРассчету КАК ВтДанныеКРассчету
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеКРассчету.Ссылка,
		|	ВтДанныеКРассчету.ИдентификаторУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеКРассчету.Заказ,
		|	ВтДанныеКРассчету.ДатаОтгрузки,
		|	ВтДанныеКРассчету.ИдентификаторУпаковки,
		|	ВтДанныеКРассчету.ИдентификаторСтроки,
		|	ВтДанныеКРассчету.Номенклатура,
		|	ВтДанныеКРассчету.СерияНоменклатуры,
		|	ВтДанныеКРассчету.Ячейка,
		|	ВтДанныеКРассчету.Количество,
		|	ВтДанныеКРассчету.КоличествоФакт,
		|	ВтДанныеКРассчету.Ссылка,
		|	ВтДанныеКРассчету.итКоличествоНаПаллете,
		|	ВтДанныеКРассчету.итПризнакПомарочногоУчета,
		|	ВтДанныеКРассчету.ВКоробе,
		|	ВЫБОР
		|		КОГДА ВтДанныеКРассчету.итПризнакПомарочногоУчета
		|				И ВтДанныеКРассчету.Количество <> ВтДанныеКРассчету.итКоличествоНаПаллете
		|			ТОГДА ВЫРАЗИТЬ(ВтДанныеКРассчету.Количество / ЕСТЬNULL(ВтДанныеКРассчету.ВКоробе, 1) + 0.49999 КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоВнепаллетныхКоробов,
		|	1 / КоличествоСтрокВПаллете.СтрокВПаллете КАК КоэффициентЗадачи,
		|	ВЫБОР
		|		КОГДА ВтДанныеКРассчету.итПризнакПомарочногоУчета
		|				И ВтДанныеКРассчету.Количество <> ВтДанныеКРассчету.итКоличествоНаПаллете
		|			ТОГДА 0
		|		ИНАЧЕ 1 / КоличествоСтрокВПаллете.СтрокВПаллете
		|	КОНЕЦ КАК КоэффициентОбработкиНеПМУПаллеты,
		|	ВЫБОР
		|		КОГДА ВтДанныеКРассчету.Количество <> ВтДанныеКРассчету.итКоличествоНаПаллете
		|			ТОГДА 1 / КоличествоСтрокВПаллете.СтрокВПаллете
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоэффициентОплатыЗаОпалечивание,
		|	ВЫБОР
		|		КОГДА ВтДанныеКРассчету.итПризнакПомарочногоУчета
		|				И ВтДанныеКРассчету.Количество <> ВтДанныеКРассчету.итКоличествоНаПаллете
		|			ТОГДА ВЫРАЗИТЬ((ВтДанныеКРассчету.Количество / ЕСТЬNULL(ВтДанныеКРассчету.ВКоробе, 1) - (ВЫРАЗИТЬ(ВтДанныеКРассчету.Количество / ЕСТЬNULL(ВтДанныеКРассчету.ВКоробе, 1) - 0.49999 КАК ЧИСЛО(15, 0)))) * ВтДанныеКРассчету.ВКоробе + 0.49999 КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоВнеКоробочныхБутылок,
		|	ВтДанныеКРассчету.ВидСкладскойДеятельности,
		|	ВтДанныеКРассчету.Контрагент,
		|	КоличествоСтрокВДокументе.СтрокВДокументе,
		|	ЕСТЬNULL(НаценкаКА.ЦенаЗаЗадачу, 0) / КоличествоСтрокВПаллете.СтрокВПаллете КАК СуммаЗаКА
		|ПОМЕСТИТЬ ВтПроверкаПодготовленныеДанные
		|ИЗ
		|	ВтДанныеКРассчету КАК ВтДанныеКРассчету
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоСтрокВДокументе КАК КоличествоСтрокВДокументе
		|		ПО ВтДанныеКРассчету.Ссылка = КоличествоСтрокВДокументе.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоСтрокВПаллете КАК КоличествоСтрокВПаллете
		|		ПО ВтДанныеКРассчету.Ссылка = КоличествоСтрокВПаллете.Ссылка
		|			И ВтДанныеКРассчету.ИдентификаторУпаковки = КоличествоСтрокВПаллете.ИдентификаторУпаковки
		|		ЛЕВОЕ СОЕДИНЕНИЕ НаценкаКА КАК НаценкаКА
		|		ПО ВтДанныеКРассчету.Контрагент = НаценкаКА.Контрагент
		|			И (НаценкаКА.ТипЗадачи = ЗНАЧЕНИЕ(Перечисление.итwmsТипыЗадачТСД.Проверка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтПроверкаПодготовленныеДанные.Заказ,
		|	ВтПроверкаПодготовленныеДанные.ДатаОтгрузки,
		|	ВтПроверкаПодготовленныеДанные.ИдентификаторУпаковки,
		|	ВтПроверкаПодготовленныеДанные.ИдентификаторСтроки,
		|	ВтПроверкаПодготовленныеДанные.Номенклатура,
		|	ВтПроверкаПодготовленныеДанные.СерияНоменклатуры,
		|	ВтПроверкаПодготовленныеДанные.Ячейка,
		|	ВтПроверкаПодготовленныеДанные.Количество,
		|	ВтПроверкаПодготовленныеДанные.КоличествоФакт,
		|	ВтПроверкаПодготовленныеДанные.Ссылка,
		|	ВтПроверкаПодготовленныеДанные.итКоличествоНаПаллете,
		|	ВтПроверкаПодготовленныеДанные.итПризнакПомарочногоУчета,
		|	ВтПроверкаПодготовленныеДанные.ВКоробе,
		|	ВтПроверкаПодготовленныеДанные.КоличествоВнепаллетныхКоробов,
		|	ВтПроверкаПодготовленныеДанные.КоэффициентЗадачи,
		|	ВтПроверкаПодготовленныеДанные.КоэффициентОбработкиНеПМУПаллеты,
		|	ВтПроверкаПодготовленныеДанные.КоэффициентОплатыЗаОпалечивание,
		|	ВтПроверкаПодготовленныеДанные.КоличествоВнеКоробочныхБутылок,
		|	ВтПроверкаПодготовленныеДанные.ВидСкладскойДеятельности,
		|	ВтПроверкаПодготовленныеДанные.Контрагент,
		|	ВтПроверкаПодготовленныеДанные.СтрокВДокументе,
		|	ВтПроверкаПодготовленныеДанные.КоличествоВнепаллетныхКоробов * &АгрегацияКоробов КАК СуммаКоробов,
		|	ВтПроверкаПодготовленныеДанные.КоэффициентЗадачи * &ФизическаяПроверка КАК СуммаПосещения,
		|	ВтПроверкаПодготовленныеДанные.КоэффициентОбработкиНеПМУПаллеты * &АгрегацияПаллеты КАК СуммаПроверкиПаллеты,
		|	ВЫБОР
		|		КОГДА ВтПроверкаПодготовленныеДанные.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА 0
		|		ИНАЧЕ ВтПроверкаПодготовленныеДанные.КоэффициентОплатыЗаОпалечивание * &Опалечивание
		|	КОНЕЦ КАК СуммаОпалечивания,
		|	ВтПроверкаПодготовленныеДанные.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиПроверка КАК СуммаБутылок,
		|	ВЫБОР
		|		КОГДА ВтПроверкаПодготовленныеДанные.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА &СтоимостьПроверкиРозница / ЕСТЬNULL(ВтПроверкаПодготовленныеДанные.СтрокВДокументе, 1)
		|		ИНАЧЕ &СтоимостьПроверки / ЕСТЬNULL(ВтПроверкаПодготовленныеДанные.СтрокВДокументе, 1)
		|	КОНЕЦ КАК СтоимостьДокумента,
		|	ВтПроверкаПодготовленныеДанные.СуммаЗаКА,
		|	ВтПроверкаПодготовленныеДанные.КоличествоВнепаллетныхКоробов * &АгрегацияКоробов + ВтПроверкаПодготовленныеДанные.КоэффициентЗадачи * &ФизическаяПроверка + ВтПроверкаПодготовленныеДанные.КоэффициентОбработкиНеПМУПаллеты * &АгрегацияПаллеты + ВЫБОР
		|		КОГДА ВтПроверкаПодготовленныеДанные.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА 0
		|		ИНАЧЕ ВтПроверкаПодготовленныеДанные.КоэффициентОплатыЗаОпалечивание * &Опалечивание
		|	КОНЕЦ + ВтПроверкаПодготовленныеДанные.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиПроверка + ВЫБОР
		|		КОГДА ВтПроверкаПодготовленныеДанные.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА &СтоимостьПроверкиРозница / ЕСТЬNULL(ВтПроверкаПодготовленныеДанные.СтрокВДокументе, 1)
		|		ИНАЧЕ &СтоимостьПроверки / ЕСТЬNULL(ВтПроверкаПодготовленныеДанные.СтрокВДокументе, 1)
		|	КОНЕЦ + ВтПроверкаПодготовленныеДанные.СуммаЗаКА КАК Всего
		|ПОМЕСТИТЬ ВиИтоговыеДанныеПроверка
		|ИЗ
		|	ВтПроверкаПодготовленныеДанные КАК ВтПроверкаПодготовленныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВиИтоговыеДанныеПроверка.Ссылка,
		|	ВиИтоговыеДанныеПроверка.ДатаОтгрузки,
		|	СУММА(ВиИтоговыеДанныеПроверка.Всего) КАК Всего
		|ПОМЕСТИТЬ ВсегоВремениНаДокумент
		|ИЗ
		|	ВиИтоговыеДанныеПроверка КАК ВиИтоговыеДанныеПроверка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВиИтоговыеДанныеПроверка.Ссылка,
		|	ВиИтоговыеДанныеПроверка.ДатаОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсегоВремениНаДокумент.Ссылка,
		|	ВсегоВремениНаДокумент.ДатаОтгрузки,
		|	ВЫРАЗИТЬ(ВсегоВремениНаДокумент.Всего КАК ЧИСЛО(15, 0)) КАК Всего,
		|	ДОБАВИТЬКДАТЕ(ВсегоВремениНаДокумент.ДатаОтгрузки, СЕКУНДА, -ВсегоВремениНаДокумент.Всего) КАК ВремяОтгрузкиЗаМинусомВремяПроверки,
		|	РАЗНОСТЬДАТ(&ДатаТекущая, ДОБАВИТЬКДАТЕ(ВсегоВремениНаДокумент.ДатаОтгрузки, СЕКУНДА, -ВсегоВремениНаДокумент.Всего), ЧАС) КАК ВремяДоОтгрузкиЗаМинусомВремениПроверки,
		|	ДОБАВИТЬКДАТЕ(&ДатаТекущая, СЕКУНДА, ВсегоВремениНаДокумент.Всего) КАК ПланируемаяДатаЗавершенияДокумента
		|ИЗ
		|	ВсегоВремениНаДокумент КАК ВсегоВремениНаДокумент
		|ГДЕ
		|	РАЗНОСТЬДАТ(&ДатаТекущая, ДОБАВИТЬКДАТЕ(ВсегоВремениНаДокумент.ДатаОтгрузки, СЕКУНДА, -ВсегоВремениНаДокумент.Всего), ЧАС) < 4";
	
	Запрос.УстановитьПараметр("НаценкиКА",Значение.ТаблицаНаценокПоКАВыгрузка);
	Запрос.УстановитьПараметр("АгрегацияКоробов", Значение.АгрегацияКоробов);
	Запрос.УстановитьПараметр("АгрегацияПаллеты", Значение.АгрегацияПаллеты);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаТекущая", ДатаТекущая);
	Запрос.УстановитьПараметр("Опалечивание", Значение.Опалечивание);
	Запрос.УстановитьПараметр("СтоимостьБутылкиПроверка", Значение.СтоимостьБутылкиПроверка);
	Запрос.УстановитьПараметр("СтоимостьПроверки", Значение.СтоимостьПроверки);
	Запрос.УстановитьПараметр("СтоимостьПроверкиРозница", Значение.СтоимостьПроверкиРозница);
	Запрос.УстановитьПараметр("ФизическаяПроверка", Значение.ФизическаяПроверка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаписьJSON=новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
    ЗаписьJSON.ЗаписатьБезОбработки("{"+""""+"#Table"+""""+":{");
	Выборка=РезультатЗапроса.Выбрать();
	Счтечик=1;
	Пока Выборка.Следующий() Цикл
	Если Счтечик>1 Тогда 
		ЗаписьJSON.ЗаписатьБезОбработки(",");
	КонецЕсли;
	ЗаписьJSON.ЗаписатьБезОбработки(""""+"Row"+Счтечик+""""+":[");	
	ЗаписьJSON.ЗаписатьБезОбработки(""""+Строка(Выборка.Ссылка)+""""+","+
	""""+Строка(Выборка.ДатаОтгрузки)+""""+","+
	""""+Строка(Выборка.ПланируемаяДатаЗавершенияДокумента)+""""+","+
	""""+Строка(Выборка.ВремяДоОтгрузкиЗаМинусомВремениПроверки)+""""+","+
	""""+Строка(Выборка.Всего)+"/"+Строка(Окр(Выборка.Всего/60,0))+""""+"]");
	Счтечик=Счтечик+1;	
	КонецЦикла;
    ЗаписьJSON.ЗаписатьБезОбработки("}
	|}");
    Возврат ЗаписьJSON.Закрыть();


	КонецФункции
	
Функция РассчетСветофораОтгрузка() Экспорт 
	Цвет=1;
	
	ДатаТекущая=ТекущаяДата();
	ДатаНачала=ДатаТекущая-24*60*60;
	ДатаОкончания=ДатаТекущая+24*60*60;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя > ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ДЕНЬ, 1), ЧАС, ЧАС(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя))
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя))
	|	КОНЕЦ КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ВтДанныеЗаказов
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Проведен
	|	И ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаказПокупателя.Выполнен
	|	И ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя <> ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
	|	И НЕ ЗаказПокупателя.Отгружен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеЗаказов.Ссылка КАК Ссылка,
	|	ВтДанныеЗаказов.ДатаОтгрузки КАК ДатаОтгрузки,
	|	РАЗНОСТЬДАТ(ВтДанныеЗаказов.ДатаОтгрузки, &ДатаТекущая, МИНУТА) КАК ВремяОпоздания
	|ПОМЕСТИТЬ ВтДанныеПодготовка
	|ИЗ
	|	ВтДанныеЗаказов КАК ВтДанныеЗаказов
	|ГДЕ
	|	РАЗНОСТЬДАТ(ВтДанныеЗаказов.ДатаОтгрузки, &ДатаТекущая, МИНУТА) > 5
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(итМаршрутизацияДокументыПодбора.Ссылка, ВтДанныеПодготовка.Ссылка) КАК Ссылка,
	|	ВтДанныеПодготовка.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВтДанныеПодготовка.ВремяОпоздания КАК ВремяОпоздания
	|ИЗ
	|	ВтДанныеПодготовка КАК ВтДанныеПодготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК итМаршрутизацияДокументыПодбора
	|		ПО ВтДанныеПодготовка.Ссылка = итМаршрутизацияДокументыПодбора.Заказ
	|			И (итМаршрутизацияДокументыПодбора.Ссылка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(итМаршрутизацияДокументыПодбора.Ссылка, ВтДанныеПодготовка.Ссылка),
	|	ВтДанныеПодготовка.ДатаОтгрузки,
	|	ВтДанныеПодготовка.ВремяОпоздания";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаТекущая",ДатаТекущая);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СчетчикЖелтый=0;
	СчетчикКрасный=0;
	ТекущийСчетчик=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ВремяОпоздания >5 и  ВыборкаДетальныеЗаписи.ВремяОпоздания <=60 Тогда
			Если Цвет<=2 Тогда 
				Цвет=2;
			КонецЕсли;
			СчетчикЖелтый=СчетчикЖелтый+1;
		иначе
			Цвет=3;
			СчетчикКрасный=СчетчикКрасный+1;
		КонецЕсли;	
	КонецЦикла;
	Если Цвет=2 Тогда 
		ТекущийСчетчик=СчетчикЖелтый;
	ИначеЕсли Цвет=3 Тогда 
		ТекущийСчетчик=СчетчикКрасный;
	КонецЕсли;
	ЗаписьJSON=новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
    ЗаписьJSON.ЗаписатьБезОбработки("{"+""""+"Colour"+""""+":"+""""+Строка(Цвет)+""""+","+""""+"Quantity"+""""+":"+""""+Строка(ТекущийСчетчик)+""""+"}");

	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция ДанныеСветофораОтгрузка() Экспорт 
		
	ДатаТекущая=ТекущаяДата();
	ДатаНачала=ДатаТекущая-24*60*60;
	ДатаОкончания=ДатаТекущая+24*60*60;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя > ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ДЕНЬ, 1), ЧАС, ЧАС(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя))
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя))
	|	КОНЕЦ КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ВтДанныеЗаказов
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Проведен
	|	И ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаказПокупателя.Выполнен
	|	И ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя <> ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
	|	И НЕ ЗаказПокупателя.Отгружен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеЗаказов.Ссылка КАК Ссылка,
	|	ВтДанныеЗаказов.ДатаОтгрузки КАК ДатаОтгрузки,
	|	РАЗНОСТЬДАТ(ВтДанныеЗаказов.ДатаОтгрузки, &ДатаТекущая, МИНУТА) КАК ВремяОпоздания
	|ПОМЕСТИТЬ ВтДанныеПодготовка
	|ИЗ
	|	ВтДанныеЗаказов КАК ВтДанныеЗаказов
	|ГДЕ
	|	РАЗНОСТЬДАТ(ВтДанныеЗаказов.ДатаОтгрузки, &ДатаТекущая, МИНУТА) > 5
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(итМаршрутизацияДокументыПодбора.Ссылка, ВтДанныеПодготовка.Ссылка) КАК Ссылка,
	|	ВтДанныеПодготовка.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВтДанныеПодготовка.ВремяОпоздания КАК ВремяОпоздания
	|ИЗ
	|	ВтДанныеПодготовка КАК ВтДанныеПодготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК итМаршрутизацияДокументыПодбора
	|		ПО ВтДанныеПодготовка.Ссылка = итМаршрутизацияДокументыПодбора.Заказ
	|			И (итМаршрутизацияДокументыПодбора.Ссылка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(итМаршрутизацияДокументыПодбора.Ссылка, ВтДанныеПодготовка.Ссылка),
	|	ВтДанныеПодготовка.ДатаОтгрузки,
	|	ВтДанныеПодготовка.ВремяОпоздания";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаТекущая",ДатаТекущая);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	ЗаписьJSON=новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
    ЗаписьJSON.ЗаписатьБезОбработки("{"+""""+"#Table"+""""+":{");
	Выборка=РезультатЗапроса.Выбрать();
	Счтечик=1;
	Пока Выборка.Следующий() Цикл
	Если Счтечик>1 Тогда 
		ЗаписьJSON.ЗаписатьБезОбработки(",");
	КонецЕсли;
	ЗаписьJSON.ЗаписатьБезОбработки(""""+"Row"+Счтечик+""""+":[");	
	ЗаписьJSON.ЗаписатьБезОбработки(""""+Строка(Выборка.Ссылка)+""""+","+
	""""+Строка(Выборка.ДатаОтгрузки)+""""+","+
	""""+Строка(Выборка.ВремяОпоздания)+""""+"]");
	Счтечик=Счтечик+1;	
	КонецЦикла;
    ЗаписьJSON.ЗаписатьБезОбработки("}
	|}");
    Возврат ЗаписьJSON.Закрыть();

КонецФункции


#КонецОбласти


#Область ДанныеОтгрузкиДляHTML

Функция ПолучитьДанныеОтгрузкиHTML() Экспорт 
	ДатаТекущая=ТекущаяДата();
	ДатаНачала=ДатаТекущая-60*60;
	ДатаОкончания=ДатаТекущая+4*60*60;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя > ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
		|			ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ДЕНЬ, 1), ЧАС, ЧАС(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя))
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя))
		|	КОНЕЦ КАК ДатаОтгрузкиВремя,
		|	ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя КАК ВремяНачалаПогрузкиКакВремя,
		|	ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя КАК ВремяЗавершенияПогрузкиКакВремя
		|ПОМЕСТИТЬ ВтДанныеЗаказов
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Проведен
		|	И ВЫБОР
		|			КОГДА ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя > ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
		|				ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ДЕНЬ, 1), ЧАС, ЧАС(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя))
		|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя))
		|		КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ЗаказПокупателя.Выполнен
		|	И ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя <> ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
		|	И НЕ ЗаказПокупателя.Отгружен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеЗаказов.Ссылка КАК Ссылка,
		|	ВтДанныеЗаказов.ДатаОтгрузкиВремя КАК ДатаОтгрузкиВремя,
		|	ВтДанныеЗаказов.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВтДанныеЗаказов.ВремяНачалаПогрузкиКакВремя КАК ВремяНачалаПогрузкиКакВремя,
		|	ВтДанныеЗаказов.ВремяЗавершенияПогрузкиКакВремя КАК ВремяЗавершенияПогрузкиКакВремя,
		|	ЕСТЬNULL(итWMSНаборка.Ссылка, НЕОПРЕДЕЛЕНО) КАК Наборка
		|ПОМЕСТИТЬ ЗаказСНаборкой
		|ИЗ
		|	ВтДанныеЗаказов КАК ВтДанныеЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
		|		ПО ВтДанныеЗаказов.Ссылка = итWMSНаборка.итОснование
		|			И (итWMSНаборка.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSОтгрузкаитОснования.Ссылка КАК Отгрузка,
		|	ЗаказСНаборкой.Ссылка КАК Заказ,
		|	ЗаказСНаборкой.ДатаОтгрузкиВремя КАК ДатаОтгрузкиВремя,
		|	ЗаказСНаборкой.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ЗаказСНаборкой.ВремяНачалаПогрузкиКакВремя КАК ВремяНачалаПогрузкиКакВремя,
		|	ЗаказСНаборкой.ВремяЗавершенияПогрузкиКакВремя КАК ВремяЗавершенияПогрузкиКакВремя,
		|	ЗаказСНаборкой.Наборка КАК Наборка
		|ПОМЕСТИТЬ ЗаказыСОтгрузкой
		|ИЗ
		|	ЗаказСНаборкой КАК ЗаказСНаборкой
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.итWMSОтгрузка.итОснования КАК итWMSОтгрузкаитОснования
		|		ПО ЗаказСНаборкой.Наборка = итWMSОтгрузкаитОснования.Документ
		|			И (итWMSОтгрузкаитОснования.Ссылка.Проведен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказСНаборкой.Ссылка,
		|	ЗаказСНаборкой.ДатаОтгрузкиВремя,
		|	ЗаказСНаборкой.ДатаОтгрузки,
		|	ЗаказСНаборкой.ВремяНачалаПогрузкиКакВремя,
		|	ЗаказСНаборкой.ВремяЗавершенияПогрузкиКакВремя,
		|	ЗаказСНаборкой.Наборка,
		|	итWMSОтгрузкаитОснования.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутизацияДокументыМаршрута.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ЗаказыСОтгрузкой.Заказ) КАК Заказ,
		|	МАКСИМУМ(ЗаказыСОтгрузкой.ДатаОтгрузкиВремя) КАК ДатаОтгрузкиВремя,
		|	МАКСИМУМ(ЗаказыСОтгрузкой.ДатаОтгрузки) КАК ДатаОтгрузки,
		|	МАКСИМУМ(ЗаказыСОтгрузкой.ВремяНачалаПогрузкиКакВремя) КАК ВремяНачалаПогрузкиКакВремя,
		|	МАКСИМУМ(ЗаказыСОтгрузкой.ВремяЗавершенияПогрузкиКакВремя) КАК ВремяЗавершенияПогрузкиКакВремя,
		|	МАКСИМУМ(ЗаказыСОтгрузкой.Отгрузка.ОтгрузочныеВорота) КАК ОтгрузкаОтгрузочныеВорота
		|ПОМЕСТИТЬ ВтДанныеПодготовка
		|ИЗ
		|	ЗаказыСОтгрузкой КАК ЗаказыСОтгрузкой
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
		|		ПО ЗаказыСОтгрузкой.Заказ = МаршрутизацияДокументыМаршрута.Заказ
		|
		|СГРУППИРОВАТЬ ПО
		|	МаршрутизацияДокументыМаршрута.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 10
		|	ВтДанныеПодготовка.Ссылка.Водитель КАК СсылкаВодитель,
		|	ВтДанныеПодготовка.Ссылка.ГосНомер КАК СсылкаГосНомер,
		|	ВтДанныеПодготовка.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВтДанныеПодготовка.ВремяНачалаПогрузкиКакВремя КАК ВремяНачалаПогрузкиКакВремя,
		|	ВтДанныеПодготовка.ОтгрузкаОтгрузочныеВорота КАК ОтгрузочныеВорота
		|ИЗ
		|	ВтДанныеПодготовка КАК ВтДанныеПодготовка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеПодготовка.Ссылка.Водитель,
		|	ВтДанныеПодготовка.Ссылка.ГосНомер,
		|	ВтДанныеПодготовка.ДатаОтгрузки,
		|	ВтДанныеПодготовка.ВремяНачалаПогрузкиКакВремя,
		|	ВтДанныеПодготовка.ОтгрузкаОтгрузочныеВорота
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОтгрузки,
		|	ВремяНачалаПогрузкиКакВремя";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ЗаписьJSON=новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
    ЗаписьJSON.ЗаписатьБезОбработки("{"+""""+"#Table"+""""+":{");
	Счтечик=1;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Строка(ВыборкаДетальныеЗаписи.СсылкаВодитель)="" Тогда 
			Продолжить;
		КонецЕсли;	
		Если Счтечик>1 Тогда 
			ЗаписьJSON.ЗаписатьБезОбработки(",");
		КонецЕсли;
    ЗаписьJSON.ЗаписатьБезОбработки(""""+"Row"+Счтечик+""""+":[");	
	ЗаписьJSON.ЗаписатьБезОбработки(""""+Формат(ВыборкаДетальныеЗаписи.ДатаОтгрузки,"ДЛФ=D")+""""+","+
	""""+Формат(ВыборкаДетальныеЗаписи.ВремяНачалаПогрузкиКакВремя,"ДЛФ=T")+""""+","+
	//""""+Формат(ВыборкаДетальныеЗаписи.ВремяЗавершенияПогрузкиКакВремя,"ДЛФ=T")+""""+","+
    """"+Строка(ВыборкаДетальныеЗаписи.СсылкаВодитель)+""""+","+
    """"+Строка(ВыборкаДетальныеЗаписи.СсылкаГосНомер)+""""+","+
	""""+Строка(ВыборкаДетальныеЗаписи.ОтгрузочныеВорота)+""""+"]");
	Счтечик=Счтечик+1;	
	КонецЦикла;
    ЗаписьJSON.ЗаписатьБезОбработки("}
	|}");
    Возврат ЗаписьJSON.Закрыть();



	
	КонецФункции

Функция ПолучитьДанныеОтгрузкиПоНомеру(Номер) Экспорт 
	ДатаТекущая=ТекущаяДата();
	ДатаНачала=ДатаТекущая-24*60*60;
	ДатаОкончания=ДатаТекущая+72*60*60;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя > ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
		|			ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ДЕНЬ, 1), ЧАС, ЧАС(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя))
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя))
		|	КОНЕЦ КАК ДатаОтгрузкиВремя,
		|	ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя КАК ВремяНачалаПогрузкиКакВремя,
		|	ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя КАК ВремяЗавершенияПогрузкиКакВремя
		|ПОМЕСТИТЬ ВтДанныеЗаказов
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Проведен
		|	И ВЫБОР
		|			КОГДА ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя > ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
		|				ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ДЕНЬ, 1), ЧАС, ЧАС(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя))
		|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя))
		|		КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ЗаказПокупателя.Выполнен
		|	И ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя <> ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
		|	И НЕ ЗаказПокупателя.Отгружен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеЗаказов.Ссылка КАК Ссылка,
		|	ВтДанныеЗаказов.ДатаОтгрузкиВремя КАК ДатаОтгрузкиВремя,
		|	ВтДанныеЗаказов.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВтДанныеЗаказов.ВремяНачалаПогрузкиКакВремя КАК ВремяНачалаПогрузкиКакВремя,
		|	ВтДанныеЗаказов.ВремяЗавершенияПогрузкиКакВремя КАК ВремяЗавершенияПогрузкиКакВремя,
		|	ЕСТЬNULL(итWMSНаборка.Ссылка, НЕОПРЕДЕЛЕНО) КАК Наборка
		|ПОМЕСТИТЬ ЗаказСНаборкой
		|ИЗ
		|	ВтДанныеЗаказов КАК ВтДанныеЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
		|		ПО ВтДанныеЗаказов.Ссылка = итWMSНаборка.итОснование
		|			И (итWMSНаборка.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSОтгрузкаитОснования.Ссылка КАК Отгрузка,
		|	ЗаказСНаборкой.Ссылка КАК Заказ,
		|	ЗаказСНаборкой.ДатаОтгрузкиВремя КАК ДатаОтгрузкиВремя,
		|	ЗаказСНаборкой.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ЗаказСНаборкой.ВремяНачалаПогрузкиКакВремя КАК ВремяНачалаПогрузкиКакВремя,
		|	ЗаказСНаборкой.ВремяЗавершенияПогрузкиКакВремя КАК ВремяЗавершенияПогрузкиКакВремя,
		|	ЗаказСНаборкой.Наборка КАК Наборка
		|ПОМЕСТИТЬ ЗаказыСОтгрузкой
		|ИЗ
		|	ЗаказСНаборкой КАК ЗаказСНаборкой
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.итWMSОтгрузка.итОснования КАК итWMSОтгрузкаитОснования
		|		ПО ЗаказСНаборкой.Наборка = итWMSОтгрузкаитОснования.Документ
		|			И (итWMSОтгрузкаитОснования.Ссылка.Проведен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказСНаборкой.Ссылка,
		|	ЗаказСНаборкой.ДатаОтгрузкиВремя,
		|	ЗаказСНаборкой.ДатаОтгрузки,
		|	ЗаказСНаборкой.ВремяНачалаПогрузкиКакВремя,
		|	ЗаказСНаборкой.ВремяЗавершенияПогрузкиКакВремя,
		|	ЗаказСНаборкой.Наборка,
		|	итWMSОтгрузкаитОснования.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутизацияДокументыМаршрута.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ЗаказыСОтгрузкой.Заказ) КАК Заказ,
		|	МАКСИМУМ(ЗаказыСОтгрузкой.ДатаОтгрузкиВремя) КАК ДатаОтгрузкиВремя,
		|	МАКСИМУМ(ЗаказыСОтгрузкой.ДатаОтгрузки) КАК ДатаОтгрузки,
		|	МАКСИМУМ(ЗаказыСОтгрузкой.ВремяНачалаПогрузкиКакВремя) КАК ВремяНачалаПогрузкиКакВремя,
		|	МАКСИМУМ(ЗаказыСОтгрузкой.ВремяЗавершенияПогрузкиКакВремя) КАК ВремяЗавершенияПогрузкиКакВремя,
		|	МАКСИМУМ(ЗаказыСОтгрузкой.Отгрузка.ОтгрузочныеВорота) КАК ОтгрузкаОтгрузочныеВорота
		|ПОМЕСТИТЬ ВтДанныеПодготовка
		|ИЗ
		|	ЗаказыСОтгрузкой КАК ЗаказыСОтгрузкой
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
		|		ПО ЗаказыСОтгрузкой.Заказ = МаршрутизацияДокументыМаршрута.Заказ
		|
		|СГРУППИРОВАТЬ ПО
		|	МаршрутизацияДокументыМаршрута.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	ВтДанныеПодготовка.Ссылка.Водитель КАК СсылкаВодитель,
		|	ВтДанныеПодготовка.Ссылка.ГосНомер КАК СсылкаГосНомер,
		|	ВтДанныеПодготовка.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВтДанныеПодготовка.ВремяНачалаПогрузкиКакВремя КАК ВремяНачалаПогрузкиКакВремя,
		|	ВтДанныеПодготовка.ОтгрузкаОтгрузочныеВорота КАК ОтгрузочныеВорота,
		|	ВтДанныеПодготовка.Ссылка.Прицеп КАК Прицеп
		|ИЗ
		|	ВтДанныеПодготовка КАК ВтДанныеПодготовка
		|ГДЕ
		|	ВтДанныеПодготовка.Ссылка.ГосНомер ПОДОБНО ""%"" + &ГосНомер + ""%""
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеПодготовка.Ссылка.Водитель,
		|	ВтДанныеПодготовка.Ссылка.ГосНомер,
		|	ВтДанныеПодготовка.ДатаОтгрузки,
		|	ВтДанныеПодготовка.ВремяНачалаПогрузкиКакВремя,
		|	ВтДанныеПодготовка.ОтгрузкаОтгрузочныеВорота,
		|	ВтДанныеПодготовка.Ссылка.Прицеп
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОтгрузки,
		|	ВремяНачалаПогрузкиКакВремя";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ГосНомер", Номер);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ЗаписьJSON=новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("Водитель");
		ЗаписьJSON.ЗаписатьЗначение(Строка(ВыборкаДетальныеЗаписи.СсылкаВодитель));
        ЗаписьJSON.ЗаписатьИмяСвойства("ГосНомер");
		ЗаписьJSON.ЗаписатьЗначение(Строка(ВыборкаДетальныеЗаписи.СсылкаГосНомер));
        ЗаписьJSON.ЗаписатьИмяСвойства("ДатаОтгрузки");
		ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДетальныеЗаписи.ДатаОтгрузки,"ДЛФ=D"));
        ЗаписьJSON.ЗаписатьИмяСвойства("ВремяНачалаПогрузкиКакВремя");
		ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДетальныеЗаписи.ВремяНачалаПогрузкиКакВремя,"ДЛФ=T"));
        ЗаписьJSON.ЗаписатьИмяСвойства("ОтгрузочныеВорота");
		ЗаписьJSON.ЗаписатьЗначение(Строка(ВыборкаДетальныеЗаписи.ОтгрузочныеВорота));
	    ЗаписьJSON.ЗаписатьИмяСвойства("Прицеп");
		ЗаписьJSON.ЗаписатьЗначение(Строка(ВыборкаДетальныеЗаписи.Прицеп));
        ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;
	 Возврат ЗаписьJSON.Закрыть();

		КонецФункции
	
#КонецОбласти

#Область РаботаСРегистрациейМарокКОбмену

Процедура ит_WMS_ОбслуживаниеРегистрацииДвиженияМарок() Экспорт
	Выборка=ПланыОбмена.WMSОбменМарками.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка=ПланыОбмена.WMSОбменМарками.ЭтотУзел() Тогда 
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ит_WMS_РегистрацияДвиженияМарок.УзелОбмена,
		|	МАКСИМУМ(ит_WMS_РегистрацияДвиженияМарок.НомерСообщения) КАК НомерСообщения
		|ИЗ
		|	РегистрСведений.ит_WMS_РегистрацияДвиженияМарок КАК ит_WMS_РегистрацияДвиженияМарок
		|ГДЕ
		|	ит_WMS_РегистрацияДвиженияМарок.УзелОбмена = &УзелОбмена
		|
		|СГРУППИРОВАТЬ ПО
		|	ит_WMS_РегистрацияДвиженияМарок.УзелОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	ит_WMS_РегистрацияДвиженияМарок.УзелОбмена,
		|	ит_WMS_РегистрацияДвиженияМарок.Ссылка,
		|	ит_WMS_РегистрацияДвиженияМарок.ДатаРегистрации КАК ДатаРегистрации
		|ИЗ
		|	РегистрСведений.ит_WMS_РегистрацияДвиженияМарок КАК ит_WMS_РегистрацияДвиженияМарок
		|ГДЕ
		|	ит_WMS_РегистрацияДвиженияМарок.УзелОбмена = &УзелОбмена
		|	И ит_WMS_РегистрацияДвиженияМарок.НомерСообщения = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРегистрации";
		
		Запрос.УстановитьПараметр("УзелОбмена", Выборка.Ссылка);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		НомерСообщения=0;
		ВыборкаНомерСообщения=МассивРезультатов[0].Выбрать();
		Пока ВыборкаНомерСообщения.Следующий() Цикл 
			НомерСообщения=ВыборкаНомерСообщения.НомерСообщения;
		КонецЦикла;
		ТаблицаЗначенийДляБлокировки=новый ТаблицаЗначений;
		ТаблицаЗначенийДляБлокировки.Колонки.Добавить("УзелОбмена");
		ТаблицаЗначенийДляБлокировки.Колонки.Добавить("Ссылка");
		ВыборкаСообщений=МассивРезультатов[1].Выбрать();
		Пока ВыборкаСообщений.Следующий() Цикл 
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			НоваяСтрока=ТаблицаЗначенийДляБлокировки.Добавить();
			НоваяСтрока.УзелОбмена=ВыборкаСообщений.УзелОбмена;
			НоваяСтрока.Ссылка=ВыборкаСообщений.Ссылка;
			БлокировкаДанных = новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ит_WMS_РегистрацияДвиженияМарок");
			ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных=ТаблицаЗначенийДляБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("УзелОбмена","УзелОбмена");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка","Ссылка");
			БлокировкаДанных.Заблокировать();
			НомерСообщения=НомерСообщения+1;
			НаборЗаписей=РегистрыСведений.ит_WMS_РегистрацияДвиженияМарок.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.УзелОбмена.Установить(ВыборкаСообщений.УзелОбмена);
			НаборЗаписей.Отбор.Ссылка.Установить(ВыборкаСообщений.Ссылка);
			НаборЗаписей.Прочитать();
			Для Каждого Запись из НаборЗаписей Цикл 
				Запись.НомерСообщения=НомерСообщения;
			КонецЦикла;
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
			ТаблицаЗначенийДляБлокировки.Очистить();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьРегистрациюИзмененийДвжиенияМарок(УзелОбмена,НомерСообщения) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ит_WMS_РегистрацияДвиженияМарок.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ит_WMS_РегистрацияДвиженияМарок КАК ит_WMS_РегистрацияДвиженияМарок
		|ГДЕ
		|	ит_WMS_РегистрацияДвиженияМарок.НомерСообщения = &НомерСообщения
		|	И ит_WMS_РегистрацияДвиженияМарок.УзелОбмена = &УзелОбмена";
	
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТаблицаЗначенийДляБлокировки=новый ТаблицаЗначений;
	ТаблицаЗначенийДляБлокировки.Колонки.Добавить("УзелОбмена");
	ТаблицаЗначенийДляБлокировки.Колонки.Добавить("Ссылка");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	НоваяСтрока=ТаблицаЗначенийДляБлокировки.Добавить();
	НоваяСтрока.УзелОбмена=УзелОбмена;
	НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка;
    БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ит_WMS_РегистрацияДвиженияМарок");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных=ТаблицаЗначенийДляБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("УзелОбмена","УзелОбмена");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка","Ссылка");
	БлокировкаДанных.Заблокировать();
	НаборЗаписей=РегистрыСведений.ит_WMS_РегистрацияДвиженияМарок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УзелОбмена.Установить(УзелОбмена);
	НаборЗаписей.Отбор.Ссылка.Установить(ВыборкаДетальныеЗаписи.Ссылка);
    НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	ЗафиксироватьТранзакцию();
	ТаблицаЗначенийДляБлокировки.Очистить();
	КонецЦикла;
	


	
	
КонецПроцедуры

Процедура ЗарегестрироватьМаркиКДвижениюWMS(Узел,Ссылка) Экспорт 
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	ТаблицаЗначенийДляБлокировки=новый ТаблицаЗначений;
	ТаблицаЗначенийДляБлокировки.Колонки.Добавить("УзелОбмена");
	ТаблицаЗначенийДляБлокировки.Колонки.Добавить("Ссылка");
	НоваяСтрока=ТаблицаЗначенийДляБлокировки.Добавить();
	НоваяСтрока.УзелОбмена=Узел;
	НоваяСтрока.Ссылка=Ссылка;
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ит_WMS_РегистрацияДвиженияМарок");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных=ТаблицаЗначенийДляБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("УзелОбмена","УзелОбмена");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка","Ссылка");
	БлокировкаДанных.Заблокировать();
	
	МенеджерЗаписи=РегистрыСведений.ит_WMS_РегистрацияДвиженияМарок.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УзелОбмена=Узел;
	МенеджерЗаписи.Ссылка=Ссылка;
	МенеджерЗаписи.НомерСообщения=0;
	МенеджерЗаписи.ДатаРегистрации=ТекущаяДата();
	МенеджерЗаписи.Записать(Истина);
	ЗафиксироватьТранзакцию();
	КонецПроцедуры

#КонецОбласти


#Область УдалениеЗадвоенныхМарок

Процедура УдалениеЗадвоенныхМарок() Экспорт
ПрисвоениеНомераОбработкиЗадвоенныхМарок();	
Счетчик=5;
МассивЗаданий=новый Массив;
МассивНомервИсключений=новый Массив;
Пока Счетчик>0 Цикл
	НомерОбработки=МинимальныйНомерОбработкизадвоенныхМарок(МассивНомервИсключений);
	МассивНомервИсключений.Добавить(НомерОбработки);
	Если НомерОбработки=0 Тогда 
		Прервать;
	КонецЕсли;
	Массив=новый Массив;
	Массив.Добавить(НомерОбработки);
	Ключ=новый УникальныйИдентификатор;
	Задание=ФоновыеЗадания.Выполнить("итWMSПривилегированныйМодуль.ОбработатьЗадвоенныйМаркидокумента",Массив,Ключ,"УдалениеЗадвоенныхМарок");
	МассивЗаданий.Добавить(Ключ);
	//ОбработатьЗадвоенныйМаркидокумента(НомерОбработки);
	Счетчик=Счетчик-1;
КонецЦикла;
итWMSСлужебныеПроцедурыИФункции.ОжиданиеВыполненияЗаданий(МассивЗаданий,60);
КонецПроцедуры

Процедура ОбработатьЗадвоенныйМаркидокумента(НомерОбработки)Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыДвиженияПоЗадвоеннымМаркам.Документ КАК Документ
		|ПОМЕСТИТЬ ВтДокументОбработки
		|ИЗ
		|	РегистрСведений.ДокументыДвиженияПоЗадвоеннымМаркам КАК ДокументыДвиженияПоЗадвоеннымМаркам
		|ГДЕ
		|	ДокументыДвиженияПоЗадвоеннымМаркам.НомерСообщения = &НомерСообщения
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыДвиженияПоЗадвоеннымМаркам.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	алкХранилищеАкцизныхМарок.Марка.ЗначениеШтрихКода КАК МаркаЗначениеШтрихКода,
		|	алкХранилищеАкцизныхМарок.Марка КАК Марка
		|ПОМЕСТИТЬ ВтДанныеШк
		|ИЗ
		|	ВтДокументОбработки КАК ВтДокументОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок КАК алкХранилищеАкцизныхМарок
		|		ПО ВтДокументОбработки.Документ = алкХранилищеАкцизныхМарок.Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	алкХранилищеАкцизныхМарок.Марка.ЗначениеШтрихКода,
		|	алкХранилищеАкцизныхМарок.Марка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Марки.Ссылка КАК ЗаменяемаяМарка,
		|	ВтДанныеШк.Марка КАК ГлавнаяМарка,
		|	ВтДанныеШк.МаркаЗначениеШтрихКода КАК МаркаЗначениеШтрихКода
		|ИЗ
		|	ВтДанныеШк КАК ВтДанныеШк
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Марки КАК Марки
		|		ПО ВтДанныеШк.МаркаЗначениеШтрихКода = Марки.ЗначениеШтрихКода
		|			И ВтДанныеШк.Марка <> Марки.Ссылка
		|			И (НЕ Марки.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("НомерСообщения", НомерОбработки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Марка=ВыборкаДетальныеЗаписи.ЗаменяемаяМарка.ПолучитьОбъект();
	Марка.ПометкаУдаления=Истина;
	Марка.Записать();
	ЗафиксироватьТранзакцию();
	КонецЦикла;
    УдалитьНомерОбработкиЗадвоенныхМарок(НомерОбработки);

КонецПроцедуры


Процедура УдалитьНомерОбработкиЗадвоенныхМарок(НомерОбработки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыДвиженияПоЗадвоеннымМаркам.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.ДокументыДвиженияПоЗадвоеннымМаркам КАК ДокументыДвиженияПоЗадвоеннымМаркам
		|ГДЕ
		|	ДокументыДвиженияПоЗадвоеннымМаркам.НомерСообщения = &НомерСообщения";
	Запрос.УстановитьПараметр("НомерСообщения",НомерОбработки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Блокировка=новый БлокировкаДанных;
		Элемент=Блокировка.Добавить("РегистрСведений.ДокументыДвиженияПоЗадвоеннымМаркам");
		Элемент.УстановитьЗначение("Документ",ВыборкаДетальныеЗаписи.Документ);
		Элемент.Режим=РежимБлокировкиДанных.Исключительный;
        Блокировка.Заблокировать();
		НаборЗаписей=РегистрыСведений.ДокументыДвиженияПоЗадвоеннымМаркам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(ВыборкаДетальныеЗаписи.Документ);
		НаборЗаписей.Прочитать();
		Отказ=Ложь;
		Для Каждого стр из НаборЗаписей Цикл
			Если стр.НомерСообщения<>НомерОбработки Тогда 
				Отказ=Истина;
			КонецЕсли;
		КонецЦикла;
		Если Отказ Тогда 
			ОтменитьТранзакцию();
			Прервать;
		КонецЕсли;	
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	КонецЦикла;

		КонецПроцедуры
	
Процедура ПрисвоениеНомераОбработкиЗадвоенныхМарок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыДвиженияПоЗадвоеннымМаркам.Документ КАК Документ,
		|	ДокументыДвиженияПоЗадвоеннымМаркам.ДатаРегистрации КАК ДатаРегистрации
		|ИЗ
		|	РегистрСведений.ДокументыДвиженияПоЗадвоеннымМаркам КАК ДокументыДвиженияПоЗадвоеннымМаркам
		|ГДЕ
		|	ДокументыДвиженияПоЗадвоеннымМаркам.НомерСообщения = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументыДвиженияПоЗадвоеннымМаркам.ДатаРегистрации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Номер=МаксимальныйНомерОбработкиЗадвоенныхМарок();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Номер=Номер+1;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Блокировка=новый БлокировкаДанных;
		Элемент=Блокировка.Добавить("РегистрСведений.ДокументыДвиженияПоЗадвоеннымМаркам");
		Элемент.УстановитьЗначение("Документ",ВыборкаДетальныеЗаписи.Документ);
		Элемент.Режим=РежимБлокировкиДанных.Исключительный;
        Блокировка.Заблокировать();
		НаборЗаписей=РегистрыСведений.ДокументыДвиженияПоЗадвоеннымМаркам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(ВыборкаДетальныеЗаписи.Документ);
		НаборЗаписей.Прочитать();
		Для Каждого стр из НаборЗаписей Цикл 
			стр.НомерСообщения=Номер;
		КонецЦикла;
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();		
	КонецЦикла;
	


КонецПроцедуры


Функция МаксимальныйНомерОбработкиЗадвоенныхМарок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДокументыДвиженияПоЗадвоеннымМаркам.НомерСообщения) КАК НомерСообщения
		|ИЗ
		|	РегистрСведений.ДокументыДвиженияПоЗадвоеннымМаркам КАК ДокументыДвиженияПоЗадвоеннымМаркам
		|ГДЕ
		|	ДокументыДвиженияПоЗадвоеннымМаркам.НомерСообщения > 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НомерСообщения=null Тогда 
			Возврат 0;
		КонецЕсли;	
		Если ВыборкаДетальныеЗаписи.НомерСообщения=Неопределено Тогда 
			Возврат 0;
		КонецЕсли;	
		Возврат  ВыборкаДетальныеЗаписи.НомерСообщения;
	КонецЦикла;
	
	Возврат 0;	
	КонецФункции

Функция МинимальныйНомерОбработкизадвоенныхМарок(МассивНомервИсключений)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокументыДвиженияПоЗадвоеннымМаркам.НомерСообщения) КАК НомерСообщения
	|ИЗ
	|	РегистрСведений.ДокументыДвиженияПоЗадвоеннымМаркам КАК ДокументыДвиженияПоЗадвоеннымМаркам
	|ГДЕ
	|	ДокументыДвиженияПоЗадвоеннымМаркам.НомерСообщения > 0
	|	И НЕ ДокументыДвиженияПоЗадвоеннымМаркам.НомерСообщения В (&МассивНомервИсключений)";
	
	Запрос.УстановитьПараметр("МассивНомервИсключений",МассивНомервИсключений);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НомерСообщения=null Тогда 
			Возврат 0;
		КонецЕсли;	
		Если ВыборкаДетальныеЗаписи.НомерСообщения=Неопределено Тогда 
			Возврат 0;
		КонецЕсли;	
		Возврат  ВыборкаДетальныеЗаписи.НомерСообщения;
	КонецЦикла;
	
	Возврат 0;	
КонецФункции



#КонецОбласти

#Область УстановкаСвязиПлановОбмена
Функция ПолучитьСписокПлановОбмена(ПланОбмена=Неопределено) Экспорт
	ПеречислениеПлановОбмена="";
	Если ПланОбмена=Неопределено Тогда
		ПеречислениеПлановОбмена=новый Массив;
		Для Каждого ЭлементПлана Из Метаданные.ПланыОбмена Цикл
			ПеречислениеПлановОбмена.Добавить(ЭлементПлана.имя);
		КонецЦикла;
			иначе
	    ПеречислениеПлановОбмена=итWMSСлужебныеПроцедурыИФункции.Split(ПланОбмена,",");
	КонецЕсли;
    СоответсвиеДанных=новый Соответствие();
	Для Каждого ЭлементПлана Из ПеречислениеПлановОбмена Цикл
		Выборка=ПланыОбмена[ЭлементПлана].Выбрать();
		МассивВыборки=новый Массив();
		Пока Выборка.Следующий() Цикл
			СтруктураДанных=новый Структура();
			СтруктураДанных.Вставить("Имя",Выборка.Наименование);
			СтруктураДанных.Вставить("Ссылка",Выборка.Ссылка.УникальныйИдентификатор());
			СтруктураДанных.Вставить("Тип",Выборка.Ссылка.Метаданные().ПолноеИмя());
			МассивВыборки.Добавить(СтруктураДанных);
		КонецЦикла;
		СоответсвиеДанных.Вставить(ЭлементПлана,МассивВыборки);
	КонецЦикла;
	Возврат СоответсвиеДанных;
КонецФункции
Функция ЗаписатьДанныеСоотвПлановОбмена(СтруктураДанных) Экспорт
СсылкаНаПланОбмена=ПланыОбмена[СтруктураДанных.Имя].ПолучитьСсылку(СтруктураДанных.Ссылка);
НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
НаборЗаписей=РегистрыСведений.СоответствиеОбъектовДляОбмена.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.УзелОбмена.Установить(СсылкаНаПланОбмена);
НаборЗаписей.Отбор.СобственнаяСсылка.Установить(Неопределено);
НаборЗаписей.Прочитать();
НаборЗаписей.Очистить();
НаборЗаписей.Записать();
НоваяЗапись=НаборЗаписей.Добавить();
НоваяЗапись.УзелОбмена=СсылкаНаПланОбмена;
НоваяЗапись.СсылкаВДругойИБ=СтруктураДанных.СсылкаИсточник;
НоваяЗапись.ИмяТипаПриемника=СтруктураДанных.ИмяТипаПриемника;
НаборЗаписей.Записать();
ЗафиксироватьТранзакцию();
СтруктураОтвета=новый Структура("ДанныеЗаписаны",Истина);
Возврат СтруктураОтвета;
КонецФункции
#КонецОбласти


#Область ФормированиеDataMatrix

Функция СформироватьDataMatrix(СтруктураПараметров) Экспорт
	DataMatrix = новый COMОбъект("CreateDataMatrix.MainDataMatrixCreate");
	DataMatrix.encoding= СтруктураПараметров.encoding;
	DataMatrix.MarginSize= СтруктураПараметров.MarginSize;
	DataMatrix.ModuleSize=   СтруктураПараметров.ModuleSize;
	DataMatrix.Scheme=    СтруктураПараметров.Scheme;
	DataMatrix.SizeIdx=    СтруктураПараметров.SizeIdx;
	DataMatrix.DataCode=    СтруктураПараметров.DataCode;
	DataMatrix.SaveToFile=   СтруктураПараметров.SaveToFile;
	Данные=DataMatrix.CreateDataMatrixFunction();
	Возврат Данные;
КонецФункции

Функция СформироватьСтруктуруПараметровDatamatrix() Экспорт 
	СтруктураПараметров=новый Структура;
	СтруктураПараметров.Вставить("encoding","UTF8");
	СтруктураПараметров.Вставить("MarginSize",10);
	СтруктураПараметров.Вставить("ModuleSize",5);
	СтруктураПараметров.Вставить("Scheme","DmtxSchemeAscii");
	СтруктураПараметров.Вставить("SizeIdx","SquareAuto");
	СтруктураПараметров.Вставить("DataCode","текст шк");
	СтруктураПараметров.Вставить("SaveToFile",Ложь);
	Возврат СтруктураПараметров;
КонецФункции


#КонецОбласти


#Область ПолучениеЗаписиДанныхТранзита
Процедура ИтWMSПолучениеДанныхТранзита() Экспорт
	ДанныеНастроек=ПолучитьНастройкиИзХранилищаПоСвойствам("СоответствиеФилиаловИорганизация,КоличествоДнейОбновленияИнформации");
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеНастроек,"СоответствиеФилиаловИорганизация") тогда
		Возврат
	КонецЕсли;	
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеНастроек,"КоличествоДнейОбновленияИнформации") тогда
		Возврат
	КонецЕсли;	
	ДатаОкончанияОбновления=ТекущаяДата();
	ДатаНачалаОбновления= ДатаОкончанияОбновления-(ДанныеНастроек.КоличествоДнейОбновленияИнформации*24*60*60);
	Для Каждого СтрокаСоотв Из ДанныеНастроек.СоответствиеФилиаловИорганизация Цикл
	МассивВерсийДанных=ПолучитьВерсииДанныхЗаПериод(ДатаНачалаОбновления,ДатаОкончанияОбновления,СтрокаСоотв.Филиал);
	СтруктураОбновленияДанных=новый Структура;
	СтруктураОбновленияДанных.Вставить("ДатаНачалаОбновления",ДатаНачалаОбновления);
	СтруктураОбновленияДанных.Вставить("ДатаОкончанияОбновдения",ДатаОкончанияОбновления);
	СтруктураОбновленияДанных.Вставить("ФилиалПриемник",СтрокаСоотв.Филиал);
	СтруктураОбновленияДанных.Вставить("МассивВерсийДанных",МассивВерсийДанных);
	СтруктураОбновленияДанных.Вставить("КодСправочника","#00000000000");
	СтруктураОбновленияДанных.Вставить("ИмяОбработкиМетаданных","итWMS_ПолучитьДанныеДокументов");
	СтруктураОбновленияДанных.Вставить("ТипМетаданных","Обработка");
	ДанныеДокументов=ЗапроситьЗаписатьДанныеДокументов(СтруктураОбновленияДанных);
	Если ДанныеДокументов=Неопределено тогда
		Возврат
	КонецЕсли;	
	ЗаписатьИзмененияДанныхДокументов(ДанныеДокументов);	
	КонецЦикла;
КонецПроцедуры
Процедура ОбновитьДанныеДокумента(Документ) Экспорт
	СтруктураОбновленияДанных=новый Структура;
	СтруктураОбновленияДанных.Вставить("Документ",Документ);
	СтруктураОбновленияДанных.Вставить("КодСправочника","#00000000000");
	СтруктураОбновленияДанных.Вставить("ИмяОбработкиМетаданных","итWMS_ПолучитьДанныеДокументов");
	СтруктураОбновленияДанных.Вставить("ТипМетаданных","Обработка");
	
	ДанныеДокументов=ЗапроситьЗаписатьДанныеДокументов(СтруктураОбновленияДанных);
	Если ДанныеДокументов=Неопределено тогда
		Возврат
	КонецЕсли;
	ЗаписатьИзмененияДанныхДокументов(ДанныеДокументов);
КонецПроцедуры
Процедура ЗаписатьИзмененияДанныхДокументов(ДанныеДокументов)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных=новый БлокировкаДанных;
	ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.итWMS_ДанныеДокументов");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	БлокировкаДанных.Заблокировать();
	для Каждого стр из ДанныеДокументов цикл
		НаборЗаписей=РегистрыСведений.итWMS_ДанныеДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(стр.Документ);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество()>0 тогда
			для Каждого Запись из НаборЗаписей цикл
				ЗаполнитьЗначенияСвойств(Запись,стр);				
			КонецЦикла;
		иначе
			НоваяЗапись=НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,стр);
			
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Функция ЗапроситьЗаписатьДанныеДокументов(СтруктураОбновленияДанных)
	ПараметрыПрокиСервера=итWMSСлужебныеПроцедурыИФункции.СформироватьПараметрыПроксиСервера();
	Если  итWMSСлужебныеПроцедурыИФункции.WMSОповещениеОТиповыхОшибках(ПараметрыПрокиСервера) тогда
		Возврат Неопределено;
	КонецЕсли;
	СтрокаПодключения=итWMSСлужебныеПроцедурыИФункции.СформироватьСтрокуПодключения();
	Если СтрокаПодключения="" тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Данные=итWMSСлужебныеПроцедурыИФункции.СериализаторДанных(СтруктураОбновленияДанных);
	Определение=новый WSОпределения(СтрокаПодключения ,"webserv","111");
	Прокси = новый WSПрокси(Определение,ПараметрыПрокиСервера.URLПространствоИменСервиса,ПараметрыПрокиСервера.ИмяСервиса,ПараметрыПрокиСервера.ИмяТочкиПодключения);
	Прокси.Пользователь="webserv";
	Прокси.Пароль="111";
	Ответ=итWMSСлужебныеПроцедурыИФункции.ДесериализаторДанных(Прокси.universal(Данные));
	Возврат Ответ;
	//Если  итWMSСлужебныеПроцедурыИФункции.WMSОповещениеОТиповыхОшибках(Ответ) Тогда 
	//	Возврат;
	//КонецЕсли;
	//Объект.ДанныеФизическогоНосителя.Очистить();
	//Объект.Товары.Очистить();
	
	//Если Ответ.ПризнакЗагрузки=0 тогда
	//	Если Объект.ПриемкаИзТранзита тогда
	//		Сообщить(" снимите галочку статуса приемки из транита  и запросите данные заного. Данные по документу найдены, но данных по SSCC нет, приемка будет осуществляться в 
	//		| ручном режиме");
	//		Возврат
	//	КонецЕсли;
	//	для Каждого  стр из Ответ.ТаблицаДанных цикл
	//		НоваяСтрокаФизическогоНосителя=Объект.ДанныеФизическогоНосителя.Добавить();
	//		НоваяСтрокаФизическогоНосителя.Номенклатура = ПоискНоменклатурыПоИдентификатору(стр.итИндентификаторыТоварныхПозиций);
	//		НоваяСтрокаФизическогоНосителя.ДатаРозлива=стр.ДатаРозлива;
	//		НоваяСтрокаФизическогоНосителя.Количество=стр.КоличествоВБазовыхЕденицахИзмерения;
	//	КонецЦикла;
	//	Сообщить("Данные успешно полученны в таблицу <<Данные Физического Носителя>> ");
	//иначе
	//	Если не Объект.ПриемкаИзТранзита тогда 
	//    Сообщить(" поставьте галочку статуса приемки из транита и запросите данные заного. Ифнормация по SSCC есть, приемка будет осуществляться в 
	//		| полоавтоматическом  режиме");
	//		Возврат;
	//	КонецЕсли;	
	//	для Каждого  стр из Ответ.ТаблицаДанных цикл
	//		НоваяСтрокаТовары=Объект.Товары.Добавить();
	//		НоваяСтрокаТовары.Номенклатура = ПоискНоменклатурыПоИдентификатору(стр.итИндентификаторыТоварныхПозиций);
	//		НоваяСтрокаТовары.ДатаРозлива=стр.ДатаРозлива;
	//		НоваяСтрокаТовары.КоличествоПлан=стр.КоличествоВБазовыхЕденицахИзмерения;
	//		НоваяСтрокаТовары.ИдентификаторУпаковки = стр.ИдентификаторУпаковки;
	//		НоваяСтрокаТовары.ИдентификаторСтроки=новый УникальныйИдентификатор();
	//		НоваяСтрокаТовары.ИдентификаторСтрокиПредставление=Строка(НоваяСтрокаТовары.ИдентификаторСтроки);
	//	КонецЦикла; 
	//	Сообщить("Данные успешно полученны");
	//КонецЕсли;
	
	
КонецФункции
Функция ПолучитьВерсииДанныхЗаПериод(ДатаНачала,ДатаОкончания,ФилиалПриемник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMS_ДанныеДокументов.ВерсияДанных
	|ИЗ
	|	РегистрСведений.итWMS_ДанныеДокументов КАК итWMS_ДанныеДокументов
	|ГДЕ
	|	итWMS_ДанныеДокументов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И итWMS_ДанныеДокументов.ФилиалПриемник = &ФилиалПриемник";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ФилиалПриемник", ФилиалПриемник);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("ВерсияДанных");	
КонецФункции

Процедура итWMSЗаписьДанныхТранзита()Экспорт 
	ДанныеНастроек=ПолучитьНастройкиИзХранилища();
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеНастроек,"Филиал") тогда
		Возврат
	КонецЕсли;	
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеНастроек,"КоличествоДнейОбновленияИнформации") тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеНастроек,"СоответствиеФилиаловИКа") тогда
		Возврат
	КонецЕсли; 
	
	ДатаОкончанияОбновления=ТекущаяДата();
	ДатаНачалаОбновления= ДатаОкончанияОбновления-(ДанныеНастроек.КоличествоДнейОбновленияИнформации*24*60*60);
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	МассивДокументов=новый Массив;
	МассивКа=ДанныеНастроек.СоответствиеФилиаловИКа.ВыгрузитьКолонку("Контрагент");
	ЗаполнитьСписокДокументовКОбработке(МенеджерВременныхТаблиц,ДатаНачалаОбновления,ДатаОкончанияОбновления,МассивДокументов,МассивКа);
	СтруктураПолученияФорматаДанных=новый Структура;
	СтруктураПолученияФорматаДанных.Вставить("Филиал",Строка(ДанныеНастроек.Филиал.УникальныйИдентификатор()));
	СтруктураПолученияФорматаДанных.Вставить("МассивДокументов",МассивДокументов);
	СтруктураПолученияФорматаДанных.Вставить("КодСправочника","#00000000000");
	СтруктураПолученияФорматаДанных.Вставить("ИмяОбработкиМетаданных","ФормированиеСтруктурыОбменаДанными");
	СтруктураПолученияФорматаДанных.Вставить("ТипМетаданных","Обработка");
	
	итWMSСтруктураХраненияДанных=ЗапроситьЗаписатьДанныеДокументов(СтруктураПолученияФорматаДанных);
	Если не  итWMSСтруктураХраненияДанных.Свойство("СтруктуруХраненияДаннныхДокументов") тогда
		ЗаписьЖурналаРегистрации("Выгрузка данных транзита",,,,"нет свойства СтруктуруХраненияДаннныхДокументов");
		Возврат
	КонецЕсли;
	СтруктуруХраненияДаннныхДокументов=итWMSСтруктураХраненияДанных.СтруктуруХраненияДаннныхДокументов;
	Если не  СтруктуруХраненияДаннныхДокументов.Свойство("ВерсииОбъектов") тогда
		ЗаписьЖурналаРегистрации("Выгрузка данных транзита",,,,"нет свойства ВерсииОбъектов");
		Возврат
	КонецЕсли;
	Если  СтруктуруХраненияДаннныхДокументов.ВерсииОбъектов = Неопределено тогда
		ЗаписьЖурналаРегистрации("Выгрузка данных транзита",,,,"нет данных ВерсииОбъектов");
		Возврат
	КонецЕсли;
	ПолучитьДокументыКзаписи(МенеджерВременныхТаблиц,СтруктуруХраненияДаннныхДокументов);
	ЗаписатьДокументы(МенеджерВременныхТаблиц,СтруктуруХраненияДаннныхДокументов,ДанныеНастроек);
	
КонецПроцедуры

Процедура ЗаписатьДокументы(МенеджерВременныхТаблиц,СтруктуруХраненияДаннныхДокументов,ДанныеНастроек)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументовПоТранзиту.РеализацияТоваров КАК РеализацияТоваров,
	|	ДанныеДокументовПоТранзиту.ТТН КАК ТТН,
	|	ДанныеДокументовПоТранзиту.SSCC КАК ИдентификаторУпаковки,
	|	ДанныеДокументовПоТранзиту.Количество КАК КоличествоВБазовыхЕденицахИзмерения,
	|	ДанныеДокументовПоТранзиту.ИТП КАК итИндентификаторыТоварныхПозиций,
	|	ДанныеДокументовПоТранзиту.ДатаРозлива,
	|	ДанныеДокументовПоТранзиту.Цена,
	|	ДанныеДокументовПоТранзиту.Сумма,
	|	ДанныеДокументовПоТранзиту.СуммаНДС,
	|	алкТранспортнаяИнформация.Перевозчик.Наименование КАК ПеревозчикИмя,
	|	алкТранспортнаяИнформация.Перевозчик.ИНН КАК ПеревозчикИНН,
	|	алкТранспортнаяИнформация.ТранспортноеСредство.ГосударственныйНомер КАК Госномер,
	|	алкТранспортнаяИнформация.ТранспортноеСредство.Модель.Наименование КАК Марка,
	|	алкТранспортнаяИнформация.Водитель.Наименование КАК Водитель
	|ИЗ
	|	ДанныеДокументовПоТранзиту КАК ДанныеДокументовПоТранзиту
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкТранспортнаяИнформация КАК алкТранспортнаяИнформация
	|		ПО ДанныеДокументовПоТранзиту.РеализацияТоваров = алкТранспортнаяИнформация.Объект
	|ИТОГИ
	|	МАКСИМУМ(ТТН),
	|	МАКСИМУМ(ПеревозчикИмя),
	|	МАКСИМУМ(ПеревозчикИНН),
	|	МАКСИМУМ(Госномер),
	|	МАКСИМУМ(Марка),
	|	МАКСИМУМ(Водитель)
	|ПО
	|	РеализацияТоваров";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаРеализации= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРеализации.Следующий() цикл
		СтруктураДокумента=СкопироватьСтруктуру(СтруктуруХраненияДаннныхДокументов);
		СтруктураДокумента.ВерсияДанных=ВыборкаРеализации.РеализацияТоваров.ВерсияДанных;
		СтруктураДокумента.Дата=ВыборкаРеализации.РеализацияТоваров.Дата;
		СтруктураДокумента.Документ=ВыборкаРеализации.РеализацияТоваров.УникальныйИдентификатор();
		СтруктураДокумента.Номер=ВыборкаРеализации.РеализацияТоваров.Номер;
		Если ВыборкаРеализации.ТТН=null Тогда 
			СтруктураДокумента.ПризнакЗагрузки=0;
		иначе
			СтруктураДокумента.ПризнакЗагрузки=1;
		КонецЕсли;
		СтруктураДокумента.Филиал=ДанныеНастроек.Филиал;
		СтрокаСФилиалом=ДанныеНастроек.СоответствиеФилиаловИКа.Найти(ВыборкаРеализации.РеализацияТоваров.Контрагент);
		СтруктураДокумента.ФилиалПриемник=СтрокаСФилиалом.Филиал;
		ЗаполнитьЗначенияСвойств(СтруктураДокумента.транспортнаяИнформация,ВыборкаРеализации);
		ВыборкаДетальныеЗаписи=ВыборкаРеализации.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяЗапись=СтруктураДокумента.ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,ВыборкаДетальныеЗаписи);
			НоваяЗапись.СуммаВсего=ВыборкаДетальныеЗаписи.Сумма;
			НоваяЗапись.НДС = ВыборкаДетальныеЗаписи.СуммаНДС;
		КонецЦикла;
		СтруктураЗаписиДанных=новый Структура;
		СтруктураЗаписиДанных.Вставить("СтруктуруХраненияДаннныхДокументов",СтруктураДокумента);
		СтруктураЗаписиДанных.Вставить("КодСправочника","#00000000000");
		СтруктураЗаписиДанных.Вставить("ИмяОбработкиМетаданных","итWMSЗаписьУдалениеДанныхДокументов");
		СтруктураЗаписиДанных.Вставить("ТипМетаданных","Обработка");
		
		ЗапроситьЗаписатьДанныеДокументов(СтруктураЗаписиДанных);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Функция СкопироватьСтруктуру(Структура)
	СтруктураДанных=новый Структура;
	для Каждого Свойства из Структура цикл
		Значение=Свойства.Значение;
		Если ТипЗнч(Значение)=Тип("ТаблицаЗначений") тогда
			Значение.Очистить();
		ИначеЕсли ТипЗнч(Значение)=Тип("Структура") Тогда 
			Значение=СкопироватьСтруктуру(Значение);
		иначе
			Значение="";
		КонецЕсли;
		СтруктураДанных.Вставить(Свойства.Ключ,Значение);
	КонецЦикла;
	Возврат СтруктураДанных;
КонецФункции

Процедура ПолучитьДокументыКзаписи(МенеджерВременныхТаблиц,СтруктуруХраненияДаннныхДокументов)
	ТаблицаДанныхКПроверке=новый ТаблицаЗначений;
	ТаблицаДанныхКПроверке.Колонки.Добавить("ДокументГУИД",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(36)));
	ТаблицаДанныхКПроверке.Колонки.Добавить("ВерсияДанных",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(36)));
	для Каждого стр из СтруктуруХраненияДаннныхДокументов.ВерсииОбъектов цикл
		НоваяСтрока=ТаблицаДанныхКПроверке.Добавить();	
		НоваяСтрока.ДокументГУИД=Строка(стр.Документ);
		НоваяСтрока.ВерсияДанных=стр.ВерсияДанных;
	КонецЦикла;
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	ВТ.ДокументГУИД,
	|	ВТ.ВерсияДанных
	|ПОМЕСТИТЬ ВтДанныеДокументовКонсолидация
	|ИЗ
	|	&ВТ КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДокументыСГуидВСтроке.Ссылка,
	|	ВтДокументыСГуидВСтроке.ЕгаисДокумент,
	|	ВтДокументыСГуидВСтроке.ВерсияДанных,
	|	ВтДокументыСГуидВСтроке.ДокументГУИД
	|ПОМЕСТИТЬ ДокументыКВыгрузке
	|ИЗ
	|	ВтДокументыСГуидВСтроке КАК ВтДокументыСГуидВСтроке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеДокументовКонсолидация КАК ВтДанныеДокументовКонсолидация
	|		ПО (ПОДСТРОКА(ВтДокументыСГуидВСтроке.ДокументГУИД, 1, 36) = ПОДСТРОКА(ВтДанныеДокументовКонсолидация.ДокументГУИД, 1, 36))
	|			И (ПОДСТРОКА(ВтДокументыСГуидВСтроке.ВерсияДанных, 1, 36) = ПОДСТРОКА(ВтДанныеДокументовКонсолидация.ВерсияДанных, 1, 36))
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПОДСТРОКА(ВтДокументыСГуидВСтроке.ВерсияДанных, 1, 36) = ПОДСТРОКА(ВтДанныеДокументовКонсолидация.ВерсияДанных, 1, 36)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Реализация,
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковки,
	|	итWMSНаборкаТовары.Номенклатура,
	|	итWMSНаборкаТовары.СерияНоменклатуры,
	|	итWMSНаборкаТовары.Качество,
	|	итWMSНаборкаТовары.ДатаРозлива,
	|	СУММА(ВЫБОР
	|			КОГДА итWMSНаборкаТовары.ИзъятиеТовара
	|				ТОГДА итWMSНаборкаТовары.КоличествоФакт - итWMSНаборкаТовары.КоличествоИзъятия
	|			ИНАЧЕ итWMSНаборкаТовары.КоличествоФакт
	|		КОНЕЦ) КАК Количество,
	|	ВложенныйЗапрос.ЕгаисДокумент
	|ПОМЕСТИТЬ ДокументыКВыгрузкеПоНаборке
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка КАК Реализация,
	|		ВложенныйЗапрос.ЕгаисДокумент КАК ЕгаисДокумент,
	|		ВложенныйЗапрос.ВерсияДанных КАК ВерсияДанных,
	|		ВложенныйЗапрос.ДокументГУИД КАК ДокументГУИД,
	|		РеализацияТоваровУслуг.итОснование КАК Наборка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДокументыКВыгрузке.Ссылка КАК Ссылка,
	|			ДокументыКВыгрузке.ЕгаисДокумент КАК ЕгаисДокумент,
	|			ДокументыКВыгрузке.ВерсияДанных КАК ВерсияДанных,
	|			ДокументыКВыгрузке.ДокументГУИД КАК ДокументГУИД
	|		ИЗ
	|			ДокументыКВыгрузке КАК ДокументыКВыгрузке) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ПО ВложенныйЗапрос.Ссылка = РеализацияТоваровУслуг.Ссылка) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
	|		ПО ВложенныйЗапрос.Наборка = итWMSНаборкаТовары.Ссылка
	|			И (итWMSНаборкаТовары.Ссылка.Проведен)
	|			И (итWMSНаборкаТовары.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Выполнен), ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Завершен)))
	|ГДЕ
	|	итWMSНаборкаТовары.СостояниеЗадачи = ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.Выполнена)
	|	И итWMSНаборкаТовары.ФиксацияСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Реализация,
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
	|	итWMSНаборкаТовары.Номенклатура,
	|	итWMSНаборкаТовары.СерияНоменклатуры,
	|	итWMSНаборкаТовары.Качество,
	|	итWMSНаборкаТовары.ДатаРозлива,
	|	ВложенныйЗапрос.ЕгаисДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Реализация,
	|	ДокументыКВыгрузкеПоНаборке.ИдентификаторУпаковки,
	|	ДокументыКВыгрузкеПоНаборке.Номенклатура,
	|	ДокументыКВыгрузкеПоНаборке.СерияНоменклатуры,
	|	ДокументыКВыгрузкеПоНаборке.Качество,
	|	ДокументыКВыгрузкеПоНаборке.ДатаРозлива,
	|	СУММА(ДокументыКВыгрузкеПоНаборке.Количество) КАК Количество,
	|	ДокументыКВыгрузкеПоНаборке.ЕгаисДокумент
	|ПОМЕСТИТЬ ВтРеализацииСПМУиБезПМУУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыКВыгрузкеПоНаборке.Реализация КАК Реализация,
	|		СУММА(ВЫБОР
	|				КОГДА ДокументыКВыгрузкеПоНаборке.СерияНоменклатуры.итПризнакПомарочногоУчета
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК ЕстьНеПМУСерия
	|	ИЗ
	|		ДокументыКВыгрузкеПоНаборке КАК ДокументыКВыгрузкеПоНаборке
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокументыКВыгрузкеПоНаборке.Реализация) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыКВыгрузкеПоНаборке КАК ДокументыКВыгрузкеПоНаборке
	|		ПО ВложенныйЗапрос.Реализация = ДокументыКВыгрузкеПоНаборке.Реализация
	|			И (ВложенныйЗапрос.ЕстьНеПМУСерия = 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Реализация,
	|	ДокументыКВыгрузкеПоНаборке.ИдентификаторУпаковки,
	|	ДокументыКВыгрузкеПоНаборке.Номенклатура,
	|	ДокументыКВыгрузкеПоНаборке.СерияНоменклатуры,
	|	ДокументыКВыгрузкеПоНаборке.Качество,
	|	ДокументыКВыгрузкеПоНаборке.ДатаРозлива,
	|	ДокументыКВыгрузкеПоНаборке.ЕгаисДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКВыгрузке.Ссылка,
	|	ДокументыКВыгрузке.ЕгаисДокумент,
	|	ДокументыКВыгрузке.ВерсияДанных,
	|	ДокументыКВыгрузке.ДокументГУИД
	|ПОМЕСТИТЬ ДокументыКВыгрузкеЕгаис
	|ИЗ
	|	ДокументыКВыгрузке КАК ДокументыКВыгрузке
	|ГДЕ
	|	НЕ ДокументыКВыгрузке.ЕгаисДокумент ЕСТЬ NULL
	|	И НЕ ДокументыКВыгрузке.Ссылка В
	|				(ВЫБРАТЬ
	|					ВтРеализацииСПМУиБезПМУУчета.Реализация
	|				ИЗ
	|					ВтРеализацииСПМУиБезПМУУчета КАК ВтРеализацииСПМУиБезПМУУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКВыгрузке.Ссылка,
	|	ДокументыКВыгрузке.ЕгаисДокумент,
	|	ДокументыКВыгрузке.ВерсияДанных,
	|	ДокументыКВыгрузке.ДокументГУИД
	|ПОМЕСТИТЬ ДокументыКВыгрузкеБезSSCC
	|ИЗ
	|	ДокументыКВыгрузке КАК ДокументыКВыгрузке
	|ГДЕ
	|	ДокументыКВыгрузке.ЕгаисДокумент ЕСТЬ NULL
	|	И НЕ ДокументыКВыгрузке.Ссылка В
	|				(ВЫБРАТЬ
	|					ДокументыКВыгрузкеПоНаборке.Реализация
	|				ИЗ
	|					ДокументыКВыгрузкеПоНаборке КАК ДокументыКВыгрузкеПоНаборке
	|				СГРУППИРОВАТЬ ПО
	|					ДокументыКВыгрузкеПоНаборке.Реализация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Реализация,
	|	ВложенныйЗапрос.ИдентификаторУпаковки,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.СерияНоменклатуры,
	|	ВложенныйЗапрос.Качество,
	|	ВложенныйЗапрос.ДатаРозлива,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕгаисДокумент
	|ПОМЕСТИТЬ ВтДанныеНаборок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыКВыгрузкеПоНаборке.Реализация КАК Реализация,
	|		ДокументыКВыгрузкеПоНаборке.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|		ДокументыКВыгрузкеПоНаборке.Номенклатура КАК Номенклатура,
	|		ДокументыКВыгрузкеПоНаборке.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ДокументыКВыгрузкеПоНаборке.Качество КАК Качество,
	|		ДокументыКВыгрузкеПоНаборке.ДатаРозлива КАК ДатаРозлива,
	|		ДокументыКВыгрузкеПоНаборке.Количество КАК Количество,
	|		ДокументыКВыгрузкеПоНаборке.ЕгаисДокумент КАК ЕгаисДокумент
	|	ИЗ
	|		ДокументыКВыгрузкеПоНаборке КАК ДокументыКВыгрузкеПоНаборке
	|	ГДЕ
	|		ДокументыКВыгрузкеПоНаборке.ЕгаисДокумент ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВтРеализацииСПМУиБезПМУУчета.Реализация,
	|		ВтРеализацииСПМУиБезПМУУчета.ИдентификаторУпаковки,
	|		ВтРеализацииСПМУиБезПМУУчета.Номенклатура,
	|		ВтРеализацииСПМУиБезПМУУчета.СерияНоменклатуры,
	|		ВтРеализацииСПМУиБезПМУУчета.Качество,
	|		ВтРеализацииСПМУиБезПМУУчета.ДатаРозлива,
	|		ВтРеализацииСПМУиБезПМУУчета.Количество,
	|		ВтРеализацииСПМУиБезПМУУчета.ЕгаисДокумент
	|	ИЗ
	|		ВтРеализацииСПМУиБезПМУУчета КАК ВтРеализацииСПМУиБезПМУУчета) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Реализация,
	|	ВложенныйЗапрос.ИдентификаторУпаковки,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.СерияНоменклатуры,
	|	ВложенныйЗапрос.Качество,
	|	ВложенныйЗапрос.ДатаРозлива,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕгаисДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.СправкаБ
	|ПОМЕСТИТЬ СправкиБТТн
	|ИЗ
	|	ДокументыКВыгрузкеЕгаис КАК ДокументыКВыгрузкеЕгаис
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.алкТоварноТранспортнаяНакладнаяЕГАИС.Товары КАК алкТоварноТранспортнаяНакладнаяЕГАИСТовары
	|		ПО ДокументыКВыгрузкеЕгаис.ЕгаисДокумент = алкТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.СправкаБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры,
	|	СправкиБТТн.СправкаБ,
	|	Номенклатура.итИдентификаторНоменклатурнойПозиции
	|ПОМЕСТИТЬ СправкаБиСерии
	|ИЗ
	|	СправкиБТТн КАК СправкиБТТн
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|			ПО алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец = Номенклатура.Ссылка
	|		ПО СправкиБТТн.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
	|
	|СГРУППИРОВАТЬ ПО
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры,
	|	СправкиБТТн.СправкаБ,
	|	Номенклатура.итИдентификаторНоменклатурнойПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	алкТоварноТранспортнаяНакладнаяЕГАИСУпаковки.Упаковка,
	|	алкТоварноТранспортнаяНакладнаяЕГАИСУпаковки.ИерархияУпаковки,
	|	ДокументыКВыгрузкеЕгаис.Ссылка КАК РеализацияТоваров,
	|	ДокументыКВыгрузкеЕгаис.ЕгаисДокумент КАК ТТН
	|ПОМЕСТИТЬ РеализацияИТТнСидентификаторами
	|ИЗ
	|	ДокументыКВыгрузкеЕгаис КАК ДокументыКВыгрузкеЕгаис
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.алкТоварноТранспортнаяНакладнаяЕГАИС.Упаковки КАК алкТоварноТранспортнаяНакладнаяЕГАИСУпаковки
	|		ПО ДокументыКВыгрузкеЕгаис.ЕгаисДокумент = алкТоварноТранспортнаяНакладнаяЕГАИСУпаковки.Ссылка
	|ГДЕ
	|	алкТоварноТранспортнаяНакладнаяЕГАИСУпаковки.ИерархияУпаковки <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	алкТоварноТранспортнаяНакладнаяЕГАИСУпаковки.Упаковка,
	|	алкТоварноТранспортнаяНакладнаяЕГАИСУпаковки.ИерархияУпаковки,
	|	ДокументыКВыгрузкеЕгаис.Ссылка,
	|	ДокументыКВыгрузкеЕгаис.ЕгаисДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияИТТнСидентификаторами.РеализацияТоваров,
	|	РеализацияИТТнСидентификаторами.ТТН,
	|	РеализацияИТТнСидентификаторами.ИерархияУпаковки КАК SSCC,
	|	алкТоварноТранспортнаяНакладнаяЕГАИСАкцизныеМарки.КодАкцизнойМарки КАК Марка,
	|	алкТоварноТранспортнаяНакладнаяЕГАИСАкцизныеМарки.КлючСвязи
	|ПОМЕСТИТЬ ВтДанныеПоИдентификаторомДетально
	|ИЗ
	|	РеализацияИТТнСидентификаторами КАК РеализацияИТТнСидентификаторами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.алкТоварноТранспортнаяНакладнаяЕГАИС.АкцизныеМарки КАК алкТоварноТранспортнаяНакладнаяЕГАИСАкцизныеМарки
	|		ПО РеализацияИТТнСидентификаторами.Упаковка = алкТоварноТранспортнаяНакладнаяЕГАИСАкцизныеМарки.НомерКоробки
	|			И РеализацияИТТнСидентификаторами.ТТН = алкТоварноТранспортнаяНакладнаяЕГАИСАкцизныеМарки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеПоИдентификаторомДетально.РеализацияТоваров,
	|	ВтДанныеПоИдентификаторомДетально.ТТН,
	|	ВтДанныеПоИдентификаторомДетально.SSCC,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеПоИдентификаторомДетально.Марка) КАК Количество,
	|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.СправкаБ,
	|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.Цена
	|ПОМЕСТИТЬ ВтДанныеПоИдентификаторомГруппировка
	|ИЗ
	|	ВтДанныеПоИдентификаторомДетально КАК ВтДанныеПоИдентификаторомДетально
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.алкТоварноТранспортнаяНакладнаяЕГАИС.Товары КАК алкТоварноТранспортнаяНакладнаяЕГАИСТовары
	|		ПО ВтДанныеПоИдентификаторомДетально.КлючСвязи = алкТоварноТранспортнаяНакладнаяЕГАИСТовары.КлючСвязи
	|			И ВтДанныеПоИдентификаторомДетально.ТТН = алкТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеПоИдентификаторомДетально.РеализацияТоваров,
	|	ВтДанныеПоИдентификаторомДетально.ТТН,
	|	ВтДанныеПоИдентификаторомДетально.SSCC,
	|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.СправкаБ,
	|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеПоИдентификаторомГруппировка.РеализацияТоваров,
	|	ВтДанныеПоИдентификаторомГруппировка.ТТН,
	|	ВтДанныеПоИдентификаторомГруппировка.SSCC,
	|	ВтДанныеПоИдентификаторомГруппировка.Количество,
	|	СправкаБиСерии.итИдентификаторНоменклатурнойПозиции КАК ИТП,
	|	ВЫБОР
	|		КОГДА СправкаБиСерии.СерияНоменклатуры.алкДатаНачалаРозлива = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА СправкаБиСерии.СерияНоменклатуры.алкДатаКонцаРозлива
	|		ИНАЧЕ СправкаБиСерии.СерияНоменклатуры.алкДатаНачалаРозлива
	|	КОНЕЦ КАК ДатаРозлива,
	|	ЕСТЬNULL(ВтДанныеПоИдентификаторомГруппировка.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ВтДанныеПоИдентификаторомГруппировка.Цена, 0) * ЕСТЬNULL(ВтДанныеПоИдентификаторомГруппировка.Количество, 0) КАК Сумма,
	|	СправкаБиСерии.СерияНоменклатуры
	|ПОМЕСТИТЬ ИтоговыеДанныеПоПаллетно
	|ИЗ
	|	ВтДанныеПоИдентификаторомГруппировка КАК ВтДанныеПоИдентификаторомГруппировка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправкаБиСерии КАК СправкаБиСерии
	|		ПО ВтДанныеПоИдентификаторомГруппировка.СправкаБ = СправкаБиСерии.СправкаБ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеПоИдентификаторомГруппировка.РеализацияТоваров,
	|	ВтДанныеПоИдентификаторомГруппировка.ТТН,
	|	ВтДанныеПоИдентификаторомГруппировка.SSCC,
	|	ВтДанныеПоИдентификаторомГруппировка.Количество,
	|	СправкаБиСерии.итИдентификаторНоменклатурнойПозиции,
	|	ВЫБОР
	|		КОГДА СправкаБиСерии.СерияНоменклатуры.алкДатаНачалаРозлива = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА СправкаБиСерии.СерияНоменклатуры.алкДатаКонцаРозлива
	|		ИНАЧЕ СправкаБиСерии.СерияНоменклатуры.алкДатаНачалаРозлива
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВтДанныеПоИдентификаторомГруппировка.Цена, 0),
	|	ЕСТЬNULL(ВтДанныеПоИдентификаторомГруппировка.Цена, 0) * ЕСТЬNULL(ВтДанныеПоИдентификаторомГруппировка.Количество, 0),
	|	СправкаБиСерии.СерияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыеДанныеПоПаллетно.РеализацияТоваров,
	|	ИтоговыеДанныеПоПаллетно.ТТН,
	|	ИтоговыеДанныеПоПаллетно.SSCC,
	|	ИтоговыеДанныеПоПаллетно.Количество,
	|	ИтоговыеДанныеПоПаллетно.ИТП,
	|	ИтоговыеДанныеПоПаллетно.ДатаРозлива,
	|	ИтоговыеДанныеПоПаллетно.Цена,
	|	ИтоговыеДанныеПоПаллетно.Сумма,
	|	ИтоговыеДанныеПоПаллетно.СерияНоменклатуры,
	|	МАКСИМУМ(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ИтоговыеДанныеПоПпаллетноСНДС
	|ИЗ
	|	ИтоговыеДанныеПоПаллетно КАК ИтоговыеДанныеПоПаллетно
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО ИтоговыеДанныеПоПаллетно.Цена = РеализацияТоваровУслугТовары.Цена
	|			И ИтоговыеДанныеПоПаллетно.РеализацияТоваров = РеализацияТоваровУслугТовары.Ссылка
	|			И ИтоговыеДанныеПоПаллетно.СерияНоменклатуры = РеализацияТоваровУслугТовары.СерияНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговыеДанныеПоПаллетно.РеализацияТоваров,
	|	ИтоговыеДанныеПоПаллетно.ТТН,
	|	ИтоговыеДанныеПоПаллетно.SSCC,
	|	ИтоговыеДанныеПоПаллетно.Количество,
	|	ИтоговыеДанныеПоПаллетно.ИТП,
	|	ИтоговыеДанныеПоПаллетно.ДатаРозлива,
	|	ИтоговыеДанныеПоПаллетно.Цена,
	|	ИтоговыеДанныеПоПаллетно.Сумма,
	|	ИтоговыеДанныеПоПаллетно.СерияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеНаборок.Реализация,
	|	ВтДанныеНаборок.ИдентификаторУпаковки,
	|	ВтДанныеНаборок.Номенклатура,
	|	ВтДанныеНаборок.СерияНоменклатуры,
	|	ВтДанныеНаборок.Качество,
	|	ВтДанныеНаборок.ДатаРозлива,
	|	ВтДанныеНаборок.Количество,
	|	ВтДанныеНаборок.ЕгаисДокумент,
	|	МАКСИМУМ(ВложенныйЗапрос.Цена) КАК Цена,
	|	МАКСИМУМ(ЕСТЬNULL(ВложенныйЗапрос.Цена, 0) * ЕСТЬNULL(ВтДанныеНаборок.Количество, 0)) КАК Сумма,
	|	МАКСИМУМ(ЕСТЬNULL(ВложенныйЗапрос.СуммаНДС, 0) / ЕСТЬNULL(ВложенныйЗапрос.Количество, 1) * ВтДанныеНаборок.Количество) КАК СуммаНДС
	|ПОМЕСТИТЬ ВтДанныеНаборкСЦенамиРеализации
	|ИЗ
	|	ВтДанныеНаборок КАК ВтДанныеНаборок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|			РеализацияТоваровУслугТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|			СРЕДНЕЕ(РеализацияТоваровУслугТовары.Цена) КАК Цена,
	|			СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|			СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|			ВтДанныеНаборок.Реализация КАК Реализация,
	|			СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
	|		ИЗ
	|			ВтДанныеНаборок КАК ВтДанныеНаборок
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|				ПО ВтДанныеНаборок.Реализация = РеализацияТоваровУслугТовары.Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РеализацияТоваровУслугТовары.Номенклатура,
	|			РеализацияТоваровУслугТовары.СерияНоменклатуры,
	|			ВтДанныеНаборок.Реализация) КАК ВложенныйЗапрос
	|		ПО ВтДанныеНаборок.Реализация = ВложенныйЗапрос.Реализация
	|			И ВтДанныеНаборок.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И ВтДанныеНаборок.СерияНоменклатуры = ВложенныйЗапрос.СерияНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеНаборок.Реализация,
	|	ВтДанныеНаборок.ИдентификаторУпаковки,
	|	ВтДанныеНаборок.Номенклатура,
	|	ВтДанныеНаборок.СерияНоменклатуры,
	|	ВтДанныеНаборок.Качество,
	|	ВтДанныеНаборок.ДатаРозлива,
	|	ВтДанныеНаборок.Количество,
	|	ВтДанныеНаборок.ЕгаисДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИтоговыеДанныеПоПаллетно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеДокументовКонсолидация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РеализацияИТТнСидентификаторами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыКВыгрузке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыКВыгрузкеЕгаис
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СправкиБТТн
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СправкаБиСерии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеПоИдентификаторомДетально
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеПоИдентификаторомГруппировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыКВыгрузкеПоНаборке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтРеализацииСПМУиБезПМУУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеНаборок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКВыгрузкеБезSSCC.Ссылка КАК РеализацияТоваров,
	|	NULL КАК ТТН,
	|	"""" КАК SSCC,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	РеализацияТоваровУслугТовары.Номенклатура.итИдентификаторНоменклатурнойПозиции КАК ИТП,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.СерияНоменклатуры.алкДатаНачалаРозлива = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РеализацияТоваровУслугТовары.СерияНоменклатуры.алкДатаКонцаРозлива
	|		ИНАЧЕ РеализацияТоваровУслугТовары.СерияНоменклатуры.алкДатаНачалаРозлива
	|	КОНЕЦ КАК ДатаРозлива,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ДанныеДокументовПоТранзиту
	|ИЗ
	|	ДокументыКВыгрузкеБезSSCC КАК ДокументыКВыгрузкеБезSSCC
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО ДокументыКВыгрузкеБезSSCC.Ссылка = РеализацияТоваровУслугТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИтоговыеДанныеПоПпаллетноСНДС.РеализацияТоваров,
	|	ИтоговыеДанныеПоПпаллетноСНДС.ТТН,
	|	ИтоговыеДанныеПоПпаллетноСНДС.SSCC,
	|	ИтоговыеДанныеПоПпаллетноСНДС.Количество,
	|	ИтоговыеДанныеПоПпаллетноСНДС.ИТП,
	|	ИтоговыеДанныеПоПпаллетноСНДС.ДатаРозлива,
	|	ИтоговыеДанныеПоПпаллетноСНДС.Цена,
	|	ИтоговыеДанныеПоПпаллетноСНДС.Сумма,
	|	ИтоговыеДанныеПоПпаллетноСНДС.СуммаНДС
	|ИЗ
	|	ИтоговыеДанныеПоПпаллетноСНДС КАК ИтоговыеДанныеПоПпаллетноСНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтДанныеНаборкСЦенамиРеализации.Реализация,
	|	ЕСТЬNULL(ВтДанныеНаборкСЦенамиРеализации.ЕгаисДокумент, НЕОПРЕДЕЛЕНО),
	|	ВтДанныеНаборкСЦенамиРеализации.ИдентификаторУпаковки,
	|	ВтДанныеНаборкСЦенамиРеализации.Количество,
	|	ВтДанныеНаборкСЦенамиРеализации.Номенклатура.итИдентификаторНоменклатурнойПозиции,
	|	ВтДанныеНаборкСЦенамиРеализации.ДатаРозлива,
	|	ВтДанныеНаборкСЦенамиРеализации.Цена,
	|	ВтДанныеНаборкСЦенамиРеализации.Сумма,
	|	ВтДанныеНаборкСЦенамиРеализации.СуммаНДС
	|ИЗ
	|	ВтДанныеНаборкСЦенамиРеализации КАК ВтДанныеНаборкСЦенамиРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыКВыгрузкеБезSSCC
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИтоговыеДанныеПоПпаллетноСНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеНаборкСЦенамиРеализации";
	
	
	Запрос.УстановитьПараметр("ВТ",ТаблицаДанныхКПроверке);
	Запрос.Выполнить();
КонецПроцедуры

Процедура ЗаполнитьСписокДокументовКОбработке(МенеджерВременныхТаблиц,ДатаНачалаОбновления,ДатаОкончанияОбновления,МассивДокументов,МассивКа)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ПОМЕСТИТЬ ВтРеализация
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|	И РеализацияТоваровУслуг.Контрагент В(&МассивКа)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтРеализация.Ссылка,
	|	алкСоответствияДокументовЕГАИСИУчетныхДокументов.ДокументЕГАИС
	|ПОМЕСТИТЬ ДокументыСТТН
	|ИЗ
	|	ВтРеализация КАК ВтРеализация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияДокументовЕГАИСИУчетныхДокументов КАК алкСоответствияДокументовЕГАИСИУчетныхДокументов
	|		ПО ВтРеализация.Ссылка = алкСоответствияДокументовЕГАИСИУчетныхДокументов.УчетныйДокумент
	|			И (ТИПЗНАЧЕНИЯ(алкСоответствияДокументовЕГАИСИУчетныхДокументов.ДокументЕГАИС) = ТИП(Документ.алкТоварноТранспортнаяНакладнаяЕГАИС))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСТТН.Ссылка,
	|	ДокументыСТТН.ДокументЕГАИС,
	|	МАКСИМУМ(ЕСТЬNULL(алкТоварноТранспортнаяНакладнаяЕГАИСУпаковки.Упаковка, ""-1"")) КАК МаксимальнаяУпаковка
	|ПОМЕСТИТЬ ПоискУпаковокСМаркамиВДокументах
	|ИЗ
	|	ДокументыСТТН КАК ДокументыСТТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.алкТоварноТранспортнаяНакладнаяЕГАИС.Упаковки КАК алкТоварноТранспортнаяНакладнаяЕГАИСУпаковки
	|		ПО ДокументыСТТН.ДокументЕГАИС = алкТоварноТранспортнаяНакладнаяЕГАИСУпаковки.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыСТТН.Ссылка,
	|	ДокументыСТТН.ДокументЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоискУпаковокСМаркамиВДокументах.Ссылка,
	|	ПоискУпаковокСМаркамиВДокументах.ДокументЕГАИС,
	|	ПоискУпаковокСМаркамиВДокументах.МаксимальнаяУпаковка
	|ПОМЕСТИТЬ ДокументыСМарками
	|ИЗ
	|	ПоискУпаковокСМаркамиВДокументах КАК ПоискУпаковокСМаркамиВДокументах
	|ГДЕ
	|	ПоискУпаковокСМаркамиВДокументах.МаксимальнаяУпаковка <> ""-1""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСМарками.Ссылка,
	|	ДокументыСМарками.ДокументЕГАИС
	|ПОМЕСТИТЬ ПодтвержденныеДокументы
	|ИЗ
	|	ДокументыСМарками КАК ДокументыСМарками
	|ГДЕ
	|	ДокументыСМарками.ДокументЕГАИС.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.алкСтатусыДокументовЕГАИС.Подтвержден)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСМарками.Ссылка,
	|	ДокументыСМарками.ДокументЕГАИС
	|ПОМЕСТИТЬ НеПодтвержденныеДокументы
	|ИЗ
	|	ДокументыСМарками КАК ДокументыСМарками
	|ГДЕ
	|	ДокументыСМарками.ДокументЕГАИС.СтатусДокумента <> ЗНАЧЕНИЕ(Перечисление.алкСтатусыДокументовЕГАИС.Подтвержден)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтРеализация.Ссылка,
	|	NULL КАК ЕгаисДокумент
	|ПОМЕСТИТЬ ДокументыКВыгрузкеОбъединение
	|ИЗ
	|	ВтРеализация КАК ВтРеализация
	|ГДЕ
	|	НЕ ВтРеализация.Ссылка В
	|				(ВЫБРАТЬ
	|					ДокументыСМарками.Ссылка
	|				ИЗ
	|					ДокументыСМарками КАК ДокументыСМарками)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодтвержденныеДокументы.Ссылка,
	|	ПодтвержденныеДокументы.ДокументЕГАИС
	|ИЗ
	|	ПодтвержденныеДокументы КАК ПодтвержденныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКВыгрузкеОбъединение.Ссылка,
	|	МАКСИМУМ(ДокументыКВыгрузкеОбъединение.ЕгаисДокумент) КАК ЕгаисДокумент,
	|	ДокументыКВыгрузкеОбъединение.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ДокументыКВыгрузке
	|ИЗ
	|	ДокументыКВыгрузкеОбъединение КАК ДокументыКВыгрузкеОбъединение
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыКВыгрузкеОбъединение.Ссылка,
	|	ДокументыКВыгрузкеОбъединение.Ссылка.ВерсияДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтРеализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыСМарками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПодтвержденныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыКВыгрузкеОбъединение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыСТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПоискУпаковокСМаркамиВДокументах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НеПодтвержденныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКВыгрузке.Ссылка,
	|	ДокументыКВыгрузке.ЕгаисДокумент,
	|	ДокументыКВыгрузке.ВерсияДанных
	|ИЗ
	|	ДокументыКВыгрузке КАК ДокументыКВыгрузке";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаОбновления);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияОбновления);
	Запрос.УстановитьПараметр("МассивКа",МассивКа);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	РезультатЗапроса.Колонки.Добавить("ДокументГУИД",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(36)));
	
	для Каждого Стр из РезультатЗапроса цикл
		Стр.ДокументГУИД=Строка(Стр.Ссылка.УникальныйИдентификатор());
		МассивДокументов.Добавить(Стр.Ссылка.УникальныйИдентификатор());
	КонецЦикла;
	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВтДанныеДокументов.Ссылка,
	|	ВтДанныеДокументов.ВерсияДанных,
	|	ВтДанныеДокументов.ЕгаисДокумент,
	|	ВтДанныеДокументов.ДокументГУИД
	|ПОМЕСТИТЬ ВтДокументыСГуидВСтроке
	|ИЗ
	|	&ВтДанныеДокументов КАК ВтДанныеДокументов";
	
	Запрос.УстановитьПараметр("ВтДанныеДокументов",РезультатЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаСобытия
Процедура итWMSЗаврешениеКОАПриПереупаковкеОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если ТипЗнч(Источник.ДокументОснование)=Тип("ДокументСсылка.итWMSКонтрольнаяОперацияАгрегации") тогда
		Если Источник.ДокументОснование.итОснование=Неопределено Тогда 
			ОбъектКоа=Источник.ДокументОснование.ПолучитьОбъект();
			ОбъектКоа.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен;
			ОбъектКоа.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура итWMSПроверкаНаНеОтрицательныеОстаткиОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	ОтказДоИзменения=Отказ;
	ЕстьКолонкаСостояниеЗадачи=Ложь;
	Если Источник.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("СостояниеЗадачи") <> Неопределено тогда
		ЕстьКолонкаСостояниеЗадачи=Истина
	КонецЕсли;
	Отменена=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
	МассивНМ=новый Массив;
	Если ЕстьКолонкаСостояниеЗадачи Тогда
		Для Каждого стр из Источник.Товары Цикл 
			Если стр.СостояниеЗадачи<>Отменена Тогда
				МассивНМ.Добавить(стр.Номенклатура);
			КонецЕсли;
		КонецЦикла;
	иначе
		Для Каждого стр из Источник.Товары Цикл 
			МассивНМ.Добавить(стр.Номенклатура);
		КонецЦикла;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итТоварыВЯчейкахОстатки.Организация КАК Организация,
		|	итТоварыВЯчейкахОстатки.Склад КАК Склад,
		|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	итТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	итТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
		|	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
		|	итТоварыВЯчейкахОстатки.Качество КАК Качество,
		|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток КАК ОстатокЗаМинусомРезерва
		|ИЗ
		|	РегистрНакопления.итТоварыВЯчейках.Остатки(
		|			,
		|			Ячейка <> &СистемнаяЯчейка
		|				И Номенклатура В (&МассивНМ)) КАК итТоварыВЯчейкахОстатки
		|ГДЕ
		|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток < 0";
	
	Запрос.УстановитьПараметр("МассивНМ", МассивНМ);
	Запрос.УстановитьПараметр("СистемнаяЯчейка", Константы.СистемнаяЯчейка.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Сообщение="";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Отказ=Истина;
		Сообщение=Сообщение+"
		| Отрицательные остатки с учетом резерва по товару с параметрами:";
		Для Каждого Колонка из РезультатЗапроса.Колонки цикл
			Сообщение=Сообщение+" "+Колонка.Имя+" "+Строка(ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
	КонецЦикла;
	Если Отказ Тогда
		Отказ=ОтказДоИзменения;
		Сообщить(Сообщение);
		///Гвозди гифт
		//Если РольДоступна("ИгнорироватьОшибки") Тогда 
		//	Отказ=ОтказДоИзменения;
		//	Сообщить("Полные права, проверка игнорируется");
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область РегламентноеПополнениеСтока
Процедура ЦентральныйОбработчикПополненияСтока() Экспорт 
	Данные=ПолучитьНастройкиИзХранилища();
	Данные=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если ТипЗнч(Данные)=Тип("Структура") тогда
		Если не Данные.Свойство("СистемнаяЯчейка") Тогда 
			ЗаписьЖурналаРегистрации("ПополненияСтока",,,,"нет данных по системной ячейке wms",);
			Возврат
		КонецЕсли;	
		Если не Данные.Свойство("СписокСкладовДляПеремещенияВСток") Тогда 
			ЗаписьЖурналаРегистрации("ПополненияСтока",,,,"нет данных по списку складов стока",);
			Возврат
		КонецЕсли;
	иначе
		ЗаписьЖурналаРегистрации("ПополненияСтока",,,,"неверный тип данных хранилища",);
		Возврат
	КонецЕсли;
	
	
	
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	ЗаполнитьНоменклатуруКПополнению(МенеджерВременныхТаблиц,Данные);
	СоздатьДокументыПеремещенияИЗаполнитьИхДанными(МенеджерВременныхТаблиц,Данные);
КонецПроцедуры

Процедура СоздатьДокументыПеремещенияИЗаполнитьИхДанными(МенеджерВременныхТаблиц,Данные)
	СоздатьWMSПеремещение(МенеджерВременныхТаблиц,Данные);
	СоздатьОРТПеремещение(МенеджерВременныхТаблиц,Данные)
КонецПроцедуры

Процедура СоздатьWMSПеремещение(МенеджерВременныхТаблиц,Данные)
	
	
	Запрос=новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	итТоварыВЯчейкахРезерв.Номенклатура КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА итТоварыВЯчейкахРезерв.ВидДвижения = ЗНАЧЕНИЕ(видДвиженияНакопления.Расход)
	|				ТОГДА -ЕСТЬNULL(итТоварыВЯчейкахРезерв.Количество, 0)
	|			ИНАЧЕ ЕСТЬNULL(итТоварыВЯчейкахРезерв.Количество, 0)
	|		КОНЕЦ) КАК КоличествоИзлишнегоДвижения,
	|	итТоварыВЯчейкахРезерв.Склад,
	|	итТоварыВЯчейкахРезерв.ЯчейкаОтправитель,
	|	итТоварыВЯчейкахРезерв.Ячейка,
	|	итТоварыВЯчейкахРезерв.СерияНоменклатуры,
	|	итТоварыВЯчейкахРезерв.Характеристика,
	|	итТоварыВЯчейкахРезерв.ДатаРозлива,
	|	итТоварыВЯчейкахРезерв.Качество,
	|	итТоварыВЯчейкахРезерв.ИдентификаторУпаковки
	|ПОМЕСТИТЬ ВтИзлишнееДвижениеПоРезерву
	|ИЗ
	|	РегистрНакопления.итТоварыВЯчейкахРезерв КАК итТоварыВЯчейкахРезерв
	|ГДЕ
	|	итТоварыВЯчейкахРезерв.Регистратор.ВидОперации = ЗНАЧЕНИЕ(перечисление.итВидыОперацийОтгрузкиРазмещенияТоваров.Перемещение)
	|	И итТоварыВЯчейкахРезерв.Регистратор.Проведен = ИСТИНА
	|	И итТоварыВЯчейкахРезерв.Регистратор.СтатусДокумента <> ЗНАЧЕНИЕ(Перечисление.итСтатусыДокументовОРТ.Исполнен)
	|	И итТоварыВЯчейкахРезерв.Ячейка <> &СистемнаяЯчейка
	|
	|СГРУППИРОВАТЬ ПО
	|	итТоварыВЯчейкахРезерв.Номенклатура,
	|	итТоварыВЯчейкахРезерв.Склад,
	|	итТоварыВЯчейкахРезерв.ЯчейкаОтправитель,
	|	итТоварыВЯчейкахРезерв.Ячейка,
	|	итТоварыВЯчейкахРезерв.СерияНоменклатуры,
	|	итТоварыВЯчейкахРезерв.Характеристика,
	|	итТоварыВЯчейкахРезерв.ДатаРозлива,
	|	итТоварыВЯчейкахРезерв.Качество,
	|	итТоварыВЯчейкахРезерв.ИдентификаторУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварСНехваткойСтока.Номенклатура,
	|	ТоварСНехваткойСтока.КоличествоОстаток,
	|	ТоварСНехваткойСтока.ЕдиницаХраненияОстатков,
	|	ТоварСНехваткойСтока.Коэффициент,
	|	ТоварСНехваткойСтока.КоличествоНаПаллете,
	|	ТоварСНехваткойСтока.КоличествоПаллет,
	|	ТоварСНехваткойСтока.НормыХраненияСтока,
	|	ТоварСНехваткойСтока.КоличествоПаллетКПополнению
	|ПОМЕСТИТЬ ТоварСНехваткойСтока1
	|ИЗ
	|	ТоварСНехваткойСтока КАК ТоварСНехваткойСтока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварСНехваткойСтока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварСНехваткойСтока1.Номенклатура,
	|	ТоварСНехваткойСтока1.КоличествоОстаток,
	|	ТоварСНехваткойСтока1.ЕдиницаХраненияОстатков,
	|	ТоварСНехваткойСтока1.Коэффициент,
	|	ТоварСНехваткойСтока1.КоличествоНаПаллете,
	|	ТоварСНехваткойСтока1.КоличествоПаллет,
	|	ТоварСНехваткойСтока1.НормыХраненияСтока,
	|	ТоварСНехваткойСтока1.КоличествоПаллетКПополнению
	|ПОМЕСТИТЬ ТоварСНехваткойСтока
	|ИЗ
	|	ТоварСНехваткойСтока1 КАК ТоварСНехваткойСтока1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварСНехваткойСтока1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Склад,
	|	итТоварыВЯчейкахОстатки.Ячейка,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.Номенклатура,
	|	итТоварыВЯчейкахОстатки.Характеристика,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиНеобходимогоТовараКДвижению
	|ИЗ
	|	ТоварСНехваткойСтока КАК ТоварСНехваткойСтока
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(
	|				,
	|				Ячейка.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Хранения)
	|					И Ячейка <> &СистемнаяЯчейка
	|					И Склад В (&Склады)) КАК итТоварыВЯчейкахОстатки
	|		ПО ТоварСНехваткойСтока.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахРезервОстатки.Склад,
	|	итТоварыВЯчейкахРезервОстатки.ЯчейкаОтправитель,
	|	итТоварыВЯчейкахРезервОстатки.ИдентификаторУпаковки,
	|	итТоварыВЯчейкахРезервОстатки.Номенклатура,
	|	итТоварыВЯчейкахРезервОстатки.Характеристика,
	|	итТоварыВЯчейкахРезервОстатки.СерияНоменклатуры,
	|	итТоварыВЯчейкахРезервОстатки.ДатаРозлива,
	|	итТоварыВЯчейкахРезервОстатки.Качество,
	|	-(ЕСТЬNULL(итТоварыВЯчейкахРезервОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ВтИзлишнееДвижениеПоРезерву.КоличествоИзлишнегоДвижения, 0))
	|ИЗ
	|	ТоварСНехваткойСтока КАК ТоварСНехваткойСтока
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейкахРезерв.Остатки(
	|				,
	|				ЯчейкаОтправитель <> &СистемнаяЯчейка
	|					И ЯчейкаОтправитель.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Хранения)
	|					И Склад В (&Склады)) КАК итТоварыВЯчейкахРезервОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтИзлишнееДвижениеПоРезерву КАК ВтИзлишнееДвижениеПоРезерву
	|			ПО итТоварыВЯчейкахРезервОстатки.Склад = ВтИзлишнееДвижениеПоРезерву.Склад
	|				И итТоварыВЯчейкахРезервОстатки.ЯчейкаОтправитель = ВтИзлишнееДвижениеПоРезерву.ЯчейкаОтправитель
	|				И итТоварыВЯчейкахРезервОстатки.Ячейка = ВтИзлишнееДвижениеПоРезерву.Ячейка
	|				И итТоварыВЯчейкахРезервОстатки.Номенклатура = ВтИзлишнееДвижениеПоРезерву.Номенклатура
	|				И итТоварыВЯчейкахРезервОстатки.СерияНоменклатуры = ВтИзлишнееДвижениеПоРезерву.СерияНоменклатуры
	|				И итТоварыВЯчейкахРезервОстатки.ДатаРозлива = ВтИзлишнееДвижениеПоРезерву.ДатаРозлива
	|				И итТоварыВЯчейкахРезервОстатки.ИдентификаторУпаковки = ВтИзлишнееДвижениеПоРезерву.ИдентификаторУпаковки
	|				И итТоварыВЯчейкахРезервОстатки.Качество = ВтИзлишнееДвижениеПоРезерву.Качество
	|		ПО ТоварСНехваткойСтока.Номенклатура = итТоварыВЯчейкахРезервОстатки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНеобходимогоТовараКДвижению.Склад,
	|	ОстаткиНеобходимогоТовараКДвижению.Ячейка,
	|	ОстаткиНеобходимогоТовараКДвижению.ИдентификаторУпаковки,
	|	ОстаткиНеобходимогоТовараКДвижению.Номенклатура,
	|	ОстаткиНеобходимогоТовараКДвижению.Характеристика,
	|	ОстаткиНеобходимогоТовараКДвижению.СерияНоменклатуры,
	|	ОстаткиНеобходимогоТовараКДвижению.ДатаРозлива,
	|	ОстаткиНеобходимогоТовараКДвижению.Качество,
	|	СУММА(ОстаткиНеобходимогоТовараКДвижению.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиНеобходимогоТовараКДвижениюГруппировка
	|ИЗ
	|	ОстаткиНеобходимогоТовараКДвижению КАК ОстаткиНеобходимогоТовараКДвижению
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНеобходимогоТовараКДвижению.Склад,
	|	ОстаткиНеобходимогоТовараКДвижению.Ячейка,
	|	ОстаткиНеобходимогоТовараКДвижению.ИдентификаторУпаковки,
	|	ОстаткиНеобходимогоТовараКДвижению.Номенклатура,
	|	ОстаткиНеобходимогоТовараКДвижению.Характеристика,
	|	ОстаткиНеобходимогоТовараКДвижению.СерияНоменклатуры,
	|	ОстаткиНеобходимогоТовараКДвижению.ДатаРозлива,
	|	ОстаткиНеобходимогоТовараКДвижению.Качество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Ячейка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итТоварыВЯчейкахОстатки.ИдентификаторУпаковки) КАК ИдентификаторУпаковки,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Склад) КАК Склад,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Номенклатура) КАК Номенклатура,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.ДатаРозлива) КАК ДатаРозлива,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Качество) КАК Качество
	|ПОМЕСТИТЬ КоличествоИдентификаторовВЯчейке
	|ИЗ
	|	РегистрНакопления.итТоварыВЯчейках.Остатки(, ) КАК итТоварыВЯчейкахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	итТоварыВЯчейкахОстатки.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоИдентификаторовВЯчейке.Ячейка,
	|	КоличествоИдентификаторовВЯчейке.ИдентификаторУпаковки
	|ПОМЕСТИТЬ ОтборБитыхЯчеек
	|ИЗ
	|	КоличествоИдентификаторовВЯчейке КАК КоличествоИдентификаторовВЯчейке
	|ГДЕ
	|	КоличествоИдентификаторовВЯчейке.ИдентификаторУпаковки > 1
	|	И КоличествоИдентификаторовВЯчейке.Ячейка.КоличествоПалет = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборБитыхЯчеек.Ячейка,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ЯчейкиНеУдовлWMS
	|ИЗ
	|	ОтборБитыхЯчеек КАК ОтборБитыхЯчеек
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Ячейка,
	|	2
	|ИЗ
	|	РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|ГДЕ
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Склад КАК Склад,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Ячейка КАК Ячейка,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Номенклатура КАК Номенклатура,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Характеристика КАК Характеристика,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.ДатаРозлива КАК ДатаРозлива,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Качество КАК Качество,
	|	СУММА(ОстаткиНеобходимогоТовараКДвижениюГруппировка.КоличествоОстаток) КАК КоличествоОстаток,
	|	ТоварСНехваткойСтока.КоличествоПаллетКПополнению КАК КоличествоПаллетКПополнению,
	|	ТоварСНехваткойСтока.КоличествоНаПаллете КАК КоличествоНаПаллете,
	|	ТоварСНехваткойСтока.Коэффициент КАК Коэффициент,
	|	ТоварСНехваткойСтока.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	|	итСкладскиеЯчейки.КоличествоПалет КАК МаксимальноеКоличествоПаллетВЯчейке
	|ИЗ
	|	ТоварСНехваткойСтока КАК ТоварСНехваткойСтока
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиНеобходимогоТовараКДвижениюГруппировка КАК ОстаткиНеобходимогоТовараКДвижениюГруппировка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итСкладскиеЯчейки КАК итСкладскиеЯчейки
	|			ПО ОстаткиНеобходимогоТовараКДвижениюГруппировка.Ячейка = итСкладскиеЯчейки.Ссылка
	|		ПО ТоварСНехваткойСтока.Номенклатура = ОстаткиНеобходимогоТовараКДвижениюГруппировка.Номенклатура
	|			И (НЕ ОстаткиНеобходимогоТовараКДвижениюГруппировка.Ячейка.Заблокирована)
	|			И (НЕ ОстаткиНеобходимогоТовараКДвижениюГруппировка.Ячейка.ПометкаУдаления)
	|ГДЕ
	|	НЕ ОстаткиНеобходимогоТовараКДвижениюГруппировка.Ячейка В
	|				(ВЫБРАТЬ
	|					ЯчейкиНеУдовлWMS.Ячейка
	|				ИЗ
	|					ЯчейкиНеУдовлWMS КАК ЯчейкиНеУдовлWMS)
	|	И ОстаткиНеобходимогоТовараКДвижениюГруппировка.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Склад,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Ячейка,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.ИдентификаторУпаковки,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Номенклатура,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Характеристика,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.СерияНоменклатуры,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.ДатаРозлива,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Качество,
	|	ТоварСНехваткойСтока.КоличествоПаллетКПополнению,
	|	ТоварСНехваткойСтока.КоличествоНаПаллете,
	|	ТоварСНехваткойСтока.Коэффициент,
	|	ТоварСНехваткойСтока.ЕдиницаХраненияОстатков,
	|	итСкладскиеЯчейки.КоличествоПалет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРозлива,
	|	СерияНоменклатуры,
	|	МаксимальноеКоличествоПаллетВЯчейке,
	|	КоличествоОстаток УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(Характеристика),
	|	МАКСИМУМ(ДатаРозлива),
	|	СУММА(КоличествоОстаток),
	|	МАКСИМУМ(КоличествоПаллетКПополнению),
	|	МАКСИМУМ(КоличествоНаПаллете),
	|	МАКСИМУМ(Коэффициент),
	|	МАКСИМУМ(ЕдиницаХраненияОстатков)
	|ПО
	|	Склад,
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Качество,
	|	Ячейка,
	|	ИдентификаторУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиНеобходимогоТовараКДвижению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоИдентификаторовВЯчейке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборБитыхЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЯчейкиНеУдовлWMS
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтИзлишнееДвижениеПоРезерву
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиНеобходимогоТовараКДвижениюГруппировка";	
	
	Запрос.УстановитьПараметр("Склады",Данные.СписокСкладовДляПеремещенияВСток.ВыгрузитьКолонку("Склад"));	
	Запрос.УстановитьПараметр("СистемнаяЯчейка",Данные.СистемнаяЯчейка);
	РезультатЗапроса= Запрос.Выполнить();
	ТаблицаКоличествоПополненного=новый ТаблицаЗначений;
	ТаблицаКоличествоПополненного.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура",,,,,,));
	ТаблицаКоличествоПополненного.Колонки.Добавить("КоличествоПаллетПополнено",новый ОписаниеТипов("Число",,,новый КвалификаторыЧисла(15,2,ДопустимыйЗнак.Любой)));
	ВыборкаСклад=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСклад.Следующий() цикл
		НовыйДокументперемещения=Документы.итWMSПеремещение.СоздатьДокумент();	
		НовыйДокументперемещения.СкладОтправитель=ВыборкаСклад.Склад;
		НовыйДокументперемещения.СкладПолучатель=ВыборкаСклад.Склад;
		НовыйДокументперемещения.Дата=ТекущаяДата();
		НовыйДокументперемещения.ПополнениеСтока=Истина;
		НовыйДокументперемещения.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		НовыйДокументперемещения.Комментарий="Пополнение стока #Регламентное задание";
		ВыборкаНоменклатура=ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() цикл
			СтрокаТаблицы=ТаблицаКоличествоПополненного.Найти(ВыборкаНоменклатура.Номенклатура);
			ЦелоеЧислоПаллет=Цел(ВыборкаНоменклатура.КоличествоПаллетКПополнению);
			Если ЦелоеЧислоПаллет<ВыборкаНоменклатура.КоличествоПаллетКПополнению Тогда 
				КоличествоПаллетКПополнению=ЦелоеЧислоПаллет+1;
			иначе
				КоличествоПаллетКПополнению=ЦелоеЧислоПаллет;
			КонецЕсли;	
			Если СтрокаТаблицы=Неопределено Тогда 
				КоличествоЕденицКПополнению=КоличествоПаллетКПополнению*ВыборкаНоменклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете;
			иначе
				КоличествоЕденицКПополнению=(КоличествоПаллетКПополнению*ВыборкаНоменклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете)-(СтрокаТаблицы.КоличествоПаллетПополнено*ВыборкаНоменклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете);
			КонецЕсли;
			КоличествоПополнено=0;
			ВыборкаСерия=ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСерия.Следующий() цикл
				Если КоличествоЕденицКПополнению<=0 Тогда 
					Прервать;
				КонецЕсли;	
				ВыборкаКачество=ВыборкаСерия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока  ВыборкаКачество.Следующий() цикл
					Если КоличествоЕденицКПополнению<=0 Тогда 
						Прервать;
					КонецЕсли;	
					ВыборкаЯчейка=ВыборкаКачество.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаЯчейка.Следующий() цикл
						Если КоличествоЕденицКПополнению<=0 Тогда 
							Прервать;
						КонецЕсли;	
						ВыборкаИдентификатор=ВыборкаЯчейка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаИдентификатор.Следующий() Цикл
							Если КоличествоЕденицКПополнению<=0 Тогда 
								Прервать;
							КонецЕсли;	
							
							НоваяСтрокаТовары=НовыйДокументперемещения.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары,ВыборкаИдентификатор);
							НоваяСтрокаТовары.ИдентификаторСтроки=новый УникальныйИдентификатор;
							НоваяСтрокаТовары.ЯчейкаОтправитель=ВыборкаИдентификатор.Ячейка;
							НоваяСтрокаТовары.Количество=ВыборкаИдентификатор.КоличествоОстаток;
							КоличествоЕденицКПополнению=КоличествоЕденицКПополнению-НоваяСтрокаТовары.Количество;
							КоличествоПополнено=КоличествоПополнено+НоваяСтрокаТовары.Количество;
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
			КонецЦикла;
			Если СтрокаТаблицы=Неопределено Тогда 
				НоваяСтрока=ТаблицаКоличествоПополненного.Добавить();
				НоваяСтрока.Номенклатура=ВыборкаНоменклатура.Номенклатура;
				НоваяСтрока.КоличествоПаллетПополнено=КоличествоПополнено/ВыборкаНоменклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете;
			иначе
				СтрокаТаблицы.КоличествоПаллетПополнено=СтрокаТаблицы.КоличествоПаллетПополнено+(КоличествоПополнено/ВыборкаНоменклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете);
			КонецЕсли;
		КонецЦикла;
		НовыйДокументперемещения.ЗаполнитьПеремещениеВПикинг();
		Если НовыйДокументперемещения.Товары.Количество()>0 Тогда 
			Попытка
				НовыйДокументперемещения.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ЗаписьЖурналаРегистрации("ПополненияСтока",,,,"Ошибка проведения: "+ОписаниеОшибки(),);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	ИзъятьПополненноеТовараСНехваткойСтока(МенеджерВременныхТаблиц,ТаблицаКоличествоПополненного);
	
КонецПроцедуры
Процедура СоздатьОРТПеремещение(МенеджерВременныхТаблиц,Данные)
	
	Запрос=новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	итТоварыВЯчейкахРезерв.Номенклатура КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА итТоварыВЯчейкахРезерв.ВидДвижения = ЗНАЧЕНИЕ(видДвиженияНакопления.Расход)
	|				ТОГДА -ЕСТЬNULL(итТоварыВЯчейкахРезерв.Количество, 0)
	|			ИНАЧЕ ЕСТЬNULL(итТоварыВЯчейкахРезерв.Количество, 0)
	|		КОНЕЦ) КАК КоличествоИзлишнегоДвижения,
	|	итТоварыВЯчейкахРезерв.Склад,
	|	итТоварыВЯчейкахРезерв.ЯчейкаОтправитель,
	|	итТоварыВЯчейкахРезерв.Ячейка,
	|	итТоварыВЯчейкахРезерв.СерияНоменклатуры,
	|	итТоварыВЯчейкахРезерв.Характеристика,
	|	итТоварыВЯчейкахРезерв.ДатаРозлива,
	|	итТоварыВЯчейкахРезерв.Качество
	|ПОМЕСТИТЬ ВтИзлишнееДвижениеПоРезерву
	|ИЗ
	|	РегистрНакопления.итТоварыВЯчейкахРезерв КАК итТоварыВЯчейкахРезерв
	|ГДЕ
	|	итТоварыВЯчейкахРезерв.Регистратор.ВидОперации = ЗНАЧЕНИЕ(перечисление.итВидыОперацийОтгрузкиРазмещенияТоваров.Перемещение)
	|	И итТоварыВЯчейкахРезерв.Регистратор.Проведен = ИСТИНА
	|	И итТоварыВЯчейкахРезерв.Регистратор.СтатусДокумента <> ЗНАЧЕНИЕ(Перечисление.итСтатусыДокументовОРТ.Исполнен)
	|	И итТоварыВЯчейкахРезерв.Ячейка <> &СистемнаяЯчейка
	|
	|СГРУППИРОВАТЬ ПО
	|	итТоварыВЯчейкахРезерв.Номенклатура,
	|	итТоварыВЯчейкахРезерв.Склад,
	|	итТоварыВЯчейкахРезерв.ЯчейкаОтправитель,
	|	итТоварыВЯчейкахРезерв.Ячейка,
	|	итТоварыВЯчейкахРезерв.СерияНоменклатуры,
	|	итТоварыВЯчейкахРезерв.Характеристика,
	|	итТоварыВЯчейкахРезерв.ДатаРозлива,
	|	итТоварыВЯчейкахРезерв.Качество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварСНехваткойСтока.Номенклатура,
	|	ТоварСНехваткойСтока.КоличествоОстаток,
	|	ТоварСНехваткойСтока.ЕдиницаХраненияОстатков,
	|	ТоварСНехваткойСтока.Коэффициент,
	|	ТоварСНехваткойСтока.КоличествоНаПаллете,
	|	ТоварСНехваткойСтока.КоличествоПаллет,
	|	ТоварСНехваткойСтока.НормыХраненияСтока,
	|	ТоварСНехваткойСтока.КоличествоПаллетКПополнению
	|ПОМЕСТИТЬ ТоварСНехваткойСтока1
	|ИЗ
	|	ТоварСНехваткойСтока КАК ТоварСНехваткойСтока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварСНехваткойСтока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварСНехваткойСтока1.Номенклатура,
	|	ТоварСНехваткойСтока1.КоличествоОстаток,
	|	ТоварСНехваткойСтока1.ЕдиницаХраненияОстатков,
	|	ТоварСНехваткойСтока1.Коэффициент,
	|	ТоварСНехваткойСтока1.КоличествоНаПаллете,
	|	ТоварСНехваткойСтока1.КоличествоПаллет,
	|	ТоварСНехваткойСтока1.НормыХраненияСтока,
	|	ТоварСНехваткойСтока1.КоличествоПаллетКПополнению
	|ПОМЕСТИТЬ ТоварСНехваткойСтока
	|ИЗ
	|	ТоварСНехваткойСтока1 КАК ТоварСНехваткойСтока1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварСНехваткойСтока1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Склад,
	|	итТоварыВЯчейкахОстатки.Ячейка,
	|	итТоварыВЯчейкахОстатки.Номенклатура,
	|	итТоварыВЯчейкахОстатки.Характеристика,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиНеобходимогоТовараКДвижению
	|ИЗ
	|	ТоварСНехваткойСтока КАК ТоварСНехваткойСтока
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(
	|				,
	|				Ячейка.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Хранения)
	|					И Ячейка <> &СистемнаяЯчейка
	|					И Склад В (&Склады)) КАК итТоварыВЯчейкахОстатки
	|		ПО ТоварСНехваткойСтока.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахРезервОстатки.Склад,
	|	итТоварыВЯчейкахРезервОстатки.ЯчейкаОтправитель,
	|	итТоварыВЯчейкахРезервОстатки.Номенклатура,
	|	итТоварыВЯчейкахРезервОстатки.Характеристика,
	|	итТоварыВЯчейкахРезервОстатки.СерияНоменклатуры,
	|	итТоварыВЯчейкахРезервОстатки.ДатаРозлива,
	|	итТоварыВЯчейкахРезервОстатки.Качество,
	|	-(ЕСТЬNULL(итТоварыВЯчейкахРезервОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ВтИзлишнееДвижениеПоРезерву.КоличествоИзлишнегоДвижения, 0))
	|ИЗ
	|	ТоварСНехваткойСтока КАК ТоварСНехваткойСтока
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейкахРезерв.Остатки(
	|				,
	|				ЯчейкаОтправитель <> &СистемнаяЯчейка
	|					И ЯчейкаОтправитель.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Хранения)
	|					И Склад В (&Склады)) КАК итТоварыВЯчейкахРезервОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтИзлишнееДвижениеПоРезерву КАК ВтИзлишнееДвижениеПоРезерву
	|			ПО итТоварыВЯчейкахРезервОстатки.Склад = ВтИзлишнееДвижениеПоРезерву.Склад
	|				И итТоварыВЯчейкахРезервОстатки.ЯчейкаОтправитель = ВтИзлишнееДвижениеПоРезерву.ЯчейкаОтправитель
	|				И итТоварыВЯчейкахРезервОстатки.Ячейка = ВтИзлишнееДвижениеПоРезерву.Ячейка
	|				И итТоварыВЯчейкахРезервОстатки.Номенклатура = ВтИзлишнееДвижениеПоРезерву.Номенклатура
	|				И итТоварыВЯчейкахРезервОстатки.СерияНоменклатуры = ВтИзлишнееДвижениеПоРезерву.СерияНоменклатуры
	|				И итТоварыВЯчейкахРезервОстатки.ДатаРозлива = ВтИзлишнееДвижениеПоРезерву.ДатаРозлива
	|				И итТоварыВЯчейкахРезервОстатки.Качество = ВтИзлишнееДвижениеПоРезерву.Качество
	|		ПО ТоварСНехваткойСтока.Номенклатура = итТоварыВЯчейкахРезервОстатки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНеобходимогоТовараКДвижению.Склад,
	|	ОстаткиНеобходимогоТовараКДвижению.Ячейка,
	|	ОстаткиНеобходимогоТовараКДвижению.Номенклатура,
	|	ОстаткиНеобходимогоТовараКДвижению.Характеристика,
	|	ОстаткиНеобходимогоТовараКДвижению.СерияНоменклатуры,
	|	ОстаткиНеобходимогоТовараКДвижению.ДатаРозлива,
	|	ОстаткиНеобходимогоТовараКДвижению.Качество,
	|	СУММА(ОстаткиНеобходимогоТовараКДвижению.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиНеобходимогоТовараКДвижениюГруппировка
	|ИЗ
	|	ОстаткиНеобходимогоТовараКДвижению КАК ОстаткиНеобходимогоТовараКДвижению
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНеобходимогоТовараКДвижению.Склад,
	|	ОстаткиНеобходимогоТовараКДвижению.Ячейка,
	|	ОстаткиНеобходимогоТовараКДвижению.Номенклатура,
	|	ОстаткиНеобходимогоТовараКДвижению.Характеристика,
	|	ОстаткиНеобходимогоТовараКДвижению.СерияНоменклатуры,
	|	ОстаткиНеобходимогоТовараКДвижению.ДатаРозлива,
	|	ОстаткиНеобходимогоТовараКДвижению.Качество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Ячейка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итТоварыВЯчейкахОстатки.ИдентификаторУпаковки) КАК ИдентификаторУпаковки,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Склад) КАК Склад,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Номенклатура) КАК Номенклатура,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.ДатаРозлива) КАК ДатаРозлива,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Качество) КАК Качество
	|ПОМЕСТИТЬ КоличествоИдентификаторовВЯчейке
	|ИЗ
	|	РегистрНакопления.итТоварыВЯчейках.Остатки(, ) КАК итТоварыВЯчейкахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	итТоварыВЯчейкахОстатки.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоИдентификаторовВЯчейке.Ячейка,
	|	КоличествоИдентификаторовВЯчейке.ИдентификаторУпаковки
	|ПОМЕСТИТЬ ОтборБитыхЯчеек
	|ИЗ
	|	КоличествоИдентификаторовВЯчейке КАК КоличествоИдентификаторовВЯчейке
	|ГДЕ
	|	КоличествоИдентификаторовВЯчейке.ИдентификаторУпаковки > 1
	|	И КоличествоИдентификаторовВЯчейке.Ячейка.КоличествоПалет = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборБитыхЯчеек.Ячейка,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ЯчейкиНеУдовлWMS
	|ИЗ
	|	ОтборБитыхЯчеек КАК ОтборБитыхЯчеек
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Ячейка,
	|	2
	|ИЗ
	|	РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|ГДЕ
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Склад КАК Склад,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Ячейка КАК Ячейка,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Номенклатура КАК Номенклатура,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Характеристика КАК Характеристика,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.ДатаРозлива КАК ДатаРозлива,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Качество КАК Качество,
	|	СУММА(ОстаткиНеобходимогоТовараКДвижениюГруппировка.КоличествоОстаток) КАК КоличествоОстаток,
	|	ТоварСНехваткойСтока.КоличествоПаллетКПополнению КАК КоличествоПаллетКПополнению,
	|	ТоварСНехваткойСтока.КоличествоНаПаллете КАК КоличествоНаПаллете,
	|	ТоварСНехваткойСтока.Коэффициент КАК Коэффициент,
	|	ТоварСНехваткойСтока.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	|	итСкладскиеЯчейки.КоличествоПалет КАК МаксимальноеКоличествоПаллетВЯчейке
	|ИЗ
	|	ТоварСНехваткойСтока КАК ТоварСНехваткойСтока
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиНеобходимогоТовараКДвижениюГруппировка КАК ОстаткиНеобходимогоТовараКДвижениюГруппировка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итСкладскиеЯчейки КАК итСкладскиеЯчейки
	|			ПО ОстаткиНеобходимогоТовараКДвижениюГруппировка.Ячейка = итСкладскиеЯчейки.Ссылка
	|		ПО ТоварСНехваткойСтока.Номенклатура = ОстаткиНеобходимогоТовараКДвижениюГруппировка.Номенклатура
	|			И (НЕ ОстаткиНеобходимогоТовараКДвижениюГруппировка.Ячейка.Заблокирована)
	|			И (НЕ ОстаткиНеобходимогоТовараКДвижениюГруппировка.Ячейка.ПометкаУдаления)
	|ГДЕ
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.КоличествоОстаток > 0
	|	И ОстаткиНеобходимогоТовараКДвижениюГруппировка.Ячейка В
	|			(ВЫБРАТЬ
	|				ЯчейкиНеУдовлWMS.Ячейка
	|			ИЗ
	|				ЯчейкиНеУдовлWMS КАК ЯчейкиНеУдовлWMS)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Склад,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Ячейка,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Номенклатура,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Характеристика,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.СерияНоменклатуры,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.ДатаРозлива,
	|	ОстаткиНеобходимогоТовараКДвижениюГруппировка.Качество,
	|	ТоварСНехваткойСтока.КоличествоПаллетКПополнению,
	|	ТоварСНехваткойСтока.КоличествоНаПаллете,
	|	ТоварСНехваткойСтока.Коэффициент,
	|	ТоварСНехваткойСтока.ЕдиницаХраненияОстатков,
	|	итСкладскиеЯчейки.КоличествоПалет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРозлива,
	|	СерияНоменклатуры,
	|	МаксимальноеКоличествоПаллетВЯчейке,
	|	КоличествоОстаток УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(Характеристика),
	|	МАКСИМУМ(ДатаРозлива),
	|	СУММА(КоличествоОстаток),
	|	МАКСИМУМ(КоличествоПаллетКПополнению),
	|	МАКСИМУМ(КоличествоНаПаллете),
	|	МАКСИМУМ(Коэффициент),
	|	МАКСИМУМ(ЕдиницаХраненияОстатков)
	|ПО
	|	Склад,
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Качество,
	|	Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиНеобходимогоТовараКДвижению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоИдентификаторовВЯчейке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборБитыхЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЯчейкиНеУдовлWMS
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтИзлишнееДвижениеПоРезерву
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиНеобходимогоТовараКДвижениюГруппировка";	
	
	Запрос.УстановитьПараметр("Склады",Данные.СписокСкладовДляПеремещенияВСток.ВыгрузитьКолонку("Склад"));	
	Запрос.УстановитьПараметр("СистемнаяЯчейка",Данные.СистемнаяЯчейка);
	РезультатЗапроса= Запрос.Выполнить();
	ТаблицаКоличествоПополненного=новый ТаблицаЗначений;
	ТаблицаКоличествоПополненного.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура",,,,,,));
	ТаблицаКоличествоПополненного.Колонки.Добавить("КоличествоПаллетПополнено",новый ОписаниеТипов("Число",,,новый КвалификаторыЧисла(15,2,ДопустимыйЗнак.Любой)));
	ВыборкаСклад=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСклад.Следующий() цикл
		НовыйДокументперемещения=Документы.итОтгрузкаРазмещениеТоваров.СоздатьДокумент();	
		НовыйДокументперемещения.Склад=ВыборкаСклад.Склад;
		НовыйДокументперемещения.СкладПолучатель=ВыборкаСклад.Склад;
		НовыйДокументперемещения.Дата=ТекущаяДата();
		НовыйДокументперемещения.СтатусДокумента=Перечисления.итСтатусыДокументовОРТ.Создан;
		НовыйДокументперемещения.ВидОперации=Перечисления.итВидыОперацийОтгрузкиРазмещенияТоваров.Перемещение;
		НовыйДокументперемещения.Комментарий="Пополнение стока #Регламентное задание";
		ВыборкаНоменклатура=ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() цикл
			СтрокаТаблицы=ТаблицаКоличествоПополненного.Найти(ВыборкаНоменклатура.Номенклатура);
			ЦелоеЧислоПаллет=Цел(ВыборкаНоменклатура.КоличествоПаллетКПополнению);
			Если ЦелоеЧислоПаллет<ВыборкаНоменклатура.КоличествоПаллетКПополнению Тогда 
				КоличествоПаллетКПополнению=ЦелоеЧислоПаллет+1;
			иначе
				КоличествоПаллетКПополнению=ЦелоеЧислоПаллет;
			КонецЕсли;	
			Если СтрокаТаблицы=Неопределено Тогда 
				КоличествоЕденицКПополнению=КоличествоПаллетКПополнению*ВыборкаНоменклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете;
			иначе
				КоличествоЕденицКПополнению=(КоличествоПаллетКПополнению*ВыборкаНоменклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете)-(СтрокаТаблицы.КоличествоПаллетПополнено*ВыборкаНоменклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете);
			КонецЕсли;
			КоличествоПополнено=0;
			ВыборкаСерия=ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСерия.Следующий() цикл
				Если КоличествоЕденицКПополнению<=0 Тогда 
					Прервать;
				КонецЕсли;	
				ВыборкаКачество=ВыборкаСерия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока  ВыборкаКачество.Следующий() цикл
					Если КоличествоЕденицКПополнению<=0 Тогда 
						Прервать;
					КонецЕсли;	
					ВыборкаЯчейка=ВыборкаКачество.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаЯчейка.Следующий() цикл
						Если КоличествоЕденицКПополнению<=0 Тогда 
							Прервать;
						КонецЕсли;	
						ВыборкаДетальнойзаписи=ВыборкаЯчейка.Выбрать();
						Пока ВыборкаДетальнойзаписи.Следующий() цикл
							Если КоличествоЕденицКПополнению<=0 Тогда 
								Прервать;
							КонецЕсли;
							НоваяСтрокаТовары=НовыйДокументперемещения.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары,ВыборкаДетальнойзаписи);
							//НоваяСтрокаТовары.ИдентификаторСтроки=новый УникальныйИдентификатор;
							НоваяСтрокаТовары.ЯчейкаОтправитель=ВыборкаДетальнойзаписи.Ячейка;
							НоваяСтрокаТовары.Количество=ВыборкаДетальнойзаписи.КоличествоОстаток;
							НоваяСтрокаТовары.ЕдиницаИзмерения=ВыборкаДетальнойзаписи.ЕдиницаХраненияОстатков;
							НоваяСтрокаТовары.Коэффициент=ВыборкаДетальнойзаписи.ЕдиницаХраненияОстатков.Коэффициент;
							НоваяСтрокаТовары.ЕдиницаИзмеренияМест=ВыборкаДетальнойзаписи.Номенклатура.ЕдиницаИзмеренияМест;
							НоваяСтрокаТовары.КоличествоМест=НоваяСтрокаТовары.Количество / ?(НоваяСтрокаТовары.ЕдиницаИзмеренияМест.Коэффициент=0,1,НоваяСтрокаТовары.ЕдиницаИзмеренияМест.Коэффициент);
							КоличествоЕденицКПополнению=КоличествоЕденицКПополнению-НоваяСтрокаТовары.Количество;
							КоличествоПополнено=КоличествоПополнено+НоваяСтрокаТовары.Количество;
						КонецЦикла;		
					КонецЦикла;
					
				КонецЦикла;
			КонецЦикла;
			Если СтрокаТаблицы=Неопределено Тогда 
				НоваяСтрока=ТаблицаКоличествоПополненного.Добавить();
				НоваяСтрока.Номенклатура=ВыборкаНоменклатура.Номенклатура;
				НоваяСтрока.КоличествоПаллетПополнено=КоличествоПополнено/ВыборкаНоменклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете;
			иначе
				СтрокаТаблицы.КоличествоПаллетПополнено=СтрокаТаблицы.КоличествоПаллетПополнено+(КоличествоПополнено/ВыборкаНоменклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете);
			КонецЕсли;
		КонецЦикла;
		НовыйДокументперемещения.ЗаполнитьПеремещениеВПикинг();
		Попытка
			Если НовыйДокументперемещения.Товары.Количество()= 0 Тогда 
				Продолжить;
			КонецЕсли;	
			НовыйДокументперемещения.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ЗаписьЖурналаРегистрации("ПополненияСтока",,,,"Ошибка проведения: "+ОписаниеОшибки(),);
		КонецПопытки;
	КонецЦикла;
	ИзъятьПополненноеТовараСНехваткойСтока(МенеджерВременныхТаблиц,ТаблицаКоличествоПополненного);
	
КонецПроцедуры
Процедура ИзъятьПополненноеТовараСНехваткойСтока(МенеджерВременныхТаблиц,ТаблицаКоличествоПополненного)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПополненногоТовара.Номенклатура,
	|	ТаблицаПополненногоТовара.КоличествоПаллетПополнено
	|ПОМЕСТИТЬ ТаблицаКоличествоПополненногоТовара
	|ИЗ
	|	&ТаблицаПополненногоТовара КАК ТаблицаПополненногоТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКоличествоПополненногоТовара.Номенклатура,
	|	СУММА(ТаблицаКоличествоПополненногоТовара.КоличествоПаллетПополнено) КАК КоличествоПаллетПополнено
	|ПОМЕСТИТЬ ТаблицаКоличествоПополненногоТовараГрупп
	|ИЗ
	|	ТаблицаКоличествоПополненногоТовара КАК ТаблицаКоличествоПополненногоТовара
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКоличествоПополненногоТовара.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварСНехваткойСтока.Номенклатура,
	|	ТоварСНехваткойСтока.КоличествоОстаток,
	|	ТоварСНехваткойСтока.ЕдиницаХраненияОстатков,
	|	ТоварСНехваткойСтока.Коэффициент,
	|	ТоварСНехваткойСтока.КоличествоНаПаллете,
	|	ТоварСНехваткойСтока.КоличествоПаллет,
	|	ТоварСНехваткойСтока.НормыХраненияСтока,
	|	ТоварСНехваткойСтока.КоличествоПаллетКПополнению
	|ПОМЕСТИТЬ ТоварСНехваткойСтока1
	|ИЗ
	|	ТоварСНехваткойСтока КАК ТоварСНехваткойСтока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварСНехваткойСтока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварСНехваткойСтока1.Номенклатура,
	|	ТоварСНехваткойСтока1.КоличествоОстаток,
	|	ТоварСНехваткойСтока1.ЕдиницаХраненияОстатков,
	|	ТоварСНехваткойСтока1.Коэффициент,
	|	ТоварСНехваткойСтока1.КоличествоНаПаллете,
	|	ЕСТЬNULL(ТоварСНехваткойСтока1.КоличествоПаллет, 0) + ЕСТЬNULL(ТаблицаКоличествоПополненногоТовараГрупп.КоличествоПаллетПополнено, 0) КАК КоличествоПаллет,
	|	ТоварСНехваткойСтока1.НормыХраненияСтока,
	|	ЕСТЬNULL(ТоварСНехваткойСтока1.КоличествоПаллетКПополнению, 0) - ЕСТЬNULL(ТаблицаКоличествоПополненногоТовараГрупп.КоличествоПаллетПополнено, 0) КАК КоличествоПаллетКПополнению
	|ПОМЕСТИТЬ ТоварСНехваткойСтока
	|ИЗ
	|	ТоварСНехваткойСтока1 КАК ТоварСНехваткойСтока1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКоличествоПополненногоТовараГрупп КАК ТаблицаКоличествоПополненногоТовараГрупп
	|		ПО ТоварСНехваткойСтока1.Номенклатура = ТаблицаКоличествоПополненногоТовараГрупп.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(ТоварСНехваткойСтока1.КоличествоПаллетКПополнению, 0) - ЕСТЬNULL(ТаблицаКоличествоПополненногоТовараГрупп.КоличествоПаллетПополнено, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварСНехваткойСтока1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКоличествоПополненногоТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКоличествоПополненногоТовараГрупп";
	
	Запрос.УстановитьПараметр("ТаблицаПополненногоТовара",ТаблицаКоличествоПополненного);	
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруКПополнению(МенеджерВременныхТаблиц,Данные)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итТоварыВЯчейкахРезерв.Номенклатура КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА итТоварыВЯчейкахРезерв.ВидДвижения = ЗНАЧЕНИЕ(видДвиженияНакопления.Расход)
	|				ТОГДА -ЕСТЬNULL(итТоварыВЯчейкахРезерв.Количество, 0)
	|			ИНАЧЕ ЕСТЬNULL(итТоварыВЯчейкахРезерв.Количество, 0)
	|		КОНЕЦ) КАК КоличествоИзлишнегоДвижения,
	|	итТоварыВЯчейкахРезерв.ЯчейкаОтправитель,
	|	итТоварыВЯчейкахРезерв.Ячейка
	|ПОМЕСТИТЬ ВтИзлишнееДвижениеПоРезерву
	|ИЗ
	|	РегистрНакопления.итТоварыВЯчейкахРезерв КАК итТоварыВЯчейкахРезерв
	|ГДЕ
	|	итТоварыВЯчейкахРезерв.Регистратор.ВидОперации = ЗНАЧЕНИЕ(перечисление.итВидыОперацийОтгрузкиРазмещенияТоваров.Перемещение)
	|	И итТоварыВЯчейкахРезерв.Регистратор.Проведен = ИСТИНА
	|	И итТоварыВЯчейкахРезерв.Регистратор.СтатусДокумента <> ЗНАЧЕНИЕ(Перечисление.итСтатусыДокументовОРТ.Исполнен)
	|	И итТоварыВЯчейкахРезерв.Склад В(&Склады)
	|
	|СГРУППИРОВАТЬ ПО
	|	итТоварыВЯчейкахРезерв.Номенклатура,
	|	итТоварыВЯчейкахРезерв.ЯчейкаОтправитель,
	|	итТоварыВЯчейкахРезерв.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИзлишнееДвижениеПоРезерву.Номенклатура,
	|	СУММА(ВтИзлишнееДвижениеПоРезерву.КоличествоИзлишнегоДвижения) КАК КоличествоИзлишнегоДвижения
	|ПОМЕСТИТЬ ВтИзлишниеДвиженияЯчейка
	|ИЗ
	|	ВтИзлишнееДвижениеПоРезерву КАК ВтИзлишнееДвижениеПоРезерву
	|ГДЕ
	|	ВтИзлишнееДвижениеПоРезерву.Ячейка <> &СистемнаяЯчейка
	|	И ВтИзлишнееДвижениеПоРезерву.Ячейка.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Пикинга)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИзлишнееДвижениеПоРезерву.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИзлишнееДвижениеПоРезерву.Номенклатура,
	|	СУММА(ВтИзлишнееДвижениеПоРезерву.КоличествоИзлишнегоДвижения) КАК КоличествоИзлишнегоДвижения
	|ПОМЕСТИТЬ ВтИзлишниеДвиженияЯчейкаОтправитель
	|ИЗ
	|	ВтИзлишнееДвижениеПоРезерву КАК ВтИзлишнееДвижениеПоРезерву
	|ГДЕ
	|	ВтИзлишнееДвижениеПоРезерву.ЯчейкаОтправитель <> &СистемнаяЯчейка
	|	И ВтИзлишнееДвижениеПоРезерву.ЯчейкаОтправитель.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Пикинга)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИзлишнееДвижениеПоРезерву.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSПеремещение.Ссылка
	|ПОМЕСТИТЬ ПлановыеПополненияПикинга
	|ИЗ
	|	Документ.итWMSПеремещение КАК итWMSПеремещение
	|ГДЕ
	|	итWMSПеремещение.Проведен
	|	И (итWMSПеремещение.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Распределяется)
	|			ИЛИ итWMSПеремещение.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Распределен)
	|			ИЛИ итWMSПеремещение.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихДокументов.Зарезервирован))
	|	И итWMSПеремещение.ПеремещениеВПикинг
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSПеремещение.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахРезерв.Номенклатура,
	|	итТоварыВЯчейкахРезерв.ЯчейкаОтправитель,
	|	итТоварыВЯчейкахРезерв.Ячейка,
	|	СУММА(ВЫБОР
	|			КОГДА итТоварыВЯчейкахРезерв.ВидДвижения = ЗНАЧЕНИЕ(видДвиженияНакопления.Расход)
	|				ТОГДА -ЕСТЬNULL(итТоварыВЯчейкахРезерв.Количество, 0)
	|			ИНАЧЕ ЕСТЬNULL(итТоварыВЯчейкахРезерв.Количество, 0)
	|		КОНЕЦ) КАК КоличествоПополнениеПикинга
	|ПОМЕСТИТЬ ВТДвиженияПополненияПикинга
	|ИЗ
	|	ПлановыеПополненияПикинга КАК ПлановыеПополненияПикинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейкахРезерв КАК итТоварыВЯчейкахРезерв
	|		ПО ПлановыеПополненияПикинга.Ссылка = итТоварыВЯчейкахРезерв.Регистратор
	|ГДЕ
	|	итТоварыВЯчейкахРезерв.Склад В(&Склады)
	|
	|СГРУППИРОВАТЬ ПО
	|	итТоварыВЯчейкахРезерв.Номенклатура,
	|	итТоварыВЯчейкахРезерв.ЯчейкаОтправитель,
	|	итТоварыВЯчейкахРезерв.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДвиженияПополненияПикинга.Номенклатура,
	|	СУММА(ВТДвиженияПополненияПикинга.КоличествоПополнениеПикинга) КАК КоличествоПополнениеПикинга
	|ПОМЕСТИТЬ ВтДвиженияПополненияПикингаЯчекаОтправитель
	|ИЗ
	|	ВТДвиженияПополненияПикинга КАК ВТДвиженияПополненияПикинга
	|ГДЕ
	|	ВТДвиженияПополненияПикинга.ЯчейкаОтправитель <> &СистемнаяЯчейка
	|	И ВТДвиженияПополненияПикинга.ЯчейкаОтправитель.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Пикинга)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДвиженияПополненияПикинга.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДвиженияПополненияПикинга.Номенклатура,
	|	СУММА(ВТДвиженияПополненияПикинга.КоличествоПополнениеПикинга) КАК КоличествоПополнениеПикинга
	|ПОМЕСТИТЬ ВтДвиженияПополненияПикингаЯчека
	|ИЗ
	|	ВТДвиженияПополненияПикинга КАК ВТДвиженияПополненияПикинга
	|ГДЕ
	|	ВТДвиженияПополненияПикинга.Ячейка <> &СистемнаяЯчейка
	|	И ВТДвиженияПополненияПикинга.Ячейка.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Пикинга)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДвиженияПополненияПикинга.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Номенклатура,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ДанныеПоТоварамВПикенге
	|ИЗ
	|	РегистрНакопления.итТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Пикинга)
	|				И Ячейка <> &СистемнаяЯчейка
	|				И Склад В (&Склады)) КАК итТоварыВЯчейкахОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	СУММА(-(ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток, 0) - ЕСТЬNULL(ВтДвиженияПополненияПикингаЯчекаОтправитель.КоличествоПополнениеПикинга, 0)))
	|ИЗ
	|	(ВЫБРАТЬ
	|		итТоварыВЯчейкахРезервОстатки.Номенклатура КАК Номенклатура,
	|		СУММА(ЕСТЬNULL(итТоварыВЯчейкахРезервОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ВтИзлишниеДвиженияЯчейкаОтправитель.КоличествоИзлишнегоДвижения, 0)) КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.итТоварыВЯчейкахРезерв.Остатки(
	|				,
	|				ЯчейкаОтправитель.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Пикинга)
	|					И Ячейкаотправитель <> &СистемнаяЯчейка
	|					И Склад В (&Склады)) КАК итТоварыВЯчейкахРезервОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтИзлишниеДвиженияЯчейкаОтправитель КАК ВтИзлишниеДвиженияЯчейкаОтправитель
	|			ПО итТоварыВЯчейкахРезервОстатки.Номенклатура = ВтИзлишниеДвиженияЯчейкаОтправитель.Номенклатура
	|	
	|	СГРУППИРОВАТЬ ПО
	|		итТоварыВЯчейкахРезервОстатки.Номенклатура) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДвиженияПополненияПикингаЯчекаОтправитель КАК ВтДвиженияПополненияПикингаЯчекаОтправитель
	|		ПО ВложенныйЗапрос.Номенклатура = ВтДвиженияПополненияПикингаЯчекаОтправитель.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток, 0) - ЕСТЬNULL(ВтДвиженияПополненияПикингаЯчека.КоличествоПополнениеПикинга, 0))
	|ИЗ
	|	(ВЫБРАТЬ
	|		итТоварыВЯчейкахРезервОстатки.Номенклатура КАК Номенклатура,
	|		СУММА(ЕСТЬNULL(итТоварыВЯчейкахРезервОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ВтИзлишниеДвиженияЯчейка.КоличествоИзлишнегоДвижения, 0)) КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.итТоварыВЯчейкахРезерв.Остатки(
	|				,
	|				Ячейка.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Пикинга)
	|					И Ячейка <> &СистемнаяЯчейка
	|					И Склад В (&Склады)) КАК итТоварыВЯчейкахРезервОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтИзлишниеДвиженияЯчейка КАК ВтИзлишниеДвиженияЯчейка
	|			ПО итТоварыВЯчейкахРезервОстатки.Номенклатура = ВтИзлишниеДвиженияЯчейка.Номенклатура
	|	
	|	СГРУППИРОВАТЬ ПО
	|		итТоварыВЯчейкахРезервОстатки.Номенклатура) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДвиженияПополненияПикингаЯчека КАК ВтДвиженияПополненияПикингаЯчека
	|		ПО ВложенныйЗапрос.Номенклатура = ВтДвиженияПополненияПикингаЯчека.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НМ.Ссылка КАК Номенклатура,
	|	СУММА(ЕСТЬNULL(ДанныеПоТоварамВПикенге.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	|	НМ.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	|	НМ.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	НМ.ЕдиницаХраненияОстатков.итКоличествоНаПаллете КАК КоличествоНаПаллете,
	|	НМ.ИтНормыХраненияСтока КАК НормыХраненияСтока
	|ПОМЕСТИТЬ ДанныеДляОбработки
	|ИЗ
	|	Справочник.Номенклатура КАК НМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоТоварамВПикенге КАК ДанныеПоТоварамВПикенге
	|		ПО НМ.Ссылка = ДанныеПоТоварамВПикенге.Номенклатура
	|ГДЕ
	|	НМ.ЕдиницаХраненияОстатков.итКоличествоНаПаллете > 0
	|	И НЕ НМ.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	НМ.Ссылка,
	|	НМ.ЕдиницаХраненияОстатков,
	|	НМ.ЕдиницаХраненияОстатков.Коэффициент,
	|	НМ.ИтНормыХраненияСтока,
	|	НМ.ЕдиницаХраненияОстатков.итКоличествоНаПаллете
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Номенклатура,
	|	ДанныеДляОбработки.КоличествоОстаток,
	|	ДанныеДляОбработки.ЕдиницаХраненияОстатков,
	|	ДанныеДляОбработки.Коэффициент,
	|	ДанныеДляОбработки.КоличествоНаПаллете,
	|	ДанныеДляОбработки.КоличествоОстаток * ДанныеДляОбработки.Коэффициент / ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеДляОбработки.КоличествоНаПаллете, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ДанныеДляОбработки.КоличествоНаПаллете, 0)
	|	КОНЕЦ КАК КоличествоПаллет,
	|	ДанныеДляОбработки.НормыХраненияСтока,
	|	ЕСТЬNULL(ДанныеДляОбработки.НормыХраненияСтока, 0) - ЕСТЬNULL(ДанныеДляОбработки.КоличествоОстаток * ДанныеДляОбработки.Коэффициент / ВЫБОР
	|			КОГДА ЕСТЬNULL(ДанныеДляОбработки.КоличествоНаПаллете, 0) = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(ДанныеДляОбработки.КоличествоНаПаллете, 0)
	|		КОНЕЦ, 0) КАК КоличествоПаллетКПополнению
	|ПОМЕСТИТЬ ТоварСНехваткойСтока
	|ИЗ
	|	ДанныеДляОбработки КАК ДанныеДляОбработки
	|ГДЕ
	|	ДанныеДляОбработки.НормыХраненияСтока > ДанныеДляОбработки.КоличествоОстаток * ДанныеДляОбработки.Коэффициент / ВЫБОР
	|			КОГДА ЕСТЬNULL(ДанныеДляОбработки.КоличествоНаПаллете, 0) = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(ДанныеДляОбработки.КоличествоНаПаллете, 0)
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтИзлишнееДвижениеПоРезерву
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтИзлишниеДвиженияЯчейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтИзлишниеДвиженияЯчейкаОтправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПлановыеПополненияПикинга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДвиженияПополненияПикинга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДвиженияПополненияПикингаЯчекаОтправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДвиженияПополненияПикингаЯчека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеПоТоварамВПикенге
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДляОбработки";
	
	Запрос.УстановитьПараметр("СистемнаяЯчейка",Данные.СистемнаяЯчейка);
	Запрос.УстановитьПараметр("Склады",Данные.СписокСкладовДляПеремещенияВСток.ВыгрузитьКолонку("Склад"));
	РезультатЗапроса = Запрос.Выполнить();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Функция ПолучитьДанныеВременнойТаблицы(МенеджерВремТаб,ИмяВремтаб ="",Порядок = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаб;
	Запрос.Текст =
	"ВЫБРАТЬ
	| *
	|ИЗ
	| ВремТаб КАК ВремТаб
	|
	|УПОРЯДОЧИТЬ ПО Порядок";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВремТаб",ИмяВремтаб); 
	Если Порядок = "" тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"УПОРЯДОЧИТЬ ПО Порядок","");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Порядок",Порядок);
	КонецЕсли; 
	
	ТЗ = Запрос.Выполнить().Выгрузить(); 
	
	Возврат ТЗ; 
	
КонецФункции 



#КонецОбласти

#Область ФоновыйРассчетРасстоянияЯчеек
Процедура РегламентныйЗапускРассчетаРасстоянияМеждуЯчейками() Экспорт 
	Данные=ХранилищеОбщихНастроек.Загрузить("ЗаполнитьРасстоянияМеждуЯчейками","ЗаполнитьРасстоянияМеждуЯчейками",,"ЗаполнитьРасстоянияМеждуЯчейками");
	Если ТипЗнч(Данные)<>Тип("Структура") Тогда 
		Возврат
	КонецЕсли;	
	СтруктураПараметров=новый Структура;
	СтруктураПараметров.Вставить("ОграниченияПоСлкадскимПомещениям",Данные.ОграниченияПоСлкадскимПомещениям);
	СтруктураПараметров.Вставить("ИспользоватьПринципОбратнойСвязи",Данные.ИспользоватьПринципОбратнойСвязи);
	СтруктураПараметров.Вставить("НеПерерассчитыватьДанныеДляУжеРассчитаныхЯчеек",Данные.НеПерерассчитыватьДанныеДляУжеРассчитаныхЯчеек);
	СтруктураПараметров.Вставить("ОграничиватьПоСкладскимПомещениям",Данные.ОграничиватьПоСкладскимПомещениям);
	
	Если Данные.Свойство("МассивЗаданий")  Тогда 
		ПроверитьНаЗавершенияЗаданий(Данные.МассивЗаданий,Данные);
		Если Данные.МассивЗаданий.Количество()>0 Тогда 
			Возврат
		КонецЕсли;	
	КонецЕсли;
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	ДанныеЯчеек(МенеджерВременныхТаблиц,СтруктураПараметров);
	ЗаполнитьРасстоянияМеждуЯчейкамиПроверкаНаЗАполненность(Данные);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЯчеек.Ячейка КАК Ячейка,
	|	ДанныеЯчеек.СкладскоеПомещение КАК СкладскоеПомещение,
	|	ДанныеЯчеек.Линия КАК Линия,
	|	ДанныеЯчеек.Стеллаж КАК Стеллаж,
	|	ДанныеЯчеек.Ярус КАК Ярус,
	|	ДанныеЯчеек.ЯчейкаОтсчета,
	|	ВЫБОР
	|		КОГДА ДанныеЯчеек.Ячейка В (&МассивЯчеекВОбработке)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок,
	|	ДанныеЯчеек.НомерРядаПролета
	|ИЗ
	|	ДанныеЯчеек КАК ДанныеЯчеек
	|ГДЕ
	|	НЕ ДанныеЯчеек.Ячейка В (&МассивВыполненныхЯчеек)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	СкладскоеПомещение,
	|	Линия,
	|	Ярус,
	|	Стеллаж,
	|	Ячейка";
	
	Запрос.УстановитьПараметр("МассивЯчеекВОбработке",Данные.МассивЯчеекВОбработке);
	Запрос.УстановитьПараметр("МассивВыполненныхЯчеек",Данные.МассивВыполненныхЯчеек);
	
	РезультатЯччек = Запрос.Выполнить();
	Выборка=РезультатЯччек.Выбрать();
	КоличествоЗаданийЗапущено=0;
	МассивЗаданий=новый Массив;
	Пока Выборка.Следующий() цикл
		Если МассивЗаданий.Количество()>=Данные.МаксимальноеКоличествоФоновыхЗаданий Тогда 
			Данные.Вставить("МассивЗаданий",МассивЗаданий);
			ХранилищеОбщихНастроек.Сохранить("ЗаполнитьРасстоянияМеждуЯчейками","ЗаполнитьРасстоянияМеждуЯчейками",Данные,,"ЗаполнитьРасстоянияМеждуЯчейками");
			Прервать;
		КонецЕсли;
		МассивПараметров=новый Массив;
		ДанныеЯчейки=новый Структура;
		ДанныеЯчейки.Вставить("Ячейка",Выборка.Ячейка);
		ДанныеЯчейки.Вставить("СкладскоеПомещение",Выборка.СкладскоеПомещение);
		ДанныеЯчейки.Вставить("Линия",Выборка.Линия);
		ДанныеЯчейки.Вставить("Стеллаж",Выборка.Стеллаж);
		ДанныеЯчейки.Вставить("Ярус",Выборка.Ярус);
		ДанныеЯчейки.Вставить("НомерРядаПролета",Выборка.НомерРядаПролета);
		ДанныеЯчейки.Вставить("ЯчейкаОтсчета",Выборка.ЯчейкаОтсчета);
		СтруктураПараметров=новый Структура;
		СтруктураПараметров.Вставить("ДанныеЯчейки",ДанныеЯчейки);
		СтруктураПараметров.Вставить("ОграниченияПоСлкадскимПомещениям",Данные.ОграниченияПоСлкадскимПомещениям);
		СтруктураПараметров.Вставить("ИспользоватьПринципОбратнойСвязи",Данные.ИспользоватьПринципОбратнойСвязи);
		СтруктураПараметров.Вставить("НеПерерассчитыватьДанныеДляУжеРассчитаныхЯчеек",Данные.НеПерерассчитыватьДанныеДляУжеРассчитаныхЯчеек);
		СтруктураПараметров.Вставить("ОграничиватьПоСкладскимПомещениям",Данные.ОграничиватьПоСкладскимПомещениям);
		СтруктураПараметров.Вставить("ПриОбходеУчитыватьУжеИмеющиесяМаршруты",Данные.ПриОбходеУчитыватьУжеИмеющиесяМаршруты);
		СтруктураПараметров.Вставить("ЗаписыватьРезультатКороткогоПутиДляВсехЯчеекПоХоду",Данные.ЗаписыватьРезультатКороткогоПутиДляВсехЯчеекПоХоду);
		СтруктураПараметров.Вставить("ВРазрезеОдногоПутиНеВозвращатьсяНаПройденныеЛинии",Данные.ВРазрезеОдногоПутиНеВозвращатьсяНаПройденныеЛинии);
		СтруктураПараметров.Вставить("ПроизводитьРассчетТолькоВнутриЛиний",Данные.ПроизводитьРассчетТолькоВнутриЛиний);
		МассивПараметров.Добавить(СтруктураПараметров);
		КлючЗадания=новый УникальныйИдентификатор;
		СтруктураЗадания=новый Структура;
		СтруктураЗадания.Вставить("СтруктураПараметров",СтруктураПараметров);
		СтруктураЗадания.Вставить("КлючЗадания",КлючЗадания);
		СтруктураЗадания.Вставить("Состояние");
		ФоновыеЗадания.Выполнить("итWMSПривилегированныйМодуль.ЗаполнитьРасстоянияФрагмент",МассивПараметров,КлючЗадания,"ЗаполнениеРасстоянияЯчеек_"+Строка(ДанныеЯчейки.Ячейка));
		МассивЗаданий.Добавить(СтруктураЗадания);
		Данные.МассивЯчеекВОбработке.Добавить(Выборка.Ячейка);
	КонецЦикла;
	Если МассивЗаданий.Количество()>0 Тогда 
		Данные.Вставить("МассивЗаданий",МассивЗаданий);
		ХранилищеОбщихНастроек.Сохранить("ЗаполнитьРасстоянияМеждуЯчейками","ЗаполнитьРасстоянияМеждуЯчейками",Данные,,"ЗаполнитьРасстоянияМеждуЯчейками");
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ЗаполнитьРасстоянияМеждуЯчейкамиПроверкаНаЗАполненность(Данные)
	
	Если Данные.Свойство("МассивВыполненныхЯчеек") Тогда
		Если ТипЗнч(Данные.МассивВыполненныхЯчеек)<>Тип("Массив") Тогда 
			Данные.Вставить("МассивВыполненныхЯчеек",новый Массив);
		КонецЕсли;
	иначе
		Данные.Вставить("МассивВыполненныхЯчеек",новый Массив);
	КонецЕсли;
	Если   Данные.Свойство("МассивЯчеекВОбработке") Тогда 
		Если ТипЗнч(Данные.МассивЯчеекВОбработке)<>Тип("Массив") Тогда 
			Данные.Вставить("МассивЯчеекВОбработке",новый Массив);
		КонецЕсли;
	иначе
		Данные.Вставить("МассивЯчеекВОбработке",новый Массив);	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьНаЗавершенияЗаданий(МассивЗаданий,Данные)
	//ВсеЗаданияВыполнены=Ложь;
	//Пока не  ВсеЗаданияВыполнены Цикл 
	ВсеЗаданияВыполнены=Истина;
	Для Каждого стр из МассивЗаданий цикл
		СписокЗаданий=ФоновыеЗадания.ПолучитьФоновыеЗадания(новый Структура("Ключ",стр.КлючЗадания));
		Для Каждого Задания из СписокЗаданий цикл
			Если 	 не ЭтоЗавершенноеСостояниеЗадания(Задания) Тогда 
				ВсеЗаданияВыполнены=Ложь;
			КонецЕсли;
			стр.Состояние=Задания.Состояние;
		КонецЦикла;
	КонецЦикла; 
	//КонецЦикла;	
	Если не ВсеЗаданияВыполнены Тогда 
		Возврат
	КонецЕсли;	
	НовыйМассивЗаданий=новый Массив;
	Для Каждого стр из МассивЗаданий цикл
		Если стр.Состояние=СостояниеФоновогоЗадания.Завершено Тогда 
			Данные.МассивВыполненныхЯчеек.Добавить(стр.СтруктураПараметров.ДанныеЯчейки.Ячейка);
			Индекс=Данные.МассивЯчеекВОбработке.Найти(стр.СтруктураПараметров.ДанныеЯчейки.Ячейка);
			Если Индекс<>Неопределено Тогда 
				Данные.МассивЯчеекВОбработке.Удалить(Индекс);
			КонецЕсли;					
		КонецЕсли;
		Если стр.Состояние=СостояниеФоновогоЗадания.ЗавершеноАварийно   Тогда 
			НовыйКлючЗадания=новый УникальныйИдентификатор;
			МассивПараметров=новый Массив;
			стр.КлючЗадания=НовыйКлючЗадания;
			МассивПараметров.Добавить(стр.СтруктураПараметров);
			ФоновыеЗадания.Выполнить("итWMSПривилегированныйМодуль.ЗаполнитьРасстоянияФрагмент",МассивПараметров,НовыйКлючЗадания,"ЗаполнениеРасстоянияЯчеек_"+Строка(стр.СтруктураПараметров.ДанныеЯчейки.Ячейка));
			НовыйМассивЗаданий.Добавить(стр);
		КонецЕсли;
	КонецЦикла;
	Если НовыйМассивЗаданий.Количество()>0 Тогда 
		Данные.Вставить("МассивЗаданий",НовыйМассивЗаданий);
	иначе
		Данные.Вставить("МассивЗаданий",новый Массив);
	КонецЕсли;
	ХранилищеОбщихНастроек.Сохранить("ЗаполнитьРасстоянияМеждуЯчейками","ЗаполнитьРасстоянияМеждуЯчейками",Данные,,"ЗаполнитьРасстоянияМеждуЯчейками");
	
	
КонецПроцедуры

Функция ЭтоЗавершенноеСостояниеЗадания(Задание)
	Если 	Задание.Состояние=СостояниеФоновогоЗадания.Завершено  или 
		Задание.Состояние=СостояниеФоновогоЗадания.ЗавершеноАварийно или
		Задание.Состояние=СостояниеФоновогоЗадания.Отменено Тогда 
		
		Возврат Истина;
	иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьРасстоянияФрагмент (ПараметрыФоновогоЗадания) Экспорт 
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	ДанныеЯчеек(МенеджерВременныхТаблиц,ПараметрыФоновогоЗадания);
	ПустаяСсылка=Справочники.итСкладскиеЯчейки.ПустаяСсылка();	
	ДанныеЯчейки = ПараметрыФоновогоЗадания.ДанныеЯчейки;
	КвалификаторСтроки=новый КвалификаторыСтроки(255);
	КвалификаторЧисла=новый КвалификаторыЧисла(15,2);
	Если ДанныеЯчейки.ЯчейкаОтсчета=ПустаяСсылка Тогда 
		Возврат;
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ит_WMS_РасстояниеМеждуЯчейками.ЯчейкаПолучатель
	|ПОМЕСТИТЬ ВтДанныеЯчеекИсключения
	|ИЗ
	|	РегистрСведений.ит_WMS_РасстояниеМеждуЯчейками КАК ит_WMS_РасстояниеМеждуЯчейками
	|ГДЕ
	|	ит_WMS_РасстояниеМеждуЯчейками.ЯчейкаОтправитель = &ЯчейкаОтправитель
	|	И ит_WMS_РасстояниеМеждуЯчейками.Расстояние <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЯчеек.Ячейка,
	|	ДанныеЯчеек.СкладскоеПомещение КАК СкладскоеПомещение,
	|	ДанныеЯчеек.Линия КАК Линия,
	|	ДанныеЯчеек.Стеллаж КАК Стеллаж,
	|	ДанныеЯчеек.Ярус КАК Ярус,
	|	ДанныеЯчеек.ЯчейкаОтсчета,
	|	ДанныеЯчеек.НомерРядаПролета КАК НомерРядаПролета
	|ИЗ
	|	ДанныеЯчеек КАК ДанныеЯчеек
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НеПерерассчитыватьДанныеДляУжеРассчитаныхЯчеек
	|				ТОГДА НЕ ДанныеЯчеек.Ячейка В
	|							(ВЫБРАТЬ
	|								ВтДанныеЯчеекИсключения.ЯчейкаПолучатель
	|							ИЗ
	|								ВтДанныеЯчеекИсключения КАК ВтДанныеЯчеекИсключения)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ПроизводитьРассчетТолькоВнутриЛиний
	|				ТОГДА ДанныеЯчеек.Линия = &Линия
	|						И ДанныеЯчеек.СкладскоеПомещение = &СкладскоеПомещениеЯчейки
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкладскоеПомещение,
	|	НомерРядаПролета,
	|	Линия,
	|	Ярус,
	|	Стеллаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеЯчеекИсключения";
	
	Запрос.УстановитьПараметр("НеПерерассчитыватьДанныеДляУжеРассчитаныхЯчеек",ПараметрыФоновогоЗадания.НеПерерассчитыватьДанныеДляУжеРассчитаныхЯчеек);
	Запрос.УстановитьПараметр("ПроизводитьРассчетТолькоВнутриЛиний",ПараметрыФоновогоЗадания.ПроизводитьРассчетТолькоВнутриЛиний);
	Запрос.УстановитьПараметр("СкладскоеПомещениеЯчейки",ДанныеЯчейки.СкладскоеПомещение);
	Запрос.УстановитьПараметр("Линия",ДанныеЯчейки.Линия);
	Запрос.УстановитьПараметр("ЯчейкаОтправитель",ДанныеЯчейки.Ячейка);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальнойЗаписи=РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальнойЗаписи.Следующий() цикл
		Если ВыборкаДетальнойЗаписи.ЯчейкаОтсчета = ПустаяСсылка Тогда 
			Продолжить;
		КонецЕсли;	
		ТаблицаПутей=новый ТаблицаЗначений;
		ТаблицаПутей.Колонки.Добавить("Путь",новый ОписаниеТипов("Строка",,,,КвалификаторСтроки));
		ТаблицаПутей.Колонки.Добавить("Расстояние",новый ОписаниеТипов("Число",,,КвалификаторЧисла));
		МассивПроверенныхЯчеек=новый Массив;
		МассивСозданныхПереходов=новый Массив;
		СтруктураДанных=новый Структура;
		СтруктураДанных.Вставить("МенеджерВременныхТаблиц",МенеджерВременныхТаблиц);
		СтруктураДанных.Вставить("МассивПроверенныхЯчеек",МассивПроверенныхЯчеек);
		СтруктураДанных.Вставить("МассивСозданныхПереходов",МассивСозданныхПереходов);
		СтруктураДанных.Вставить("ВыборкаЯчейкиОтправитель",ДанныеЯчейки);
		СтруктураДанных.Вставить("ВыборкаЯчейкиПолучатель",ВыборкаДетальнойЗаписи);
		СтруктураДанных.Вставить("ТаблицаПутей",ТаблицаПутей);
		СтруктураДанных.Вставить("СчетчикПутей",0);
		СтруктураДанных.Вставить("ПараметрыФоновогоЗадания",ПараметрыФоновогоЗадания);
		СтруктураДанных.Вставить("ДлинаТекущегоКороткогоПути",-1);
		СтруктураДанных.Вставить("ДанныеПолученыПутемОбратнойСвязи",Ложь);
		СтруктураРассчетаВверх =СоздатьСтруктуруРассчета(ДанныеЯчейки);
		СтруктураРассчетаВниз=  СоздатьСтруктуруРассчета(ДанныеЯчейки);
		СтруктураДанныхПутей=новый Структура;
		СтруктураДанныхПутей.Вставить("ПутьЛинияВверх",СтруктураРассчетаВверх);
		СтруктураДанныхПутей.Вставить("ПутьЛинияВниз",СтруктураРассчетаВниз);
		СтруктураДанных.Вставить("СтруктураДанныхПутей",СтруктураДанныхПутей);
		ТекущийПуть=НеЗаконченныйПуть(СтруктураДанных.СтруктураДанныхПутей);
		Пока ТекущийПуть<>Неопределено цикл
			ПереборДанных(СтруктураДанных,ТекущийПуть);
		КонецЦикла;
		Если не СтруктураДанных.ДанныеПолученыПутемОбратнойСвязи Тогда 
			ЗаписьРезультатовВРегистр(СтруктураДанных);
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Функция СоздатьСтруктуруРассчета(Выборка)
	СтруктураРассчета =новый Структура();
	СтруктураРассчета.Вставить("ЯчейкаОтсчета",Выборка.ЯчейкаОтсчета);
	СтруктураРассчета.Вставить("Линия",Выборка.Линия);
	СтруктураРассчета.Вставить("Стеллаж",Выборка.Стеллаж);
	СтруктураРассчета.Вставить("СкладскоеПомещение",Выборка.СкладскоеПомещение);
	СтруктураРассчета.Вставить("НомерРядаПролета",Выборка.НомерРядаПролета);
	СтруктураРассчета.Вставить("НачисленноеРасстояние",0);
	СтруктураРассчета.Вставить("ПутьНайден",Ложь);
	СтруктураРассчета.Вставить("ОбходЗакончен",Ложь);
	СтруктураРассчета.Вставить("МассивЯчеекПути",новый Массив);
	СтруктураРассчета.Вставить("МассивПройденныхЛиний",новый Массив);
	
	Возврат СтруктураРассчета;
КонецФункции

Процедура ЗаписьРезультатовВРегистр(СтруктураДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.Путь,
	|	ТаблицаДанных.Расстояние
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТ.Расстояние) КАК Расстояние
	|ПОМЕСТИТЬ ВтМинимальноеРасстояние
	|ИЗ
	|	ВТ КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТ.Путь) КАК Путь
	|ПОМЕСТИТЬ ВтДанныеВерногоПути
	|ИЗ
	|	ВтМинимальноеРасстояние КАК ВтМинимальноеРасстояние
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	|		ПО ВтМинимальноеРасстояние.Расстояние = ВТ.Расстояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Путь,
	|	ВТ.Расстояние
	|ИЗ
	|	ВтДанныеВерногоПути КАК ВтДанныеВерногоПути
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	|		ПО ВтДанныеВерногоПути.Путь = ВТ.Путь";
	Запрос.УстановитьПараметр("ТаблицаДанных",СтруктураДанных.ТаблицаПутей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой()  Тогда 
		///////Запись расстояния для Ячейки отправителя
		НаборЗаписей=РегистрыСведений.ит_WMS_РасстояниеМеждуЯчейками.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЯчейкаОтправитель.Установить(СтруктураДанных.ВыборкаЯчейкиОтправитель.Ячейка);
		НаборЗаписей.Отбор.ЯчейкаПолучатель.Установить(СтруктураДанных.ВыборкаЯчейкиПолучатель.Ячейка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.ЯчейкаОтправитель=СтруктураДанных.ВыборкаЯчейкиОтправитель.Ячейка;
		НоваяЗапись.ЯчейкаПолучатель=СтруктураДанных.ВыборкаЯчейкиПолучатель.Ячейка;
		НоваяЗапись.Расстояние=-1;
		НаборЗаписей.Записать();
		///////Запись расстояния для Ячейки Отсчета
		НаборЗаписей=РегистрыСведений.ит_WMS_РасстояниеМеждуЯчейками.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЯчейкаОтправитель.Установить(СтруктураДанных.ВыборкаЯчейкиОтправитель.ЯчейкаОтсчета);
		НаборЗаписей.Отбор.ЯчейкаПолучатель.Установить(СтруктураДанных.ВыборкаЯчейкиПолучатель.ЯчейкаОтсчета);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество()=0 Тогда 
			НаборЗаписей.Очистить();
			НоваяЗапись=НаборЗаписей.Добавить();
			НоваяЗапись.ЯчейкаОтправитель=СтруктураДанных.ВыборкаЯчейкиОтправитель.ЯчейкаОтсчета;
			НоваяЗапись.ЯчейкаПолучатель=СтруктураДанных.ВыборкаЯчейкиПолучатель.ЯчейкаОтсчета;
			НоваяЗапись.Расстояние=-1;
			НаборЗаписей.Записать();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		///////Запись расстояния для Ячейки отправителя
		НаборЗаписей=РегистрыСведений.ит_WMS_РасстояниеМеждуЯчейками.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЯчейкаОтправитель.Установить(СтруктураДанных.ВыборкаЯчейкиОтправитель.Ячейка);
		НаборЗаписей.Отбор.ЯчейкаПолучатель.Установить(СтруктураДанных.ВыборкаЯчейкиПолучатель.Ячейка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.ЯчейкаОтправитель=СтруктураДанных.ВыборкаЯчейкиОтправитель.Ячейка;
		НоваяЗапись.ЯчейкаПолучатель=СтруктураДанных.ВыборкаЯчейкиПолучатель.Ячейка;
		НоваяЗапись.Расстояние=ВыборкаДетальныеЗаписи.Расстояние;
		НаборЗаписей.Записать();
		///////Запись расстояния для Ячейки Отсчета
		НаборЗаписей=РегистрыСведений.ит_WMS_РасстояниеМеждуЯчейками.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЯчейкаОтправитель.Установить(СтруктураДанных.ВыборкаЯчейкиОтправитель.ЯчейкаОтсчета);
		НаборЗаписей.Отбор.ЯчейкаПолучатель.Установить(СтруктураДанных.ВыборкаЯчейкиПолучатель.ЯчейкаОтсчета);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество()=0 Тогда 
			НаборЗаписей.Очистить();
			НоваяЗапись=НаборЗаписей.Добавить();
			НоваяЗапись.ЯчейкаОтправитель=СтруктураДанных.ВыборкаЯчейкиОтправитель.ЯчейкаОтсчета;
			НоваяЗапись.ЯчейкаПолучатель=СтруктураДанных.ВыборкаЯчейкиПолучатель.ЯчейкаОтсчета;
			НоваяЗапись.Расстояние=ВыборкаДетальныеЗаписи.Расстояние;
			НаборЗаписей.Записать();
		КонецЕсли;
		
		Если   СтруктураДанных.ПараметрыФоновогоЗадания.ЗаписыватьРезультатКороткогоПутиДляВсехЯчеекПоХоду и ВыборкаДетальныеЗаписи.Путь<>"НулевойПуть" Тогда 
			Для Каждого Элемент из СтруктураДанных.СтруктураДанныхПутей[ВыборкаДетальныеЗаписи.Путь].МассивЯчеекПути Цикл 
				НаборЗаписей=РегистрыСведений.ит_WMS_РасстояниеМеждуЯчейками.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ЯчейкаОтправитель.Установить(Элемент.Ячейка);
				НаборЗаписей.Отбор.ЯчейкаПолучатель.Установить(СтруктураДанных.ВыборкаЯчейкиПолучатель.Ячейка);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество()=0 Тогда 	
					НаборЗаписей.Очистить();
					НоваяЗапись=НаборЗаписей.Добавить();
					НоваяЗапись.ЯчейкаОтправитель=Элемент.Ячейка;
					НоваяЗапись.ЯчейкаПолучатель=СтруктураДанных.ВыборкаЯчейкиПолучатель.Ячейка;
					НоваяЗапись.Расстояние=ВыборкаДетальныеЗаписи.Расстояние-Элемент.Расстояние;
					НаборЗаписей.Записать();
				КонецЕсли;
				ЯчейкаОтсчетаОтправитель=ПолучитьЯчейкуОтсчета(Элемент.Ячейка,СтруктураДанных);
				Если ЯчейкаОтсчетаОтправитель<>Неопределено Тогда 
					НаборЗаписей=РегистрыСведений.ит_WMS_РасстояниеМеждуЯчейками.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ЯчейкаОтправитель.Установить(ЯчейкаОтсчетаОтправитель);
					НаборЗаписей.Отбор.ЯчейкаПолучатель.Установить(СтруктураДанных.ВыборкаЯчейкиПолучатель.ЯчейкаОтсчета);
					НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество()=0 Тогда 	
						НаборЗаписей.Очистить();
						НоваяЗапись=НаборЗаписей.Добавить();
						НоваяЗапись.ЯчейкаОтправитель=ЯчейкаОтсчетаОтправитель;
						НоваяЗапись.ЯчейкаПолучатель=СтруктураДанных.ВыборкаЯчейкиПолучатель.ЯчейкаОтсчета;
						НоваяЗапись.Расстояние=ВыборкаДетальныеЗаписи.Расстояние-Элемент.Расстояние;
						НаборЗаписей.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьЯчейкуОтсчета(Ячейка,СтруктураДанных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=СтруктураДанных.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЯчеек.Ячейка КАК Ячейка,
	|	ДанныеЯчеек.СкладскоеПомещение КАК СкладскоеПомещение,
	|	ДанныеЯчеек.Линия КАК Линия,
	|	ДанныеЯчеек.Стеллаж КАК Стеллаж,
	|	ДанныеЯчеек.Ярус КАК Ярус,
	|	ДанныеЯчеек.ЯчейкаОтсчета,
	|	ДанныеЯчеек.НомерРядаПролета
	|ИЗ
	|	ДанныеЯчеек КАК ДанныеЯчеек
	|ГДЕ
	|	ДанныеЯчеек.Ячейка = &Ячейка";
	
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат  ВыборкаДетальныеЗаписи.ЯчейкаОтсчета;
	КонецЦикла;
	
	Возврат Неопределено;	
КонецФункции

Процедура ПереборДанных(СтруктураДанных,ТекущийПуть)
	
	Если  ПроверкаНаОтменуПеребора(СтруктураДанных, ТекущийПуть)Тогда 
		Возврат
	КонецЕсли;	
	НеСоздаватьНовыхПутей=Ложь;
	НеСоздватьновыхПутейЗаПриделСкладскогоПомещения=Ложь;
	Вверх=Ложь;
	ПутьОбработки= СтруктураДанных.СтруктураДанныхПутей[ТекущийПуть];
	УсловияНовыхМаршрутовИПорядкаОбхода(Вверх, НеСоздаватьНовыхПутей, НеСоздватьновыхПутейЗаПриделСкладскогоПомещения, СтруктураДанных, ТекущийПуть);
	СледующийСтеллаж= 0;	
	ПереборДанныхПодтверждениеПравильногоПУти( ПутьОбработки,  СтруктураДанных,  ТекущийПуть);
	Пока не ПутьОбработки.ОбходЗакончен Цикл
		Если  НаличиеГотовогоКороткогоПути(ПутьОбработки, СтруктураДанных, ТекущийПуть) Тогда 
			Продолжить;
		КонецЕсли;
		ДобавлениеВМассивПройденныхЛиний(НеСоздаватьНовыхПутей, ПутьОбработки, СтруктураДанных);
		ЭлементМассива=СтруктураДанных.МассивПроверенныхЯчеек.Найти(ПутьОбработки.ЯчейкаОтсчета);
		Если не НеСоздаватьНовыхПутей и ЭлементМассива=Неопределено Тогда 
			ПроверитьНаНовоеРазветвление(ПутьОбработки,НеСоздватьновыхПутейЗаПриделСкладскогоПомещения,СтруктураДанных);
			СтруктураДанных.МассивПроверенныхЯчеек.Добавить(ПутьОбработки.ЯчейкаОтсчета);
		КонецЕсли;
		
		
		Если УсловиеПереходаНаСоседниюЛинию(НеСоздаватьНовыхПутей, ПутьОбработки, СтруктураДанных) Тогда 
			СоздатьПереходНаСоседниюЛинию(СтруктураДанных,ПутьОбработки);
		КонецЕсли;	
		Если Вверх Тогда 
			СледующийСтеллаж=ПутьОбработки.Стеллаж+1;
		иначе
			СледующийСтеллаж=ПутьОбработки.Стеллаж-1;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=СтруктураДанных.МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеЯчеек.Ячейка,
		|	ДанныеЯчеек.СкладскоеПомещение,
		|	ДанныеЯчеек.Линия,
		|	ДанныеЯчеек.Стеллаж,
		|	ДанныеЯчеек.Ярус,
		|	ДанныеЯчеек.ЯчейкаОтсчета,
		|	ДанныеЯчеек.НомерРядаПролета
		|ИЗ
		|	ДанныеЯчеек КАК ДанныеЯчеек
		|ГДЕ
		|	ДанныеЯчеек.СкладскоеПомещение = &СкладскоеПомещение
		|	И ДанныеЯчеек.Линия = &Линия
		|	И ДанныеЯчеек.Стеллаж = &Стеллаж
		|	И (ДанныеЯчеек.Ярус = 1
		|			ИЛИ ДанныеЯчеек.Ярус = 0)";
		
		Запрос.УстановитьПараметр("Линия", ПутьОбработки.Линия);
		Запрос.УстановитьПараметр("СкладскоеПомещение", ПутьОбработки.СкладскоеПомещение);
		Запрос.УстановитьПараметр("Стеллаж", СледующийСтеллаж);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
			ПутьОбработки.НачисленноеРасстояние=ПутьОбработки.НачисленноеРасстояние+ПолучитьРасстояниеСвязиМеждуЯчейками(ПутьОбработки.ЯчейкаОтсчета,ВыборкаДетальныеЗаписи.ЯчейкаОтсчета);
			Если ПутьОбработки.НачисленноеРасстояние >= СтруктураДанных.ДлинаТекущегоКороткогоПути и СтруктураДанных.ДлинаТекущегоКороткогоПути>=0 Тогда 
				ПутьОбработки.ОбходЗакончен=Истина;
				Продолжить;
			КонецЕсли;
			ПутьОбработки.ЯчейкаОтсчета= ВыборкаДетальныеЗаписи.ЯчейкаОтсчета;
			ПутьОбработки.СкладскоеПомещение= ВыборкаДетальныеЗаписи.СкладскоеПомещение;
			ПутьОбработки.Линия=ВыборкаДетальныеЗаписи.Линия;
			ПутьОбработки.Стеллаж =ВыборкаДетальныеЗаписи.Стеллаж;
			ПутьОбработки.НомерРядаПролета=ВыборкаДетальныеЗаписи.НомерРядаПролета;
			Если СтруктураДанных.ПараметрыФоновогоЗадания.ЗаписыватьРезультатКороткогоПутиДляВсехЯчеекПоХоду Тогда 
				ПутьОбработки.МассивЯчеекПути.Добавить(новый Структура("Ячейка,Расстояние",ПутьОбработки.ЯчейкаОтсчета,ПутьОбработки.НачисленноеРасстояние))
			КонецЕсли;	 
			ПереборДанныхПодтверждениеПравильногоПУти(ПутьОбработки, СтруктураДанных, ТекущийПуть);
			
		иначе
			ПутьОбработки.ОбходЗакончен=Истина;
		КонецЕсли;
		
		
	КонецЦикла;
	
	ТекущийПуть=НеЗаконченныйПуть(СтруктураДанных.СтруктураДанныхПутей);
КонецПроцедуры

Процедура ПереборДанныхПодтверждениеПравильногоПУти( ПутьОбработки,  СтруктураДанных,  ТекущийПуть)
	
	
	Если СтруктураДанных.ВыборкаЯчейкиПолучатель.ЯчейкаОтсчета=ПутьОбработки.ЯчейкаОтсчета Тогда 
		ПутьОбработки.ОбходЗакончен=Истина;
		ПутьОбработки.ПутьНайден=Истина;
		НоваяСтрока=СтруктураДанных.ТаблицаПутей.Добавить();
		НоваяСтрока.Путь=ТекущийПуть;
		НоваяСтрока.Расстояние=ПутьОбработки.НачисленноеРасстояние;
		Если  ПутьОбработки.НачисленноеРасстояние  <= СтруктураДанных.ДлинаТекущегоКороткогоПути или СтруктураДанных.ДлинаТекущегоКороткогоПути=-1   Тогда 
			СтруктураДанных.ДлинаТекущегоКороткогоПути=ПутьОбработки.НачисленноеРасстояние;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавлениеВМассивПройденныхЛиний(Знач НеСоздаватьНовыхПутей,  ПутьОбработки,  СтруктураДанных)
	
	
	Если СтруктураДанных.ПараметрыФоновогоЗадания.ВРазрезеОдногоПутиНеВозвращатьсяНаПройденныеЛинии Тогда
		Если не НеСоздаватьНовыхПутей Тогда 
			ЭлементМассива= ПутьОбработки.МассивПройденныхЛиний.Найти(Строка(ПутьОбработки.СкладскоеПомещение)+"*_*"+Строка(ПутьОбработки.Линия));
			Если  ЭлементМассива = Неопределено Тогда
				ПутьОбработки.МассивПройденныхЛиний.Добавить(Строка(ПутьОбработки.СкладскоеПомещение)+"*_*"+Строка(ПутьОбработки.Линия));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Функция ПроверкаНаПройденностьЛинии(ПутьОбработки,Линия,СкладскоеПомещение)
	ЭлементМассива= ПутьОбработки.МассивПройденныхЛиний.Найти(Строка(СкладскоеПомещение)+"*_*"+Строка(Линия));
	Если  ЭлементМассива = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция  НаличиеГотовогоКороткогоПути( ПутьОбработки,  СтруктураДанных,  ТекущийПуть)		
	Если СтруктураДанных.ПараметрыФоновогоЗадания.ПриОбходеУчитыватьУжеИмеющиесяМаршруты Тогда 
		Расстояние=ПолучитьДанныеКороткогоПутиОтЯчейкиДоЯчейки(ПутьОбработки.ЯчейкаОтсчета,СтруктураДанных.ВыборкаЯчейкиПолучатель.ЯчейкаОтсчета);
		Если Расстояние <> Неопределено Тогда
			Если Расстояние<0 Тогда 
				Возврат Ложь;
			КонецЕсли;	
			НоваяСтрока=СтруктураДанных.ТаблицаПутей.Добавить();
			НоваяСтрока.Путь=ТекущийПуть;
			НоваяСтрока.Расстояние=ПутьОбработки.НачисленноеРасстояние+Расстояние;
			ПутьОбработки.ОбходЗакончен=Истина;
			Если СтруктураДанных.ДлинаТекущегоКороткогоПути > ПутьОбработки.НачисленноеРасстояние  Тогда 
				СтруктураДанных.ДлинаТекущегоКороткогоПути=ПутьОбработки.НачисленноеРасстояние;
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура УсловияНовыхМаршрутовИПорядкаОбхода(Вверх, НеСоздаватьНовыхПутей, НеСоздватьновыхПутейЗаПриделСкладскогоПомещения,  СтруктураДанных,  ТекущийПуть)
	
	Если СтруктураДанных.ВыборкаЯчейкиОтправитель.Линия = СтруктураДанных.ВыборкаЯчейкиПолучатель.Линия Тогда 
		НеСоздаватьНовыхПутей=Истина;
	КонецЕсли;
	Если СтруктураДанных.ВыборкаЯчейкиОтправитель.СкладскоеПомещение = СтруктураДанных.ВыборкаЯчейкиПолучатель.СкладскоеПомещение Тогда 
		НеСоздватьновыхПутейЗаПриделСкладскогоПомещения=Истина;
	КонецЕсли;
	
	Если Найти(ТекущийПуть,"ЛинияВверх")>0 Тогда 
		Вверх=Истина;
	КонецЕсли;
	
КонецПроцедуры


Функция  ПроверкаНаОтменуПеребора(СтруктураДанных, ТекущийПуть)
	
	Если СтруктураДанных.ВыборкаЯчейкиОтправитель.ЯчейкаОтсчета=СтруктураДанных.ВыборкаЯчейкиПолучатель.ЯчейкаОтсчета  Тогда 
		ТекущийПуть=Неопределено;
		НоваяСтрока=СтруктураДанных.ТаблицаПутей.Добавить();
		НоваяСтрока.Путь="НулевойПуть";
		НоваяСтрока.Расстояние=0;
		УстановитьПризнакОбработкиВсемОставшимсяПутям(СтруктураДанных.СтруктураДанныхПутей);
		Возврат Истина;
	КонецЕсли;
	Если СтруктураДанных.ПараметрыФоновогоЗадания.ИспользоватьПринципОбратнойСвязи Тогда
		Если ЕстьОбратнаяСвзять(СтруктураДанных) Тогда
			СтруктураДанных.ДанныеПолученыПутемОбратнойСвязи=Истина;
			ТекущийПуть=Неопределено;
			Возврат Истина;	
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция УсловиеПереходаНаСоседниюЛинию(Знач НеСоздаватьНовыхПутей, Знач ПутьОбработки, Знач СтруктураДанных)
	
	Возврат НайтиЗначенияВСтруктурированномМассиве(СтруктураДанных.МассивСозданныхПереходов,новый Структура("СкладскоеПомещение,НомерРядаПролета",
	ПутьОбработки.СкладскоеПомещение,ПутьОбработки.НомерРядаПролета)) = Неопределено и ПутьОбработки.НомерРядаПролета<>0 и  не НеСоздаватьНовыхПутей и  
	ПутьОбработки.СкладскоеПомещение=СтруктураДанных.ВыборкаЯчейкиПолучатель.СкладскоеПомещение и ПутьОбработки.НомерРядаПролета=СтруктураДанных.ВыборкаЯчейкиПолучатель.НомерРядаПролета;
	
КонецФункции


Функция ПолучитьДанныеКороткогоПутиОтЯчейкиДоЯчейки(ЯчейкаОтправитель,ЯчейкаПолучатель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ит_WMS_РасстояниеМеждуЯчейками.ЯчейкаОтправитель,
	|	ит_WMS_РасстояниеМеждуЯчейками.ЯчейкаПолучатель,
	|	ит_WMS_РасстояниеМеждуЯчейками.Расстояние
	|ИЗ
	|	РегистрСведений.ит_WMS_РасстояниеМеждуЯчейками КАК ит_WMS_РасстояниеМеждуЯчейками
	|ГДЕ
	|	ит_WMS_РасстояниеМеждуЯчейками.ЯчейкаОтправитель = &ЯчейкаОтправитель
	|	И ит_WMS_РасстояниеМеждуЯчейками.ЯчейкаПолучатель = &ЯчейкаПолучатель
	|	И ит_WMS_РасстояниеМеждуЯчейками.Расстояние <> 0";
	
	Запрос.УстановитьПараметр("ЯчейкаОтправитель", ЯчейкаОтправитель);
	Запрос.УстановитьПараметр("ЯчейкаПолучатель", ЯчейкаПолучатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат  ВыборкаДетальныеЗаписи.Расстояние
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Процедура СоздатьПереходНаСоседниюЛинию(СтруктураДанных,ПутьОбработки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=СтруктураДанных.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЯчеек.Ячейка,
	|	ДанныеЯчеек.СкладскоеПомещение,
	|	ДанныеЯчеек.Линия,
	|	ДанныеЯчеек.Стеллаж,
	|	ДанныеЯчеек.Ярус,
	|	ДанныеЯчеек.ЯчейкаОтсчета,
	|	ДанныеЯчеек.НомерРядаПролета,
	|	ВЫБОР
	|		КОГДА &Стеллаж - ДанныеЯчеек.Стеллаж < 0
	|			ТОГДА -(&Стеллаж - ДанныеЯчеек.Стеллаж)
	|		ИНАЧЕ &Стеллаж - ДанныеЯчеек.Стеллаж
	|	КОНЕЦ КАК ПорядокОбхода
	|ПОМЕСТИТЬ ВтДанныеОтбора
	|ИЗ
	|	ДанныеЯчеек КАК ДанныеЯчеек
	|ГДЕ
	|	ДанныеЯчеек.СкладскоеПомещение = &СкладскоеПомещение
	|	И (ДанныеЯчеек.Ярус = 1
	|			ИЛИ ДанныеЯчеек.Ярус = 0)
	|	И ДанныеЯчеек.Линия <> &Линия
	|	И ДанныеЯчеек.НомерРядаПролета = &НомерРядаПролета
	|	И ДанныеЯчеек.НомерРядаПролета <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеОтбора.Ячейка,
	|	ВтДанныеОтбора.СкладскоеПомещение,
	|	ВтДанныеОтбора.Линия,
	|	ВтДанныеОтбора.Стеллаж,
	|	ВтДанныеОтбора.Ярус,
	|	ВтДанныеОтбора.ЯчейкаОтсчета,
	|	ВтДанныеОтбора.НомерРядаПролета,
	|	ВтДанныеОтбора.ПорядокОбхода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтДанныеОтбора.СкладскоеПомещение КАК СкладскоеПомещение,
	|		ВтДанныеОтбора.Линия КАК Линия,
	|		МИНИМУМ(ВтДанныеОтбора.ПорядокОбхода) КАК ПорядокОбхода
	|	ИЗ
	|		ВтДанныеОтбора КАК ВтДанныеОтбора
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВтДанныеОтбора.СкладскоеПомещение,
	|		ВтДанныеОтбора.Линия) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеОтбора КАК ВтДанныеОтбора
	|		ПО ВложенныйЗапрос.СкладскоеПомещение = ВтДанныеОтбора.СкладскоеПомещение
	|			И ВложенныйЗапрос.Линия = ВтДанныеОтбора.Линия
	|			И ВложенныйЗапрос.ПорядокОбхода = ВтДанныеОтбора.ПорядокОбхода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеОтбора";
	
	Запрос.УстановитьПараметр("Линия", ПутьОбработки.Линия);
	Запрос.УстановитьПараметр("Стеллаж", ПутьОбработки.Стеллаж);
	Запрос.УстановитьПараметр("НомерРядаПролета", ПутьОбработки.НомерРядаПролета);
	Запрос.УстановитьПараметр("СкладскоеПомещение", ПутьОбработки.СкладскоеПомещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		Если ЕстьУстановленнаяСвзятьЯчеек(ПутьОбработки.ЯчейкаОтсчета,ВыборкаДетальныеЗаписи.ЯчейкаОтсчета)  Тогда 
			Продолжить;
		КонецЕсли;	
		СтруктураРассчетаВверх =СоздатьСтруктуруРассчета(ВыборкаДетальныеЗаписи);
		СтруктураРассчетаВверх.НачисленноеРасстояние=1+ПутьОбработки.НачисленноеРасстояние;
		СтруктураРассчетаВверх.МассивЯчеекПути=СкопироватьМассив(ПутьОбработки.МассивЯчеекПути);
		СтруктураРассчетаВверх.МассивПройденныхЛиний=СкопироватьМассив(ПутьОбработки.МассивПройденныхЛиний);
		
		СтруктураРассчетаВниз = СоздатьСтруктуруРассчета(ВыборкаДетальныеЗаписи);
		СтруктураРассчетаВниз.НачисленноеРасстояние=1+ПутьОбработки.НачисленноеРасстояние;
		СтруктураРассчетаВниз.МассивЯчеекПути=СкопироватьМассив(ПутьОбработки.МассивЯчеекПути);
		СтруктураРассчетаВниз.МассивПройденныхЛиний=СкопироватьМассив(ПутьОбработки.МассивПройденныхЛиний);
		
		СтруктураДанных.СтруктураДанныхПутей.Вставить("Путь"+Строка(СтруктураДанных.СчетчикПутей)+"ЛинияВверх",СтруктураРассчетаВверх);
		СтруктураДанных.СтруктураДанныхПутей.Вставить("Путь"+Строка(СтруктураДанных.СчетчикПутей)+"ЛинияВниз",СтруктураРассчетаВниз);
		СтруктураДанных.СчетчикПутей=СтруктураДанных.СчетчикПутей+1;
	КонецЦикла;
	СтруктураДанных.МассивСозданныхПереходов.Добавить(новый Структура("СкладскоеПомещение,НомерРядаПролета",
	ПутьОбработки.СкладскоеПомещение,ПутьОбработки.НомерРядаПролета));
	
КонецПроцедуры


Функция ЕстьУстановленнаяСвзятьЯчеек(ЯчейкаОтправитель,ЯчейкаПолучатель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ит_WMS_СвязиЯчеек.ЯчейкаОтправитель,
	|	ит_WMS_СвязиЯчеек.ЯчейкаПолучатель,
	|	ит_WMS_СвязиЯчеек.СтоимостьПерехода
	|ИЗ
	|	РегистрСведений.ит_WMS_СвязиЯчеек КАК ит_WMS_СвязиЯчеек
	|ГДЕ
	|	ит_WMS_СвязиЯчеек.ЯчейкаОтправитель = &ЯчейкаОтправитель
	|	И ит_WMS_СвязиЯчеек.ЯчейкаПолучатель = &ЯчейкаПолучатель";
	
	Запрос.УстановитьПараметр("ЯчейкаОтправитель", ЯчейкаОтправитель);
	Запрос.УстановитьПараметр("ЯчейкаПолучатель", ЯчейкаПолучатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина	
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции
Функция НайтиЗначенияВСтруктурированномМассиве(Массив,Структура)
	Индекс=0;
	Для Каждого стр из Массив Цикл 
		ВсеЗначенияСовпадают=Истина;
		Для Каждого ЭлементСтруктура из Структура цикл
			Если стр[ЭлементСтруктура.Ключ]<>ЭлементСтруктура.Значение Тогда 
				ВсеЗначенияСовпадают=Ложь;
			КонецЕсли;
			Если  ВсеЗначенияСовпадают Тогда 
				Возврат Индекс;
			КонецЕсли;	
		КонецЦикла;
		Индекс=Индекс+1;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция ЕстьОбратнаяСвзять(СтруктураДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ит_WMS_РасстояниеМеждуЯчейками.ЯчейкаОтправитель,
	|	ит_WMS_РасстояниеМеждуЯчейками.ЯчейкаПолучатель,
	|	ит_WMS_РасстояниеМеждуЯчейками.Расстояние
	|ИЗ
	|	РегистрСведений.ит_WMS_РасстояниеМеждуЯчейками КАК ит_WMS_РасстояниеМеждуЯчейками
	|ГДЕ
	|	ит_WMS_РасстояниеМеждуЯчейками.ЯчейкаОтправитель = &ЯчейкаПолучатель
	|	И ит_WMS_РасстояниеМеждуЯчейками.ЯчейкаПолучатель = &ЯчейкаОтправитель";
	
	Запрос.УстановитьПараметр("ЯчейкаОтправитель", СтруктураДанных.ВыборкаЯчейкиОтправитель.Ячейка);
	Запрос.УстановитьПараметр("ЯчейкаПолучатель", СтруктураДанных.ВыборкаЯчейкиПолучатель.Ячейка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		МенеджерЗаписи=РегистрыСведений.ит_WMS_РасстояниеМеждуЯчейками.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЯчейкаПолучатель=СтруктураДанных.ВыборкаЯчейкиПолучатель.Ячейка;
		МенеджерЗаписи.ЯчейкаОтправитель=СтруктураДанных.ВыборкаЯчейкиОтправитель.Ячейка;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ЯчейкаПолучатель=СтруктураДанных.ВыборкаЯчейкиПолучатель.Ячейка;
		МенеджерЗаписи.ЯчейкаОтправитель=СтруктураДанных.ВыборкаЯчейкиОтправитель.Ячейка;
		МенеджерЗаписи.Расстояние=ВыборкаДетальныеЗаписи.Расстояние;
		МенеджерЗаписи.Записать();
		
		МенеджерЗаписи=РегистрыСведений.ит_WMS_РасстояниеМеждуЯчейками.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЯчейкаПолучатель=СтруктураДанных.ВыборкаЯчейкиПолучатель.ЯчейкаОтсчета;
		МенеджерЗаписи.ЯчейкаОтправитель=СтруктураДанных.ВыборкаЯчейкиОтправитель.ЯчейкаОтсчета;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ЯчейкаПолучатель=СтруктураДанных.ВыборкаЯчейкиПолучатель.ЯчейкаОтсчета;
		МенеджерЗаписи.ЯчейкаОтправитель=СтруктураДанных.ВыборкаЯчейкиОтправитель.ЯчейкаОтсчета;
		МенеджерЗаписи.Расстояние=ВыборкаДетальныеЗаписи.Расстояние;
		МенеджерЗаписи.Записать();
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции


Функция ПолучитьРасстояниеСвязиМеждуЯчейками(ЯчейкаОтправитель,ЯчейкаПолучатель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ит_WMS_СвязиЯчеек.СтоимостьПерехода
	|ИЗ
	|	РегистрСведений.ит_WMS_СвязиЯчеек КАК ит_WMS_СвязиЯчеек
	|ГДЕ
	|	ит_WMS_СвязиЯчеек.ЯчейкаОтправитель = &ЯчейкаОтправитель
	|	И ит_WMS_СвязиЯчеек.ЯчейкаПолучатель = &ЯчейкаПолучатель";
	
	Запрос.УстановитьПараметр("ЯчейкаОтправитель", ЯчейкаОтправитель);
	Запрос.УстановитьПараметр("ЯчейкаПолучатель", ЯчейкаПолучатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат   ВыборкаДетальныеЗаписи.СтоимостьПерехода;
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции

Процедура УстановитьПризнакОбработкиВсемОставшимсяПутям(СтруктураДанныхПутей)
	Для Каждого ЭлементСтруктуры из СтруктураДанныхПутей цикл
		ЭлементСтруктуры.Значение.ОбходЗакончен=Истина;
		ЭлементСтруктуры.Значение.ПутьНайден=Истина;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьНаНовоеРазветвление(ПутьОбработки,НеСоздватьновыхПутейЗаПриделСкладскогоПомещения,СтруктураДанных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=СтруктураДанных.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ит_WMS_СвязиЯчеек.ЯчейкаПолучатель,
	|	ит_WMS_СвязиЯчеек.СтоимостьПерехода,
	|	ит_WMS_СвязиЯчеек.ЯчейкаОтправитель
	|ПОМЕСТИТЬ ВтДанныеПерехода
	|ИЗ
	|	РегистрСведений.ит_WMS_СвязиЯчеек КАК ит_WMS_СвязиЯчеек
	|ГДЕ
	|	ит_WMS_СвязиЯчеек.ЯчейкаОтправитель = &ЯчейкаОтправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеЯчеек.Ячейка,
	|	ВтДанныеЯчеек.СкладскоеПомещение,
	|	ВтДанныеЯчеек.Линия,
	|	ВтДанныеЯчеек.Стеллаж,
	|	ВтДанныеЯчеек.Ярус,
	|	ВтДанныеЯчеек.ЯчейкаОтсчета,
	|	ВтДанныеПерехода.СтоимостьПерехода,
	|	ВтДанныеЯчеек.НомерРядаПролета
	|ИЗ
	|	ВтДанныеПерехода КАК ВтДанныеПерехода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЯчеек КАК ВтДанныеЯчеек
	|		ПО ВтДанныеПерехода.ЯчейкаПолучатель = ВтДанныеЯчеек.Ячейка
	|			И (ВЫБОР
	|				КОГДА &НеСоздватьновыхПутейЗаПриделСкладскогоПомещения
	|					ТОГДА ВтДанныеПерехода.ЯчейкаОтправитель.СкладскоеПомещение = ВтДанныеЯчеек.СкладскоеПомещение
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеПерехода";
	
	Запрос.УстановитьПараметр("ЯчейкаОтправитель", ПутьОбработки.ЯчейкаОтсчета);
	Запрос.УстановитьПараметр("НеСоздватьновыхПутейЗаПриделСкладскогоПомещения",НеСоздватьновыхПутейЗаПриделСкладскогоПомещения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если СтруктураДанных.ПараметрыФоновогоЗадания.ВРазрезеОдногоПутиНеВозвращатьсяНаПройденныеЛинии Тогда 
			Если ПроверкаНаПройденностьЛинии(ПутьОбработки,ВыборкаДетальныеЗаписи.Линия,ВыборкаДетальныеЗаписи.СкладскоеПомещение) Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтруктураРассчетаВверх =СоздатьСтруктуруРассчета(ВыборкаДетальныеЗаписи);
		СтруктураРассчетаВверх.НачисленноеРасстояние=ВыборкаДетальныеЗаписи.СтоимостьПерехода+ПутьОбработки.НачисленноеРасстояние;
		СтруктураРассчетаВверх.МассивЯчеекПути=СкопироватьМассив(ПутьОбработки.МассивЯчеекПути);
		СтруктураРассчетаВверх.МассивПройденныхЛиний=СкопироватьМассив(ПутьОбработки.МассивПройденныхЛиний);
		
		
		СтруктураРассчетаВниз = СоздатьСтруктуруРассчета(ВыборкаДетальныеЗаписи);
		СтруктураРассчетаВниз.НачисленноеРасстояние=ВыборкаДетальныеЗаписи.СтоимостьПерехода+ПутьОбработки.НачисленноеРасстояние;
		СтруктураРассчетаВниз.МассивЯчеекПути=СкопироватьМассив(ПутьОбработки.МассивЯчеекПути);
		СтруктураРассчетаВниз.МассивПройденныхЛиний=СкопироватьМассив(ПутьОбработки.МассивПройденныхЛиний);
		
		
		СтруктураДанных.СтруктураДанныхПутей.Вставить("Путь"+Строка(СтруктураДанных.СчетчикПутей)+"ЛинияВверх",СтруктураРассчетаВверх);
		СтруктураДанных.СтруктураДанныхПутей.Вставить("Путь"+Строка(СтруктураДанных.СчетчикПутей)+"ЛинияВниз",СтруктураРассчетаВниз);
		СтруктураДанных.СчетчикПутей=СтруктураДанных.СчетчикПутей+1;
	КонецЦикла;
	
КонецПроцедуры


Функция СкопироватьМассив(МассикДляКопирования)
	НовыйМассив=новый Массив;
	Для Каждого стр из МассикДляКопирования цикл
		НовыйМассив.Добавить(стр);
	КонецЦикла;
	Возврат НовыйМассив;
КонецФункции
Функция НеЗаконченныйПуть(СтруктураДанных)
	Для Каждого ЭлементСтруктуры из СтруктураДанных цикл
		Если не ЭлементСтруктуры.Значение.ОбходЗакончен   Тогда 
			Возврат ЭлементСтруктуры.Ключ; 
		КонецЕсли;	
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Процедура ДанныеЯчеек(МенеджерВременныхТаблиц,ПараметрыФоновогоЗадания)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итСкладскиеЯчейки.Ссылка КАК Ячейка,
	|	итСкладскиеЯчейки.СкладскоеПомещение,
	|	ВЫБОР
	|		КОГДА итСкладскиеЯчейки.Линия = ""0""
	|			ТОГДА 0
	|		КОГДА итСкладскиеЯчейки.Линия = ""00""
	|			ТОГДА 0
	|		КОГДА итСкладскиеЯчейки.Линия = ""1""
	|			ТОГДА 1
	|		КОГДА итСкладскиеЯчейки.Линия = ""01""
	|			ТОГДА 1
	|		КОГДА итСкладскиеЯчейки.Линия = ""2""
	|			ТОГДА 2
	|		КОГДА итСкладскиеЯчейки.Линия = ""02""
	|			ТОГДА 2
	|		КОГДА итСкладскиеЯчейки.Линия = ""3""
	|			ТОГДА 3
	|		КОГДА итСкладскиеЯчейки.Линия = ""03""
	|			ТОГДА 3
	|		КОГДА итСкладскиеЯчейки.Линия = ""4""
	|			ТОГДА 4
	|		КОГДА итСкладскиеЯчейки.Линия = ""04""
	|			ТОГДА 4
	|		КОГДА итСкладскиеЯчейки.Линия = ""5""
	|			ТОГДА 5
	|		КОГДА итСкладскиеЯчейки.Линия = ""05""
	|			ТОГДА 5
	|		КОГДА итСкладскиеЯчейки.Линия = ""6""
	|			ТОГДА 6
	|		КОГДА итСкладскиеЯчейки.Линия = ""06""
	|			ТОГДА 6
	|		КОГДА итСкладскиеЯчейки.Линия = ""7""
	|			ТОГДА 7
	|		КОГДА итСкладскиеЯчейки.Линия = ""07""
	|			ТОГДА 7
	|		КОГДА итСкладскиеЯчейки.Линия = ""8""
	|			ТОГДА 8
	|		КОГДА итСкладскиеЯчейки.Линия = ""08""
	|			ТОГДА 8
	|		КОГДА итСкладскиеЯчейки.Линия = ""9""
	|			ТОГДА 9
	|		КОГДА итСкладскиеЯчейки.Линия = ""09""
	|			ТОГДА 9
	|		КОГДА итСкладскиеЯчейки.Линия = ""10""
	|			ТОГДА 10
	|		КОГДА итСкладскиеЯчейки.Линия = ""010""
	|			ТОГДА 10
	|		КОГДА итСкладскиеЯчейки.Линия = ""11""
	|			ТОГДА 11
	|		КОГДА итСкладскиеЯчейки.Линия = ""011""
	|			ТОГДА 11
	|		КОГДА итСкладскиеЯчейки.Линия = ""12""
	|			ТОГДА 12
	|		КОГДА итСкладскиеЯчейки.Линия = ""012""
	|			ТОГДА 12
	|		КОГДА итСкладскиеЯчейки.Линия = ""13""
	|			ТОГДА 13
	|		КОГДА итСкладскиеЯчейки.Линия = ""013""
	|			ТОГДА 13
	|		КОГДА итСкладскиеЯчейки.Линия = ""14""
	|			ТОГДА 14
	|		КОГДА итСкладскиеЯчейки.Линия = ""014""
	|			ТОГДА 14
	|		КОГДА итСкладскиеЯчейки.Линия = ""15""
	|			ТОГДА 15
	|		КОГДА итСкладскиеЯчейки.Линия = ""015""
	|			ТОГДА 15
	|		КОГДА итСкладскиеЯчейки.Линия = ""16""
	|			ТОГДА 16
	|		КОГДА итСкладскиеЯчейки.Линия = ""016""
	|			ТОГДА 16
	|		КОГДА итСкладскиеЯчейки.Линия = ""17""
	|			ТОГДА 17
	|		КОГДА итСкладскиеЯчейки.Линия = ""017""
	|			ТОГДА 17
	|		КОГДА итСкладскиеЯчейки.Линия = ""18""
	|			ТОГДА 18
	|		КОГДА итСкладскиеЯчейки.Линия = ""018""
	|			ТОГДА 18
	|		КОГДА итСкладскиеЯчейки.Линия = ""19""
	|			ТОГДА 19
	|		КОГДА итСкладскиеЯчейки.Линия = ""019""
	|			ТОГДА 19
	|		КОГДА итСкладскиеЯчейки.Линия = ""20""
	|			ТОГДА 20
	|		КОГДА итСкладскиеЯчейки.Линия = ""020""
	|			ТОГДА 20
	|		КОГДА итСкладскиеЯчейки.Линия = ""21""
	|			ТОГДА 21
	|		КОГДА итСкладскиеЯчейки.Линия = ""021""
	|			ТОГДА 21
	|		КОГДА итСкладскиеЯчейки.Линия = ""22""
	|			ТОГДА 22
	|		КОГДА итСкладскиеЯчейки.Линия = ""022""
	|			ТОГДА 22
	|		КОГДА итСкладскиеЯчейки.Линия = ""23""
	|			ТОГДА 23
	|		КОГДА итСкладскиеЯчейки.Линия = ""023""
	|			ТОГДА 23
	|		КОГДА итСкладскиеЯчейки.Линия = ""24""
	|			ТОГДА 24
	|		КОГДА итСкладскиеЯчейки.Линия = ""024""
	|			ТОГДА 24
	|		КОГДА итСкладскиеЯчейки.Линия = ""25""
	|			ТОГДА 25
	|		КОГДА итСкладскиеЯчейки.Линия = ""025""
	|			ТОГДА 25
	|		КОГДА итСкладскиеЯчейки.Линия = ""26""
	|			ТОГДА 26
	|		КОГДА итСкладскиеЯчейки.Линия = ""026""
	|			ТОГДА 26
	|		КОГДА итСкладскиеЯчейки.Линия = ""27""
	|			ТОГДА 27
	|		КОГДА итСкладскиеЯчейки.Линия = ""027""
	|			ТОГДА 27
	|		КОГДА итСкладскиеЯчейки.Линия = ""28""
	|			ТОГДА 28
	|		КОГДА итСкладскиеЯчейки.Линия = ""028""
	|			ТОГДА 28
	|		КОГДА итСкладскиеЯчейки.Линия = ""29""
	|			ТОГДА 29
	|		КОГДА итСкладскиеЯчейки.Линия = ""029""
	|			ТОГДА 29
	|		КОГДА итСкладскиеЯчейки.Линия = ""30""
	|			ТОГДА 30
	|		КОГДА итСкладскиеЯчейки.Линия = ""030""
	|			ТОГДА 30
	|		КОГДА итСкладскиеЯчейки.Линия = ""31""
	|			ТОГДА 31
	|		КОГДА итСкладскиеЯчейки.Линия = ""031""
	|			ТОГДА 31
	|		КОГДА итСкладскиеЯчейки.Линия = ""32""
	|			ТОГДА 32
	|		КОГДА итСкладскиеЯчейки.Линия = ""032""
	|			ТОГДА 32
	|		КОГДА итСкладскиеЯчейки.Линия = ""33""
	|			ТОГДА 33
	|		КОГДА итСкладскиеЯчейки.Линия = ""033""
	|			ТОГДА 33
	|		КОГДА итСкладскиеЯчейки.Линия = ""34""
	|			ТОГДА 34
	|		КОГДА итСкладскиеЯчейки.Линия = ""034""
	|			ТОГДА 34
	|		КОГДА итСкладскиеЯчейки.Линия = ""35""
	|			ТОГДА 35
	|		КОГДА итСкладскиеЯчейки.Линия = ""035""
	|			ТОГДА 35
	|		КОГДА итСкладскиеЯчейки.Линия = ""36""
	|			ТОГДА 36
	|		КОГДА итСкладскиеЯчейки.Линия = ""036""
	|			ТОГДА 36
	|		КОГДА итСкладскиеЯчейки.Линия = ""37""
	|			ТОГДА 37
	|		КОГДА итСкладскиеЯчейки.Линия = ""037""
	|			ТОГДА 37
	|		КОГДА итСкладскиеЯчейки.Линия = ""38""
	|			ТОГДА 38
	|		КОГДА итСкладскиеЯчейки.Линия = ""038""
	|			ТОГДА 38
	|		КОГДА итСкладскиеЯчейки.Линия = ""39""
	|			ТОГДА 39
	|		КОГДА итСкладскиеЯчейки.Линия = ""039""
	|			ТОГДА 39
	|		КОГДА итСкладскиеЯчейки.Линия = ""40""
	|			ТОГДА 40
	|		КОГДА итСкладскиеЯчейки.Линия = ""040""
	|			ТОГДА 40
	|		КОГДА итСкладскиеЯчейки.Линия = ""41""
	|			ТОГДА 41
	|		КОГДА итСкладскиеЯчейки.Линия = ""041""
	|			ТОГДА 41
	|		КОГДА итСкладскиеЯчейки.Линия = ""42""
	|			ТОГДА 42
	|		КОГДА итСкладскиеЯчейки.Линия = ""042""
	|			ТОГДА 42
	|		КОГДА итСкладскиеЯчейки.Линия = ""43""
	|			ТОГДА 43
	|		КОГДА итСкладскиеЯчейки.Линия = ""043""
	|			ТОГДА 43
	|		КОГДА итСкладскиеЯчейки.Линия = ""44""
	|			ТОГДА 44
	|		КОГДА итСкладскиеЯчейки.Линия = ""044""
	|			ТОГДА 44
	|		КОГДА итСкладскиеЯчейки.Линия = ""45""
	|			ТОГДА 45
	|		КОГДА итСкладскиеЯчейки.Линия = ""045""
	|			ТОГДА 45
	|		КОГДА итСкладскиеЯчейки.Линия = ""46""
	|			ТОГДА 46
	|		КОГДА итСкладскиеЯчейки.Линия = ""046""
	|			ТОГДА 46
	|		КОГДА итСкладскиеЯчейки.Линия = ""47""
	|			ТОГДА 47
	|		КОГДА итСкладскиеЯчейки.Линия = ""047""
	|			ТОГДА 47
	|		КОГДА итСкладскиеЯчейки.Линия = ""48""
	|			ТОГДА 48
	|		КОГДА итСкладскиеЯчейки.Линия = ""048""
	|			ТОГДА 48
	|		КОГДА итСкладскиеЯчейки.Линия = ""49""
	|			ТОГДА 49
	|		КОГДА итСкладскиеЯчейки.Линия = ""049""
	|			ТОГДА 49
	|		КОГДА итСкладскиеЯчейки.Линия = ""50""
	|			ТОГДА 50
	|		КОГДА итСкладскиеЯчейки.Линия = ""050""
	|			ТОГДА 50
	|		КОГДА итСкладскиеЯчейки.Линия = ""51""
	|			ТОГДА 51
	|		КОГДА итСкладскиеЯчейки.Линия = ""051""
	|			ТОГДА 51
	|		КОГДА итСкладскиеЯчейки.Линия = ""52""
	|			ТОГДА 52
	|		КОГДА итСкладскиеЯчейки.Линия = ""052""
	|			ТОГДА 52
	|		КОГДА итСкладскиеЯчейки.Линия = ""53""
	|			ТОГДА 53
	|		КОГДА итСкладскиеЯчейки.Линия = ""053""
	|			ТОГДА 53
	|		КОГДА итСкладскиеЯчейки.Линия = ""54""
	|			ТОГДА 54
	|		КОГДА итСкладскиеЯчейки.Линия = ""054""
	|			ТОГДА 54
	|		КОГДА итСкладскиеЯчейки.Линия = ""55""
	|			ТОГДА 55
	|		КОГДА итСкладскиеЯчейки.Линия = ""055""
	|			ТОГДА 55
	|		КОГДА итСкладскиеЯчейки.Линия = ""56""
	|			ТОГДА 56
	|		КОГДА итСкладскиеЯчейки.Линия = ""056""
	|			ТОГДА 56
	|		КОГДА итСкладскиеЯчейки.Линия = ""57""
	|			ТОГДА 57
	|		КОГДА итСкладскиеЯчейки.Линия = ""057""
	|			ТОГДА 57
	|		КОГДА итСкладскиеЯчейки.Линия = ""58""
	|			ТОГДА 58
	|		КОГДА итСкладскиеЯчейки.Линия = ""058""
	|			ТОГДА 58
	|		КОГДА итСкладскиеЯчейки.Линия = ""59""
	|			ТОГДА 59
	|		КОГДА итСкладскиеЯчейки.Линия = ""059""
	|			ТОГДА 59
	|		КОГДА итСкладскиеЯчейки.Линия = ""60""
	|			ТОГДА 60
	|		КОГДА итСкладскиеЯчейки.Линия = ""060""
	|			ТОГДА 60
	|		КОГДА итСкладскиеЯчейки.Линия = ""61""
	|			ТОГДА 61
	|		КОГДА итСкладскиеЯчейки.Линия = ""061""
	|			ТОГДА 61
	|		КОГДА итСкладскиеЯчейки.Линия = ""62""
	|			ТОГДА 62
	|		КОГДА итСкладскиеЯчейки.Линия = ""062""
	|			ТОГДА 62
	|		КОГДА итСкладскиеЯчейки.Линия = ""63""
	|			ТОГДА 63
	|		КОГДА итСкладскиеЯчейки.Линия = ""063""
	|			ТОГДА 63
	|		КОГДА итСкладскиеЯчейки.Линия = ""64""
	|			ТОГДА 64
	|		КОГДА итСкладскиеЯчейки.Линия = ""064""
	|			ТОГДА 64
	|		КОГДА итСкладскиеЯчейки.Линия = ""65""
	|			ТОГДА 65
	|		КОГДА итСкладскиеЯчейки.Линия = ""065""
	|			ТОГДА 65
	|		КОГДА итСкладскиеЯчейки.Линия = ""66""
	|			ТОГДА 66
	|		КОГДА итСкладскиеЯчейки.Линия = ""066""
	|			ТОГДА 66
	|		КОГДА итСкладскиеЯчейки.Линия = ""67""
	|			ТОГДА 67
	|		КОГДА итСкладскиеЯчейки.Линия = ""067""
	|			ТОГДА 67
	|		КОГДА итСкладскиеЯчейки.Линия = ""68""
	|			ТОГДА 68
	|		КОГДА итСкладскиеЯчейки.Линия = ""068""
	|			ТОГДА 68
	|		КОГДА итСкладскиеЯчейки.Линия = ""69""
	|			ТОГДА 69
	|		КОГДА итСкладскиеЯчейки.Линия = ""069""
	|			ТОГДА 69
	|		КОГДА итСкладскиеЯчейки.Линия = ""70""
	|			ТОГДА 70
	|		КОГДА итСкладскиеЯчейки.Линия = ""070""
	|			ТОГДА 70
	|		КОГДА итСкладскиеЯчейки.Линия = ""71""
	|			ТОГДА 71
	|		КОГДА итСкладскиеЯчейки.Линия = ""071""
	|			ТОГДА 71
	|		КОГДА итСкладскиеЯчейки.Линия = ""72""
	|			ТОГДА 72
	|		КОГДА итСкладскиеЯчейки.Линия = ""072""
	|			ТОГДА 72
	|		КОГДА итСкладскиеЯчейки.Линия = ""73""
	|			ТОГДА 73
	|		КОГДА итСкладскиеЯчейки.Линия = ""073""
	|			ТОГДА 73
	|		КОГДА итСкладскиеЯчейки.Линия = ""74""
	|			ТОГДА 74
	|		КОГДА итСкладскиеЯчейки.Линия = ""074""
	|			ТОГДА 74
	|		КОГДА итСкладскиеЯчейки.Линия = ""75""
	|			ТОГДА 75
	|		КОГДА итСкладскиеЯчейки.Линия = ""075""
	|			ТОГДА 75
	|		КОГДА итСкладскиеЯчейки.Линия = ""76""
	|			ТОГДА 76
	|		КОГДА итСкладскиеЯчейки.Линия = ""076""
	|			ТОГДА 76
	|		КОГДА итСкладскиеЯчейки.Линия = ""77""
	|			ТОГДА 77
	|		КОГДА итСкладскиеЯчейки.Линия = ""077""
	|			ТОГДА 77
	|		КОГДА итСкладскиеЯчейки.Линия = ""78""
	|			ТОГДА 78
	|		КОГДА итСкладскиеЯчейки.Линия = ""078""
	|			ТОГДА 78
	|		КОГДА итСкладскиеЯчейки.Линия = ""79""
	|			ТОГДА 79
	|		КОГДА итСкладскиеЯчейки.Линия = ""079""
	|			ТОГДА 79
	|		КОГДА итСкладскиеЯчейки.Линия = ""80""
	|			ТОГДА 80
	|		КОГДА итСкладскиеЯчейки.Линия = ""080""
	|			ТОГДА 80
	|		КОГДА итСкладскиеЯчейки.Линия = ""81""
	|			ТОГДА 81
	|		КОГДА итСкладскиеЯчейки.Линия = ""081""
	|			ТОГДА 81
	|		КОГДА итСкладскиеЯчейки.Линия = ""82""
	|			ТОГДА 82
	|		КОГДА итСкладскиеЯчейки.Линия = ""082""
	|			ТОГДА 82
	|		КОГДА итСкладскиеЯчейки.Линия = ""83""
	|			ТОГДА 83
	|		КОГДА итСкладскиеЯчейки.Линия = ""083""
	|			ТОГДА 83
	|		КОГДА итСкладскиеЯчейки.Линия = ""84""
	|			ТОГДА 84
	|		КОГДА итСкладскиеЯчейки.Линия = ""084""
	|			ТОГДА 84
	|		КОГДА итСкладскиеЯчейки.Линия = ""85""
	|			ТОГДА 85
	|		КОГДА итСкладскиеЯчейки.Линия = ""085""
	|			ТОГДА 85
	|		КОГДА итСкладскиеЯчейки.Линия = ""86""
	|			ТОГДА 86
	|		КОГДА итСкладскиеЯчейки.Линия = ""086""
	|			ТОГДА 86
	|		КОГДА итСкладскиеЯчейки.Линия = ""87""
	|			ТОГДА 87
	|		КОГДА итСкладскиеЯчейки.Линия = ""087""
	|			ТОГДА 87
	|		КОГДА итСкладскиеЯчейки.Линия = ""88""
	|			ТОГДА 88
	|		КОГДА итСкладскиеЯчейки.Линия = ""088""
	|			ТОГДА 88
	|		КОГДА итСкладскиеЯчейки.Линия = ""89""
	|			ТОГДА 89
	|		КОГДА итСкладскиеЯчейки.Линия = ""089""
	|			ТОГДА 89
	|		КОГДА итСкладскиеЯчейки.Линия = ""90""
	|			ТОГДА 90
	|		КОГДА итСкладскиеЯчейки.Линия = ""090""
	|			ТОГДА 90
	|		КОГДА итСкладскиеЯчейки.Линия = ""91""
	|			ТОГДА 91
	|		КОГДА итСкладскиеЯчейки.Линия = ""091""
	|			ТОГДА 91
	|		КОГДА итСкладскиеЯчейки.Линия = ""92""
	|			ТОГДА 92
	|		КОГДА итСкладскиеЯчейки.Линия = ""092""
	|			ТОГДА 92
	|		КОГДА итСкладскиеЯчейки.Линия = ""93""
	|			ТОГДА 93
	|		КОГДА итСкладскиеЯчейки.Линия = ""093""
	|			ТОГДА 93
	|		КОГДА итСкладскиеЯчейки.Линия = ""94""
	|			ТОГДА 94
	|		КОГДА итСкладскиеЯчейки.Линия = ""094""
	|			ТОГДА 94
	|		КОГДА итСкладскиеЯчейки.Линия = ""95""
	|			ТОГДА 95
	|		КОГДА итСкладскиеЯчейки.Линия = ""095""
	|			ТОГДА 95
	|		КОГДА итСкладскиеЯчейки.Линия = ""96""
	|			ТОГДА 96
	|		КОГДА итСкладскиеЯчейки.Линия = ""096""
	|			ТОГДА 96
	|		КОГДА итСкладскиеЯчейки.Линия = ""97""
	|			ТОГДА 97
	|		КОГДА итСкладскиеЯчейки.Линия = ""097""
	|			ТОГДА 97
	|		КОГДА итСкладскиеЯчейки.Линия = ""98""
	|			ТОГДА 98
	|		КОГДА итСкладскиеЯчейки.Линия = ""098""
	|			ТОГДА 98
	|		КОГДА итСкладскиеЯчейки.Линия = ""99""
	|			ТОГДА 99
	|		КОГДА итСкладскиеЯчейки.Линия = ""099""
	|			ТОГДА 99
	|		КОГДА итСкладскиеЯчейки.Линия = ""100""
	|			ТОГДА 100
	|		КОГДА итСкладскиеЯчейки.Линия = ""0100""
	|			ТОГДА 100
	|	КОНЕЦ КАК Линия,
	|	ВЫБОР
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""0""
	|			ТОГДА 0
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""00""
	|			ТОГДА 0
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""1""
	|			ТОГДА 1
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""01""
	|			ТОГДА 1
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""2""
	|			ТОГДА 2
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""02""
	|			ТОГДА 2
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""3""
	|			ТОГДА 3
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""03""
	|			ТОГДА 3
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""4""
	|			ТОГДА 4
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""04""
	|			ТОГДА 4
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""5""
	|			ТОГДА 5
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""05""
	|			ТОГДА 5
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""6""
	|			ТОГДА 6
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""06""
	|			ТОГДА 6
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""7""
	|			ТОГДА 7
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""07""
	|			ТОГДА 7
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""8""
	|			ТОГДА 8
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""08""
	|			ТОГДА 8
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""9""
	|			ТОГДА 9
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""09""
	|			ТОГДА 9
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""10""
	|			ТОГДА 10
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""010""
	|			ТОГДА 10
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""11""
	|			ТОГДА 11
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""011""
	|			ТОГДА 11
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""12""
	|			ТОГДА 12
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""012""
	|			ТОГДА 12
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""13""
	|			ТОГДА 13
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""013""
	|			ТОГДА 13
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""14""
	|			ТОГДА 14
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""014""
	|			ТОГДА 14
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""15""
	|			ТОГДА 15
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""015""
	|			ТОГДА 15
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""16""
	|			ТОГДА 16
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""016""
	|			ТОГДА 16
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""17""
	|			ТОГДА 17
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""017""
	|			ТОГДА 17
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""18""
	|			ТОГДА 18
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""018""
	|			ТОГДА 18
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""19""
	|			ТОГДА 19
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""019""
	|			ТОГДА 19
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""20""
	|			ТОГДА 20
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""020""
	|			ТОГДА 20
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""21""
	|			ТОГДА 21
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""021""
	|			ТОГДА 21
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""22""
	|			ТОГДА 22
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""022""
	|			ТОГДА 22
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""23""
	|			ТОГДА 23
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""023""
	|			ТОГДА 23
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""24""
	|			ТОГДА 24
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""024""
	|			ТОГДА 24
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""25""
	|			ТОГДА 25
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""025""
	|			ТОГДА 25
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""26""
	|			ТОГДА 26
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""026""
	|			ТОГДА 26
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""27""
	|			ТОГДА 27
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""027""
	|			ТОГДА 27
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""28""
	|			ТОГДА 28
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""028""
	|			ТОГДА 28
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""29""
	|			ТОГДА 29
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""029""
	|			ТОГДА 29
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""30""
	|			ТОГДА 30
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""030""
	|			ТОГДА 30
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""31""
	|			ТОГДА 31
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""031""
	|			ТОГДА 31
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""32""
	|			ТОГДА 32
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""032""
	|			ТОГДА 32
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""33""
	|			ТОГДА 33
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""033""
	|			ТОГДА 33
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""34""
	|			ТОГДА 34
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""034""
	|			ТОГДА 34
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""35""
	|			ТОГДА 35
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""035""
	|			ТОГДА 35
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""36""
	|			ТОГДА 36
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""036""
	|			ТОГДА 36
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""37""
	|			ТОГДА 37
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""037""
	|			ТОГДА 37
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""38""
	|			ТОГДА 38
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""038""
	|			ТОГДА 38
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""39""
	|			ТОГДА 39
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""039""
	|			ТОГДА 39
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""40""
	|			ТОГДА 40
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""040""
	|			ТОГДА 40
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""41""
	|			ТОГДА 41
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""041""
	|			ТОГДА 41
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""42""
	|			ТОГДА 42
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""042""
	|			ТОГДА 42
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""43""
	|			ТОГДА 43
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""043""
	|			ТОГДА 43
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""44""
	|			ТОГДА 44
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""044""
	|			ТОГДА 44
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""45""
	|			ТОГДА 45
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""045""
	|			ТОГДА 45
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""46""
	|			ТОГДА 46
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""046""
	|			ТОГДА 46
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""47""
	|			ТОГДА 47
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""047""
	|			ТОГДА 47
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""48""
	|			ТОГДА 48
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""048""
	|			ТОГДА 48
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""49""
	|			ТОГДА 49
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""049""
	|			ТОГДА 49
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""50""
	|			ТОГДА 50
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""050""
	|			ТОГДА 50
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""51""
	|			ТОГДА 51
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""051""
	|			ТОГДА 51
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""52""
	|			ТОГДА 52
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""052""
	|			ТОГДА 52
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""53""
	|			ТОГДА 53
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""053""
	|			ТОГДА 53
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""54""
	|			ТОГДА 54
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""054""
	|			ТОГДА 54
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""55""
	|			ТОГДА 55
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""055""
	|			ТОГДА 55
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""56""
	|			ТОГДА 56
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""056""
	|			ТОГДА 56
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""57""
	|			ТОГДА 57
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""057""
	|			ТОГДА 57
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""58""
	|			ТОГДА 58
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""058""
	|			ТОГДА 58
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""59""
	|			ТОГДА 59
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""059""
	|			ТОГДА 59
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""60""
	|			ТОГДА 60
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""060""
	|			ТОГДА 60
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""61""
	|			ТОГДА 61
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""061""
	|			ТОГДА 61
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""62""
	|			ТОГДА 62
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""062""
	|			ТОГДА 62
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""63""
	|			ТОГДА 63
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""063""
	|			ТОГДА 63
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""64""
	|			ТОГДА 64
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""064""
	|			ТОГДА 64
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""65""
	|			ТОГДА 65
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""065""
	|			ТОГДА 65
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""66""
	|			ТОГДА 66
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""066""
	|			ТОГДА 66
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""67""
	|			ТОГДА 67
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""067""
	|			ТОГДА 67
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""68""
	|			ТОГДА 68
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""068""
	|			ТОГДА 68
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""69""
	|			ТОГДА 69
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""069""
	|			ТОГДА 69
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""70""
	|			ТОГДА 70
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""070""
	|			ТОГДА 70
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""71""
	|			ТОГДА 71
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""071""
	|			ТОГДА 71
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""72""
	|			ТОГДА 72
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""072""
	|			ТОГДА 72
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""73""
	|			ТОГДА 73
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""073""
	|			ТОГДА 73
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""74""
	|			ТОГДА 74
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""074""
	|			ТОГДА 74
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""75""
	|			ТОГДА 75
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""075""
	|			ТОГДА 75
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""76""
	|			ТОГДА 76
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""076""
	|			ТОГДА 76
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""77""
	|			ТОГДА 77
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""077""
	|			ТОГДА 77
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""78""
	|			ТОГДА 78
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""078""
	|			ТОГДА 78
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""79""
	|			ТОГДА 79
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""079""
	|			ТОГДА 79
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""80""
	|			ТОГДА 80
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""080""
	|			ТОГДА 80
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""81""
	|			ТОГДА 81
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""081""
	|			ТОГДА 81
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""82""
	|			ТОГДА 82
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""082""
	|			ТОГДА 82
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""83""
	|			ТОГДА 83
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""083""
	|			ТОГДА 83
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""84""
	|			ТОГДА 84
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""084""
	|			ТОГДА 84
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""85""
	|			ТОГДА 85
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""085""
	|			ТОГДА 85
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""86""
	|			ТОГДА 86
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""086""
	|			ТОГДА 86
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""87""
	|			ТОГДА 87
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""087""
	|			ТОГДА 87
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""88""
	|			ТОГДА 88
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""088""
	|			ТОГДА 88
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""89""
	|			ТОГДА 89
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""089""
	|			ТОГДА 89
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""90""
	|			ТОГДА 90
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""090""
	|			ТОГДА 90
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""91""
	|			ТОГДА 91
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""091""
	|			ТОГДА 91
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""92""
	|			ТОГДА 92
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""092""
	|			ТОГДА 92
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""93""
	|			ТОГДА 93
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""093""
	|			ТОГДА 93
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""94""
	|			ТОГДА 94
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""094""
	|			ТОГДА 94
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""95""
	|			ТОГДА 95
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""095""
	|			ТОГДА 95
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""96""
	|			ТОГДА 96
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""096""
	|			ТОГДА 96
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""97""
	|			ТОГДА 97
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""097""
	|			ТОГДА 97
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""98""
	|			ТОГДА 98
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""098""
	|			ТОГДА 98
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""99""
	|			ТОГДА 99
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""099""
	|			ТОГДА 99
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""100""
	|			ТОГДА 100
	|		КОГДА итСкладскиеЯчейки.Стеллаж = ""0100""
	|			ТОГДА 100
	|	КОНЕЦ КАК Стеллаж,
	|	ВЫБОР
	|		КОГДА итСкладскиеЯчейки.Ярус = ""0""
	|			ТОГДА 0
	|		КОГДА итСкладскиеЯчейки.Ярус = ""00""
	|			ТОГДА 0
	|		КОГДА итСкладскиеЯчейки.Ярус = ""1""
	|			ТОГДА 1
	|		КОГДА итСкладскиеЯчейки.Ярус = ""01""
	|			ТОГДА 1
	|		КОГДА итСкладскиеЯчейки.Ярус = ""2""
	|			ТОГДА 2
	|		КОГДА итСкладскиеЯчейки.Ярус = ""02""
	|			ТОГДА 2
	|		КОГДА итСкладскиеЯчейки.Ярус = ""3""
	|			ТОГДА 3
	|		КОГДА итСкладскиеЯчейки.Ярус = ""03""
	|			ТОГДА 3
	|		КОГДА итСкладскиеЯчейки.Ярус = ""4""
	|			ТОГДА 4
	|		КОГДА итСкладскиеЯчейки.Ярус = ""04""
	|			ТОГДА 4
	|		КОГДА итСкладскиеЯчейки.Ярус = ""5""
	|			ТОГДА 5
	|		КОГДА итСкладскиеЯчейки.Ярус = ""05""
	|			ТОГДА 5
	|		КОГДА итСкладскиеЯчейки.Ярус = ""6""
	|			ТОГДА 6
	|		КОГДА итСкладскиеЯчейки.Ярус = ""06""
	|			ТОГДА 6
	|		КОГДА итСкладскиеЯчейки.Ярус = ""7""
	|			ТОГДА 7
	|		КОГДА итСкладскиеЯчейки.Ярус = ""07""
	|			ТОГДА 7
	|		КОГДА итСкладскиеЯчейки.Ярус = ""8""
	|			ТОГДА 8
	|		КОГДА итСкладскиеЯчейки.Ярус = ""08""
	|			ТОГДА 8
	|		КОГДА итСкладскиеЯчейки.Ярус = ""9""
	|			ТОГДА 9
	|		КОГДА итСкладскиеЯчейки.Ярус = ""09""
	|			ТОГДА 9
	|		КОГДА итСкладскиеЯчейки.Ярус = ""10""
	|			ТОГДА 10
	|		КОГДА итСкладскиеЯчейки.Ярус = ""010""
	|			ТОГДА 10
	|	КОНЕЦ КАК Ярус
	|ПОМЕСТИТЬ ВтДанныеЯчеек
	|ИЗ
	|	Справочник.итСкладскиеЯчейки КАК итСкладскиеЯчейки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОграниченияПоСлкадскимПомещениям
	|				ТОГДА итСкладскиеЯчейки.СкладскоеПомещение В (&СкладскоеПомещения)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ итСкладскиеЯчейки.ЭтоГруппа
	|	И НЕ итСкладскиеЯчейки.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеЯчеек.Ячейка КАК Ячейка,
	|	ВтДанныеЯчеек.СкладскоеПомещение,
	|	ВтДанныеЯчеек.Линия,
	|	ВтДанныеЯчеек.Стеллаж,
	|	ВтДанныеЯчеек.Ярус,
	|	ВтДанныеЯчеек.Ячейка.НомерРяда_Пролета КАК НомерРядаПролета,
	|	МИНИМУМ(ВтДанныеЯчеек1.Ярус) КАК ЯрусДляПолученияДанных
	|ПОМЕСТИТЬ ДанныеЯчеекПодготовка
	|ИЗ
	|	ВтДанныеЯчеек КАК ВтДанныеЯчеек
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеЯчеек КАК ВтДанныеЯчеек1
	|		ПО ВтДанныеЯчеек.СкладскоеПомещение = ВтДанныеЯчеек1.СкладскоеПомещение
	|			И ВтДанныеЯчеек.Линия = ВтДанныеЯчеек1.Линия
	|			И ВтДанныеЯчеек.Стеллаж = ВтДанныеЯчеек1.Стеллаж
	|			И (ВтДанныеЯчеек1.Ярус = 1
	|				ИЛИ ВтДанныеЯчеек1.Ярус = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеЯчеек.Ячейка,
	|	ВтДанныеЯчеек.СкладскоеПомещение,
	|	ВтДанныеЯчеек.Линия,
	|	ВтДанныеЯчеек.Стеллаж,
	|	ВтДанныеЯчеек.Ярус,
	|	ВтДанныеЯчеек.Ячейка.НомерРяда_Пролета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЯчеекПодготовка.Ячейка,
	|	ДанныеЯчеекПодготовка.СкладскоеПомещение,
	|	ДанныеЯчеекПодготовка.Линия,
	|	ДанныеЯчеекПодготовка.Стеллаж,
	|	ДанныеЯчеекПодготовка.Ярус,
	|	ДанныеЯчеекПодготовка.НомерРядаПролета,
	|	МАКСИМУМ(ЕСТЬNULL(ВтДанныеЯчеек1.Ячейка, ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяСсылка))) КАК ЯчейкаОтсчета
	|ПОМЕСТИТЬ ДанныеЯчеек
	|ИЗ
	|	ДанныеЯчеекПодготовка КАК ДанныеЯчеекПодготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеЯчеек КАК ВтДанныеЯчеек1
	|		ПО ДанныеЯчеекПодготовка.СкладскоеПомещение = ВтДанныеЯчеек1.СкладскоеПомещение
	|			И ДанныеЯчеекПодготовка.Линия = ВтДанныеЯчеек1.Линия
	|			И ДанныеЯчеекПодготовка.Стеллаж = ВтДанныеЯчеек1.Стеллаж
	|			И ДанныеЯчеекПодготовка.ЯрусДляПолученияДанных = ВтДанныеЯчеек1.Ярус
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЯчеекПодготовка.Ячейка,
	|	ДанныеЯчеекПодготовка.СкладскоеПомещение,
	|	ДанныеЯчеекПодготовка.Линия,
	|	ДанныеЯчеекПодготовка.Стеллаж,
	|	ДанныеЯчеекПодготовка.Ярус,
	|	ДанныеЯчеекПодготовка.НомерРядаПролета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеЯчеекПодготовка";
	
	Запрос.УстановитьПараметр("СкладскоеПомещения",ПараметрыФоновогоЗадания.ОграниченияПоСлкадскимПомещениям.ВыгрузитьКолонку("СкладскоеПомещение"));
	Запрос.УстановитьПараметр("ОграниченияПоСлкадскимПомещениям",ПараметрыФоновогоЗадания.ОграничиватьПоСкладскимПомещениям);
	
	Запрос.Выполнить();
	
КонецПроцедуры
#КонецОбласти


#Область АнализТоварыВПути
Процедура ит_WMS_АнализТоваровВПути() Экспорт
	Настройки=ХранилищеОбщихНастроек.Загрузить("итWMSТоварыВпутиНастройки","итWMSТоварыВпутиНастройки",,"итWMSТоварыВпутиНастройки");
	Если ТипЗнч(Настройки)<>Тип("Структура") Тогда 
		Возврат
	КонецЕсли;	
	ПоискНовыхДокументовИзмененияСтарых(Настройки);
	ИзменениеСтатусаДокументов(Настройки);
	
КонецПроцедуры
Процедура ИзменениеСтатусаДокументов(Настройки)
	ТекущийДень=КонецДня(ТекущаяДата());
	ДатаНачала=НачалоДня(ТекущийДень-(Настройки.КоличествоДнейАнализируемойИнформации*24*60*60));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ит_WMS_ТоварыВПути.Ссылка,
	|	ит_WMS_ТоварыВПути.ДокументПоступления,
	|	ит_WMS_ТоварыВПути.ДокументПриемки,
	|	ит_WMS_ТоварыВПути.СтатусДокумента,
	|	ит_WMS_ТоварыВПути.ГУИД_Входящего
	|ПОМЕСТИТЬ ВтДанныеТоваровВПути
	|ИЗ
	|	Документ.ит_WMS_ТоварыВПути КАК ит_WMS_ТоварыВПути
	|ГДЕ
	|	ит_WMS_ТоварыВПути.ДатаВходящего МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ит_WMS_ТоварыВПути.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеТоваровВПути.ДокументПоступления,
	|	ВтДанныеТоваровВПути.ДокументПриемки,
	|	ВтДанныеТоваровВПути.Ссылка,
	|	ВтДанныеТоваровВПути.СтатусДокумента,
	|	ВтДанныеТоваровВПути.ГУИД_Входящего
	|ПОМЕСТИТЬ ВТДанные
	|ИЗ
	|	ВтДанныеТоваровВПути КАК ВтДанныеТоваровВПути
	|ГДЕ
	|	ВтДанныеТоваровВПути.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ит_WMS_СтатусыТоваровВПути.ВПути)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.ДокументПоступления,
	|	ВТДанные.ДокументПриемки,
	|	ВТДанные.Ссылка КАК Ссылка,
	|	ВТДанные.СтатусДокумента,
	|	ВТДанные.ГУИД_Входящего,
	|	МАКСИМУМ(ЕСТЬNULL(ПоступлениеТоваровУслуг.Ссылка, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяССылка))) КАК ПТУ,
	|	МАКСИМУМ(ЕСТЬNULL(итWMSПриемка.Ссылка, ЗНАЧЕНИЕ(Документ.итWMSПриемка.ПустаяСсылка))) КАК ПриемкаПоГуиду
	|ПОМЕСТИТЬ ВтДанныеТоваровВПутиСПриемкойиПТУ
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ВТДанные.ГУИД_Входящего = ПоступлениеТоваровУслуг.ит_WMS_ГУИД_ДокументаТранизата
	|			И (ПоступлениеТоваровУслуг.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.итWMSПриемка КАК итWMSПриемка
	|		ПО ВТДанные.ГУИД_Входящего = итWMSПриемка.ГУИД_ДокументаТранизата
	|			И (итWMSПриемка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанные.ДокументПоступления,
	|	ВТДанные.ДокументПриемки,
	|	ВТДанные.Ссылка,
	|	ВТДанные.СтатусДокумента,
	|	ВТДанные.ГУИД_Входящего
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеТоваровВПутиСПриемкойиПТУ.ПриемкаПоГуиду,
	|	ВтДанныеТоваровВПутиСПриемкойиПТУ.ПТУ,
	|	ВтДанныеТоваровВПутиСПриемкойиПТУ.Ссылка
	|ИЗ
	|	ВтДанныеТоваровВПутиСПриемкойиПТУ КАК ВтДанныеТоваровВПутиСПриемкойиПТУ
	|ГДЕ
	|	(ВтДанныеТоваровВПутиСПриемкойиПТУ.ДокументПриемки <> ВтДанныеТоваровВПутиСПриемкойиПТУ.ПриемкаПоГуиду
	|			ИЛИ ВтДанныеТоваровВПутиСПриемкойиПТУ.ДокументПоступления <> ВтДанныеТоваровВПутиСПриемкойиПТУ.ПТУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеТоваровВПути.Ссылка
	|ИЗ
	|	ВтДанныеТоваровВПути КАК ВтДанныеТоваровВПути
	|ГДЕ
	|	НЕ ВтДанныеТоваровВПути.ДокументПоступления.Проведен
	|	И ВтДанныеТоваровВПути.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ит_WMS_СтатусыТоваровВПути.Принят)";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ТекущийДень);
	
	
	МассивРезультатов= Запрос.ВыполнитьПакет();
	РезультатЗапроса=МассивРезультатов[3];
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектДокумента=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектДокумента.ДокументПоступления=ВыборкаДетальныеЗаписи.ПТУ;
		ОбъектДокумента.ДокументПриемки=ВыборкаДетальныеЗаписи.ПриемкаПоГуиду;
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	РезультатЗапроса2=МассивРезультатов[4];
	ВыборкаДетальныеЗаписи = РезультатЗапроса2.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектДокумента=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПоискНовыхДокументовИзмененияСтарых(Настройки)
	ТекущийДень=КонецДня(ТекущаяДата());
	ДатаНачала=НачалоДня(ТекущийДень-(Настройки.КоличествоДнейАнализируемойИнформации*24*60*60));
	МассивФилиалов=Настройки.ЗагружаемыеФилиалы.ВыгрузитьКолонку("Филиал");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Филиалы.Филиал,
	|	Филиалы.КонтрагентОрганизация
	|ПОМЕСТИТЬ ВтФилиалы
	|ИЗ
	|	&Филиалы КАК Филиалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMS_ДанныеДокументов.Документ,
	|	итWMS_ДанныеДокументов.ДанныеДокумента,
	|	итWMS_ДанныеДокументов.Дата,
	|	итWMS_ДанныеДокументов.Номер,
	|	итWMS_ДанныеДокументов.ВерсияДанных,
	|	итWMS_ДанныеДокументов.Филиал,
	|	ВтФилиалы.КонтрагентОрганизация,
	|	итWMS_ДанныеДокументов.ПометкаУдаления
	|ПОМЕСТИТЬ ВтДанныеОтборов
	|ИЗ
	|	ВтФилиалы КАК ВтФилиалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMS_ДанныеДокументов КАК итWMS_ДанныеДокументов
	|		ПО ВтФилиалы.Филиал = итWMS_ДанныеДокументов.Филиал
	|ГДЕ
	|	итWMS_ДанныеДокументов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеОтборов.Документ,
	|	ВтДанныеОтборов.ДанныеДокумента,
	|	ВтДанныеОтборов.Дата,
	|	ВтДанныеОтборов.Номер,
	|	ВтДанныеОтборов.ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ит_WMS_ТоварыВПути.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументНеСоздан,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ит_WMS_ТоварыВПути.ВерсияДанныхВходящего, """") <> ВтДанныеОтборов.ВерсияДанных
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВерсияДанныхВходящегоНеСходится,
	|	ЕСТЬNULL(ит_WMS_ТоварыВПути.Ссылка, НЕОПРЕДЕЛЕНО) КАК ДокументТоваровВПути,
	|	ВтДанныеОтборов.Филиал,
	|	ВтДанныеОтборов.КонтрагентОрганизация,
	|	ВтДанныеОтборов.ПометкаУдаления
	|ПОМЕСТИТЬ ВтДанные
	|ИЗ
	|	ВтДанныеОтборов КАК ВтДанныеОтборов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ит_WMS_ТоварыВПути КАК ит_WMS_ТоварыВПути
	|		ПО ВтДанныеОтборов.Документ = ит_WMS_ТоварыВПути.ГУИД_Входящего
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанные.Документ,
	|	ВтДанные.ДанныеДокумента,
	|	ВтДанные.Дата,
	|	ВтДанные.Номер,
	|	ВтДанные.ВерсияДанных,
	|	ВтДанные.ДокументНеСоздан,
	|	ВтДанные.ВерсияДанныхВходящегоНеСходится,
	|	ВтДанные.ДокументТоваровВПути,
	|	ВтДанные.Филиал,
	|	ВтДанные.КонтрагентОрганизация,
	|	ВтДанные.ПометкаУдаления
	|ИЗ
	|	ВтДанные КАК ВтДанные
	|ГДЕ
	|	(ВтДанные.ДокументНеСоздан
	|			ИЛИ ВтДанные.ВерсияДанныхВходящегоНеСходится)";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ТекущийДень);
	Запрос.УстановитьПараметр("Филиалы", Настройки.ЗагружаемыеФилиалы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоздатьИзменитьДокумент(ВыборкаДетальныеЗаписи,Настройки)
	КонецЦикла;
	
	
КонецПроцедуры

Процедура СоздатьИзменитьДокумент(Выборка,Настройки)
	СтруктураДанных=Выборка.ДанныеДокумента.Получить();
	
	Если Выборка.ДокументТоваровВПути=Неопределено Тогда 
		ОбъектДокумента=Документы.ит_WMS_ТоварыВПути.СоздатьДокумент();
	иначе
		ОбъектДокумента=Выборка.ДокументТоваровВПути.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбъектДокумента.ПометкаУдаления и ОбъектДокумента.ВерсияДанныхВходящего=СтруктураДанных.ВерсияДанных Тогда 
		Возврат
	КонецЕсли;	
	
	ОбъектДокумента.Дата=ТекущаяДата();
	ОбъектДокумента.ВерсияДанныхВходящего=СтруктураДанных.ВерсияДанных;
	ОбъектДокумента.ДатаВходящего=СтруктураДанных.Дата;
	ОбъектДокумента.НомерВходящего=СтруктураДанных.Номер;
	ОбъектДокумента.ГУИД_Входящего=СтруктураДанных.Документ;
	ОбъектДокумента.Ответственный=ПараметрыСеанса.ТекущийПользователь;
	ОбъектДокумента.Поставщик=Выборка.КонтрагентОрганизация;
	ОбъектДокумента.Организация=Настройки.ОрганизацияФилиала;
	ОбъектДокумента.СтатусДокумента=Перечисления.ит_WMS_СтатусыТоваровВПути.Создан;
	
	ЗаполнитьТабличнуюЧасть(СтруктураДанных.ТаблицаДанных,ОбъектДокумента);
	Если Выборка.ПометкаУдаления Тогда 
		Если ОбъектДокумента.Проведен Тогда 
			ОбъектДокумента.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		ОбъектДокумента.ПометкаУдаления=Истина;
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
	иначе
		ОбъектДокумента.ПометкаУдаления=Ложь;
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧасть(ТаблицаДляЗаполнения,ОбъектДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ИдентификаторУпаковки,
	|	Таблица.итИндентификаторыТоварныхПозиций,
	|	Таблица.ДатаРозлива,
	|	Таблица.КоличествоВБазовыхЕденицахИзмерения,
	|	Таблица.НДС,
	|	Таблица.СуммаВсего
	|ПОМЕСТИТЬ Вт
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт.итИндентификаторыТоварныхПозиций,
	|	Вт.ДатаРозлива,
	|	СУММА(Вт.КоличествоВБазовыхЕденицахИзмерения) КАК КоличествоВБазовыхЕденицахИзмерения,
	|	СУММА(Вт.НДС) КАК НДС,
	|	СУММА(Вт.СуммаВсего) КАК СуммаВсего
	|ПОМЕСТИТЬ ВтГруппировка
	|ИЗ
	|	Вт КАК Вт
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт.итИндентификаторыТоварныхПозиций,
	|	Вт.ДатаРозлива
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГруппировка.итИндентификаторыТоварныхПозиций,
	|	ВтГруппировка.ДатаРозлива,
	|	ВтГруппировка.КоличествоВБазовыхЕденицахИзмерения,
	|	ВтГруппировка.НДС,
	|	ВтГруппировка.СуммаВсего,
	|	МАКСИМУМ(ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))) КАК Номенклатура
	|ИЗ
	|	ВтГруппировка КАК ВтГруппировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВтГруппировка.итИндентификаторыТоварныхПозиций = Номенклатура.итИдентификаторНоменклатурнойПозиции
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтГруппировка.итИндентификаторыТоварныхПозиций,
	|	ВтГруппировка.ДатаРозлива,
	|	ВтГруппировка.КоличествоВБазовыхЕденицахИзмерения,
	|	ВтГруппировка.НДС,
	|	ВтГруппировка.СуммаВсего";
	
	Запрос.УстановитьПараметр("Таблица",ТаблицаДляЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ОбъектДокумента.Товары.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ОбъектДокумента.Товары.Добавить();
		НоваяСтрока.ИдентификаторТоварныхПозиций=ВыборкаДетальныеЗаписи.итИндентификаторыТоварныхПозиций;
		НоваяСтрока.Номенклатура= ВыборкаДетальныеЗаписи.Номенклатура;
		НоваяСтрока.ДатаРозлива =ВыборкаДетальныеЗаписи.ДатаРозлива;
		НоваяСтрока.Количество=ВыборкаДетальныеЗаписи.КоличествоВБазовыхЕденицахИзмерения;
		НоваяСтрока.СуммаНДС= ВыборкаДетальныеЗаписи.НДС;
		НоваяСтрока.СуммаВсего=ВыборкаДетальныеЗаписи.СуммаВсего;
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область РаботаСSQL

#Область SQLРаботаСЗадачами
#Область ЗаписьИтWMSЗадачиТСДSQL

Процедура ЗаписьитWMSЗадачиТСД(СтруктураПараметров)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСДИзменения.Узел,
	|	МАКСИМУМ(итWMSЗадачиТСДИзменения.НомерСообщения) КАК НомерСообщения,
	|	итWMSЗадачиТСДИзменения.ТСД,
	|	итWMSЗадачиТСДИзменения.ДокументОснование,
	|	итWMSЗадачиТСДИзменения.ТипЗадачи,
	|	итWMSЗадачиТСДИзменения.ИдЗадачи,
	|	итWMSЗадачиТСДИзменения.ИдЗадачиРодителя
	|ПОМЕСТИТЬ ВтДанныеПоНомеруСообщения
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД.Изменения КАК итWMSЗадачиТСДИзменения
	|ГДЕ
	|	итWMSЗадачиТСДИзменения.Узел = &Узел
	|	И итWMSЗадачиТСДИзменения.НомерСообщения МЕЖДУ &МинимальныйНомерСообщения И &МаксимальныйНомерСообщения
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSЗадачиТСДИзменения.Узел,
	|	итWMSЗадачиТСДИзменения.ТСД,
	|	итWMSЗадачиТСДИзменения.ДокументОснование,
	|	итWMSЗадачиТСДИзменения.ТипЗадачи,
	|	итWMSЗадачиТСДИзменения.ИдЗадачи,
	|	итWMSЗадачиТСДИзменения.ИдЗадачиРодителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеПоНомеруСообщения.Узел КАК УЗЕЛ,
	|	ВтДанныеПоНомеруСообщения.НомерСообщения КАК НомерСообщения,
	|	ВтДанныеПоНомеруСообщения.ТСД,
	|	ВтДанныеПоНомеруСообщения.ДокументОснование,
	|	ВтДанныеПоНомеруСообщения.ТипЗадачи,
	|	ВтДанныеПоНомеруСообщения.ИдЗадачи,
	|	ВтДанныеПоНомеруСообщения.ИдЗадачиРодителя
	|ПОМЕСТИТЬ ВтИзменения
	|ИЗ
	|	ВтДанныеПоНомеруСообщения КАК ВтДанныеПоНомеруСообщения
	|ГДЕ
	|	ВтДанныеПоНомеруСообщения.НомерСообщения = &МинимальныйНомерСообщения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеПоНомеруСообщения.ТСД,
	|	ВтДанныеПоНомеруСообщения.ДокументОснование,
	|	ВтДанныеПоНомеруСообщения.ТипЗадачи,
	|	ВтДанныеПоНомеруСообщения.ИдЗадачи,
	|	ВтДанныеПоНомеруСообщения.ИдЗадачиРодителя,
	|	ВтДанныеПоНомеруСообщения.Узел,
	|	ВтДанныеПоНомеруСообщения.НомерСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИзменения.УЗЕЛ КАК УзелПлана,
	|	МАКСИМУМ(ВтИзменения.НомерСообщения) КАК МаксимальныйНомерСообщения
	|ПОМЕСТИТЬ ВтМаксимальныйНомерСообщения
	|ИЗ
	|	ВтИзменения КАК ВтИзменения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИзменения.УЗЕЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИзменения.ТСД,
	|	ВтИзменения.ДокументОснование,
	|	ВтИзменения.ТипЗадачи,
	|	ВтИзменения.ИдЗадачи,
	|	ВтИзменения.ИдЗадачиРодителя,
	|	ЕСТЬNULL(итWMSЗадачиТСД.ИдентификаторУпаковки, НЕОПРЕДЕЛЕНО) КАК ИдентификаторУпаковки,
	|	ЕСТЬNULL(итWMSЗадачиТСД.ЯчейкаОтправитель, НЕОПРЕДЕЛЕНО) КАК ЯчейкаОтправитель,
	|	ЕСТЬNULL(итWMSЗадачиТСД.ЯчейкаПолучатель, НЕОПРЕДЕЛЕНО) КАК ЯчейкаПолучатель,
	|	ЕСТЬNULL(итWMSЗадачиТСД.ДополнительныеДанные, НЕОПРЕДЕЛЕНО) КАК ДополнительныеДанные,
	|	ЕСТЬNULL(итWMSЗадачиТСД.ДатаНачала, НЕОПРЕДЕЛЕНО) КАК ДатаНачала,
	|	ЕСТЬNULL(итWMSЗадачиТСД.ДатаОкончания, НЕОПРЕДЕЛЕНО) КАК ДатаОкончания,
	|	ЕСТЬNULL(итWMSЗадачиТСД.Состояние, НЕОПРЕДЕЛЕНО) КАК Состояние,
	|	ЕСТЬNULL(итWMSЗадачиТСД.ФиксацияЗадачи, НЕОПРЕДЕЛЕНО) КАК ФиксацияЗадачи,
	|	ВтМаксимальныйНомерСообщения.МаксимальныйНомерСообщения КАК МаксимальныйНомерСообщения,
	|	ВтИзменения.УЗЕЛ
	|ПОМЕСТИТЬ ВтИтоговыеДанные
	|ИЗ
	|	ВтИзменения КАК ВтИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|		ПО ВтИзменения.ТСД = итWMSЗадачиТСД.ТСД
	|			И ВтИзменения.ДокументОснование = итWMSЗадачиТСД.ДокументОснование
	|			И ВтИзменения.ТипЗадачи = итWMSЗадачиТСД.ТипЗадачи
	|			И ВтИзменения.ИдЗадачи = итWMSЗадачиТСД.ИдЗадачи
	|			И ВтИзменения.ИдЗадачиРодителя = итWMSЗадачиТСД.ИдЗадачиРодителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтМаксимальныйНомерСообщения КАК ВтМаксимальныйНомерСообщения
	|		ПО ВтИзменения.УЗЕЛ = ВтМаксимальныйНомерСообщения.УзелПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтоговыеДанные.ТСД
	|ИЗ
	|	ВтИтоговыеДанные КАК ВтИтоговыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИтоговыеДанные.ТСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтоговыеДанные.ДокументОснование КАК Регистратор
	|ИЗ
	|	ВтИтоговыеДанные КАК ВтИтоговыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИтоговыеДанные.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтоговыеДанные.ТипЗадачи
	|ИЗ
	|	ВтИтоговыеДанные КАК ВтИтоговыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИтоговыеДанные.ТипЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ячейка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтИтоговыеДанные.ЯчейкаОтправитель КАК Ячейка
	|	ИЗ
	|		ВтИтоговыеДанные КАК ВтИтоговыеДанные
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВтИтоговыеДанные.ЯчейкаОтправитель
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВтИтоговыеДанные.ЯчейкаПолучатель
	|	ИЗ
	|		ВтИтоговыеДанные КАК ВтИтоговыеДанные
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВтИтоговыеДанные.ЯчейкаПолучатель) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтоговыеДанные.Состояние
	|ИЗ
	|	ВтИтоговыеДанные КАК ВтИтоговыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИтоговыеДанные.Состояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтоговыеДанные.ТСД,
	|	ВтИтоговыеДанные.ДокументОснование,
	|	ВтИтоговыеДанные.ТипЗадачи,
	|	ВтИтоговыеДанные.ИдЗадачи,
	|	ВтИтоговыеДанные.ИдЗадачиРодителя,
	|	ВтИтоговыеДанные.ИдентификаторУпаковки,
	|	ВтИтоговыеДанные.ЯчейкаОтправитель,
	|	ВтИтоговыеДанные.ЯчейкаПолучатель,
	|	ВтИтоговыеДанные.ДополнительныеДанные,
	|	ВтИтоговыеДанные.ДатаНачала,
	|	ВтИтоговыеДанные.ДатаОкончания,
	|	ВтИтоговыеДанные.Состояние,
	|	ВтИтоговыеДанные.ФиксацияЗадачи,
	|	ВтИтоговыеДанные.МаксимальныйНомерСообщения КАК МаксимальныйНомерСообщения,
	|	ВтИтоговыеДанные.УЗЕЛ КАК Узел
	|ИЗ
	|	ВтИтоговыеДанные КАК ВтИтоговыеДанные
	|ИТОГИ
	|	МАКСИМУМ(МаксимальныйНомерСообщения)
	|ПО
	|	Узел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИзменения.ИдЗадачи
	|ИЗ
	|	ВтИзменения КАК ВтИзменения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИзменения.ИдЗадачи";
	
	Запрос.УстановитьПараметр("Узел", СтруктураПараметров.НастройкиWMS.ПланОбменаSQL);
	Запрос.УстановитьПараметр("МинимальныйНомерСообщения",СтруктураПараметров.МинимальныйНомерСообщения);
	Запрос.УстановитьПараметр("МаксимальныйНомерСообщения",СтруктураПараметров.МаксимальныйНомерСообщения);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ЗаписьТСД(СтруктураПараметров,МассивРезультатов);
	ЗаписьДокументов(СтруктураПараметров,МассивРезультатов);
	ЗаписьТиповЗадачWMS(СтруктураПараметров,МассивРезультатов);
	ЗаписьЯчеек(СтруктураПараметров,МассивРезультатов);
	ЗаписьСостоянийЗадачWMS(СтруктураПараметров,МассивРезультатов);
	ОчиститьДублирующиесяДанные(СтруктураПараметров,МассивРезультатов);
	ЗаписьДетальныхДанныхЗадач(СтруктураПараметров,МассивРезультатов);
	
	
КонецПроцедуры

Процедура ЗаписьТСД(СтруктураПараметров,МассивРезультатов)
	
	ТаблицаДанных=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","TSDTable");
	
	Выборка=МассивРезультатов[4].Выбрать();
	Пока Выборка.Следующий() цикл
		СтруктураТиповизации= ПолучитьСтруктуруТиповизции(Выборка.ТСД);
		ГУИДТСД= Выборка.ТСД.УникальныйИдентификатор();
		СоответсвиеОтбора = ПолучитьСоответсвиеПоискаПоGUID(ГУИДТСД);
		СоответсвиеЗаписи=новый Соответствие;
		СоответсвиеЗаписи.Вставить("Link.GUID",ГУИДТСД);
		СоответсвиеЗаписи.Вставить("Link.TypeValue",СтруктураТиповизации.ИмяМетаданных);
		СоответсвиеЗаписи.Вставить("Link.TypeMetadata",СтруктураТиповизации.ТипМетаданных);
		СоответсвиеЗаписи.Вставить("Link.Name",СтруктураТиповизации.Синоним);
		СоответсвиеЗаписи.Вставить("Code",Выборка.ТСД.Код);
		СоответсвиеЗаписи.Вставить("Name",Выборка.ТСД.Наименование);
		СоответсвиеЗаписи.Вставить("TSDID",Выборка.ТСД.ТСДИД);
		СоответсвиеЗаписи.Вставить("GUID",ГУИДТСД);
		ЗаписьОбвновлениеСсылки(СоответсвиеЗаписи, СоответсвиеОтбора, СтруктураПараметров, ТаблицаДанных);
		СтруктураПараметров.АДОСоединение.CommitTrans();
		СтруктураПараметров.АДОСоединение.BeginTrans();
	КонецЦикла;
КонецПроцедуры


Процедура ЗаписьДокументов(СтруктураПараметров,МассивРезультатов)
	Выборка=МассивРезультатов[5].Выбрать();
	Пока Выборка.Следующий() цикл
		ОбработчикЗаписиРегистратораПоВыборке(СтруктураПараметров,Выборка);
		СтруктураПараметров.АДОСоединение.CommitTrans();
		СтруктураПараметров.АДОСоединение.BeginTrans();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписьТиповЗадачWMS(СтруктураПараметров,МассивРезультатов)
	ТаблицаДанных=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","WMSTypeTask");
	Выборка=МассивРезультатов[6].Выбрать();
	Пока Выборка.Следующий() цикл
		СтруктураТиповизации= ПолучитьСтруктуруТиповизции(Выборка.ТипЗадачи);
		СоответсвиеОтбора=новый Соответствие;
		СоответсвиеОтбора.Вставить("Link.GUID",Строка(Выборка.ТипЗадачи));
		СоответсвиеОтбора.Вставить("Link.TypeValue",СтруктураТиповизации.ИмяМетаданных);
		СоответсвиеОтбора.Вставить("Link.TypeMetadata",СтруктураТиповизации.ТипМетаданных);
		СоответсвиеОтбора.Вставить("Link.Name",СтруктураТиповизации.Синоним);
		СоответсвиеЗаписи=новый Соответствие;
		СоответсвиеЗаписи.Вставить("Link.GUID",Строка(Выборка.ТипЗадачи));
		СоответсвиеЗаписи.Вставить("Link.TypeValue",СтруктураТиповизации.ИмяМетаданных);
		СоответсвиеЗаписи.Вставить("Link.TypeMetadata",СтруктураТиповизации.ТипМетаданных);
		СоответсвиеЗаписи.Вставить("Link.Name",СтруктураТиповизации.Синоним);
		СоответсвиеЗаписи.Вставить("Name",Строка(Выборка.ТипЗадачи)); 
		ЗаписьОбвновлениеСсылки(СоответсвиеЗаписи, СоответсвиеОтбора, СтруктураПараметров, ТаблицаДанных);
		СтруктураПараметров.АДОСоединение.CommitTrans();
		СтруктураПараметров.АДОСоединение.BeginTrans();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписьЯчеек(СтруктураПараметров,МассивРезультатов)
	ТаблицаДанных=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","CellS");
	Выборка=МассивРезультатов[7].Выбрать();
	Пока Выборка.Следующий() цикл
		Если Выборка.Ячейка = Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		СтруктураТиповизации= ПолучитьСтруктуруТиповизции(Выборка.Ячейка);
		ГУИДЯчейки=Выборка.Ячейка.УникальныйИдентификатор();
		СоответсвиеОтбора = ПолучитьСоответсвиеПоискаПоGUID(ГУИДЯчейки);
		СоответсвиеЗаписи=новый Соответствие;
		СоответсвиеЗаписи.Вставить("Link.GUID",ГУИДЯчейки);
		СоответсвиеЗаписи.Вставить("Link.TypeValue",СтруктураТиповизации.ИмяМетаданных);
		СоответсвиеЗаписи.Вставить("Link.TypeMetadata",СтруктураТиповизации.ТипМетаданных);
		СоответсвиеЗаписи.Вставить("Link.Name",СтруктураТиповизации.Синоним);
		СоответсвиеЗаписи.Вставить("Name",Выборка.Ячейка.Наименование);
		СоответсвиеЗаписи.Вставить("Code",Выборка.Ячейка.Код);
		СоответсвиеЗаписи.Вставить("GUID",ГУИДЯчейки);
		ЗаписьОбвновлениеСсылки(СоответсвиеЗаписи, СоответсвиеОтбора, СтруктураПараметров, ТаблицаДанных);
		СтруктураПараметров.АДОСоединение.CommitTrans();
		СтруктураПараметров.АДОСоединение.BeginTrans();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписьСостоянийЗадачWMS(СтруктураПараметров,МассивРезультатов)
	ТаблицаДанных=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","WMSConditionTask");
	Выборка=МассивРезультатов[8].Выбрать();
	Пока Выборка.Следующий() цикл
		Если Выборка.Состояние=Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		СтруктураТиповизации= ПолучитьСтруктуруТиповизции(Выборка.Состояние);
		СоответсвиеОтбора=новый Соответствие;
		СоответсвиеОтбора.Вставить("Link.GUID",Строка(Выборка.Состояние));
		СоответсвиеОтбора.Вставить("Link.TypeValue",СтруктураТиповизации.ИмяМетаданных);
		СоответсвиеОтбора.Вставить("Link.TypeMetadata",СтруктураТиповизации.ТипМетаданных);
		СоответсвиеОтбора.Вставить("Link.Name",СтруктураТиповизации.Синоним);
		СоответсвиеЗаписи=новый Соответствие;
		СоответсвиеЗаписи.Вставить("Link.GUID",Строка(Выборка.Состояние));
		СоответсвиеЗаписи.Вставить("Link.TypeValue",СтруктураТиповизации.ИмяМетаданных);
		СоответсвиеЗаписи.Вставить("Link.TypeMetadata",СтруктураТиповизации.ТипМетаданных);
		СоответсвиеЗаписи.Вставить("Link.Name",СтруктураТиповизации.Синоним);
		СоответсвиеЗаписи.Вставить("Name",Строка(Выборка.Состояние));
		ЗаписьОбвновлениеСсылки(СоответсвиеЗаписи, СоответсвиеОтбора, СтруктураПараметров, ТаблицаДанных);
		СтруктураПараметров.АДОСоединение.CommitTrans();
		СтруктураПараметров.АДОСоединение.BeginTrans();
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОчиститьДублирующиесяДанные(СтруктураПараметров,МассивРезультатов)
	ТаблицаЗадач=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","WMSTaskTSD");
	Выборка= МассивРезультатов[10].Выбрать();
	МассивЗадач=новый Массив;
	Пока Выборка.Следующий() цикл
		МассивЗадач.Добавить(Выборка.ИдЗадачи);
	КонецЦикла;
	Если МассивЗадач.Количество()>0 Тогда 
		СоответсвиеУдаления=новый Соответствие;
		СоответсвиеУдаления.Вставить("IdTask",МассивЗадач);
		СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	
		СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.УдалениеДанныхСоСтрогимОтбором(ТаблицаЗадач,СоответсвиеУдаления);
		СтруктураПараметров.АдоКоманда.Execute();
		МассивЗадач.Очистить();
	КонецЕсли;
	СтруктураПараметров.АДОСоединение.CommitTrans();
	СтруктураПараметров.АДОСоединение.BeginTrans();
	СтруктураПараметров.СрокЗаписано=0;
КонецПроцедуры

Процедура ЗаписьДетальныхДанныхЗадач(СтруктураПараметров,МассивРезультатов)
	ТаблицаЗадач=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","WMSTaskTSD");
	ВременнаяТаблицаЗадач=СоздатьВременнуюТаблицуЗадач(СтруктураПараметров);
	СоответствиеЗаписиЗадачТСД=новый Соответствие;
	ВыборкаУзел = МассивРезультатов[9].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	Пока ВыборкаУзел.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаУзел.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.ИдентификаторУпаковки = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			ЗаполнитьСсылкуSQLВСоответствие(СоответствиеЗаписиЗадачТСД,"TSD",ВыборкаДетальныеЗаписи.ТСД);
			ЗаполнитьСсылкуSQLВСоответствие(СоответствиеЗаписиЗадачТСД,"BasisDocumnet",ВыборкаДетальныеЗаписи.ДокументОснование);
			ЗаполнитьСсылкуSQLВСоответствие(СоответствиеЗаписиЗадачТСД,"TypeTask",ВыборкаДетальныеЗаписи.ТипЗадачи,Истина);
			ЗаполнитьСсылкуSQLВСоответствие(СоответствиеЗаписиЗадачТСД,"SenderCell",ВыборкаДетальныеЗаписи.ЯчейкаОтправитель);
			ЗаполнитьСсылкуSQLВСоответствие(СоответствиеЗаписиЗадачТСД,"RecipientCell",ВыборкаДетальныеЗаписи.ЯчейкаПолучатель);
			ЗаполнитьСсылкуSQLВСоответствие(СоответствиеЗаписиЗадачТСД,"Condition",ВыборкаДетальныеЗаписи.Состояние,Истина);
			СоответствиеЗаписиЗадачТСД.Вставить("IdTask",ВыборкаДетальныеЗаписи.ИдЗадачи);
			СоответствиеЗаписиЗадачТСД.Вставить("IdTaskParrent",ВыборкаДетальныеЗаписи.ИдЗадачиРодителя);
			СоответствиеЗаписиЗадачТСД.Вставить("IdPackage",ВыборкаДетальныеЗаписи.ИдентификаторУпаковки);
			СоответствиеЗаписиЗадачТСД.Вставить("DateBegin", ВыборкаДетальныеЗаписи.ДатаНачала);
			СоответствиеЗаписиЗадачТСД.Вставить("DateEnd",ВыборкаДетальныеЗаписи.ДатаОкончания);
			СоответствиеЗаписиЗадачТСД.Вставить("FixingTask",ВыборкаДетальныеЗаписи.ФиксацияЗадачи);
			ДополнительныеДанные= ВыборкаДетальныеЗаписи.ДополнительныеДанные.Получить();
			Если ТипЗнч(ДополнительныеДанные)<>Тип("Структура") Тогда 
				ДополнительныеДанные=новый Структура("NoData",Истина);
			КонецЕсли;	
			СоответствиеЗаписиЗадачТСД.Вставить("AdditionalData",итWMSСлужебныеПроцедурыИФункции.СериализаторДанных(ДополнительныеДанные));
			СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	
			СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.ЗаписьДанныхПострочно(ВременнаяТаблицаЗадач,СоответствиеЗаписиЗадачТСД);
			СтруктураПараметров.АдоКоманда.Execute();
			
		КонецЦикла;
		СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	
		СоответствиеПолейЗаписиЗадач=СформироватьСоответствиеПолейЗаписиЗадач();
		СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.ВставитьДанныеИзВРеменнойТаблицы(ТаблицаЗадач,ВременнаяТаблицаЗадач,СоответствиеПолейЗаписиЗадач);
		СтруктураПараметров.АдоКоманда.Execute();
		СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	
		СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.УдалениеВременнойТаблицы(ВременнаяТаблицаЗадач);
		СтруктураПараметров.АдоКоманда.Execute();
		СтруктураПараметров.АДОСоединение.CommitTrans();
		СтруктураПараметров.АДОСоединение.BeginTrans();
		СтруктураПараметров.СрокЗаписано=0;
		
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииПроцедурыЗадачSQL
Процедура ТочечнаяВыборкаИзмененийЗадачиТСД(Знач ПланОбменаSQL)
	
	Перем ВыборкаДетальныеЗаписи, ВыборкаДокументОснование, Запрос, НаборЗаписей, НомерСообщения, РезультатЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСДИзменения.ТСД,
	|	итWMSЗадачиТСДИзменения.ДокументОснование КАК ДокументОснование,
	|	итWMSЗадачиТСДИзменения.ТипЗадачи,
	|	итWMSЗадачиТСДИзменения.ИдЗадачи,
	|	итWMSЗадачиТСДИзменения.ИдЗадачиРодителя
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД.Изменения КАК итWMSЗадачиТСДИзменения
	|ГДЕ
	|	итWMSЗадачиТСДИзменения.Узел = &Узел
	|	И итWMSЗадачиТСДИзменения.НомерСообщения ЕСТЬ NULL
	|ИТОГИ ПО
	|	ДокументОснование";
	
	Запрос.УстановитьПараметр("Узел", ПланОбменаSQL);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДокументОснование = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументОснование.Следующий() Цикл
		
		
		ВыборкаДетальныеЗаписи = ВыборкаДокументОснование.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдЗадачи.Установить(ВыборкаДетальныеЗаписи.ИдЗадачи);
			НаборЗаписей.Отбор.ДокументОснование.Установить(ВыборкаДетальныеЗаписи.ДокументОснование);
			НаборЗаписей.Отбор.ТСД.Установить(ВыборкаДетальныеЗаписи.ТСД);
			НаборЗаписей.Отбор.ТипЗадачи.Установить(ВыборкаДетальныеЗаписи.ТипЗадачи);
			НаборЗаписей.Отбор.ИдЗадачиРодителя.Установить(ВыборкаДетальныеЗаписи.ИдЗадачиРодителя);
			ЗафиксироватьТранзакцию();
		КонецЦикла;
		НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(ВыборкаДокументОснование.ДокументОснование);
		НомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПоследнийНомерИзмененийНаУзлеSQL(ПланОбменаSQL);
		ПланыОбмена.ВыбратьИзменения(ПланОбменаSQL,НомерСообщения+1,НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры
Процедура РегистрацияИзмененийЗадачи(Параметры) Экспорт 
	НастройкиWMS=ит_WMS_МодульПовИспользованияСеанс.ПолучитьНастройкиИзХранилища();
	Если ТипЗнч(НастройкиWMS)<>Тип("Структура") Тогда 
		Возврат
	КонецЕсли;
	Если не НастройкиWMS.Свойство("ПланОбменаSQL") Тогда 
		Возврат
	КонецЕсли;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ДокументОснование.Ссылка
	|ПОМЕСТИТЬ Вт
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ДокументОснование.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSЗадачиТСД.ТСД,
	|	итWMSЗадачиТСД.ДокументОснование КАК ДокументОснование,
	|	итWMSЗадачиТСД.ТипЗадачи,
	|	итWMSЗадачиТСД.ИдЗадачи,
	|	итWMSЗадачиТСД.ИдЗадачиРодителя,
	|	итWMSЗадачиТСД.ИдентификаторУпаковки,
	|	итWMSЗадачиТСД.ЯчейкаОтправитель,
	|	итWMSЗадачиТСД.ЯчейкаПолучатель,
	|	итWMSЗадачиТСД.ДополнительныеДанные,
	|	итWMSЗадачиТСД.ДатаНачала,
	|	итWMSЗадачиТСД.ДатаОкончания,
	|	итWMSЗадачиТСД.Состояние,
	|	итWMSЗадачиТСД.ФиксацияЗадачи
	|ИЗ
	|	Вт КАК Вт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|		ПО Вт.ДокументОснованиеСсылка = итWMSЗадачиТСД.ДокументОснование
	|ИТОГИ ПО
	|	ДокументОснование";
	
	Запрос.УстановитьПараметр("ДатаНачала", Параметры.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Параметры.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДокументОснование = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументОснование.Следующий() Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		ВыборкаДетальныеЗаписи = ВыборкаДокументОснование.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументОснование.Установить(ВыборкаДетальныеЗаписи.ДокументОснование);
			НаборЗаписей.Отбор.ТСД.Установить(ВыборкаДетальныеЗаписи.ТСД);
			НаборЗаписей.Отбор.ТипЗадачи.Установить(ВыборкаДетальныеЗаписи.ТипЗадачи);
			НаборЗаписей.Отбор.ИдЗадачи.Установить(ВыборкаДетальныеЗаписи.ИдЗадачи);
			НаборЗаписей.Отбор.ИдЗадачиРодителя.Установить(ВыборкаДетальныеЗаписи.ИдЗадачиРодителя);	
			ПланыОбмена.ЗарегистрироватьИзменения(НастройкиWMS.ПланОбменаSQL,НаборЗаписей);
			
		КонецЦикла;
		НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(ВыборкаДетальныеЗаписи.ДокументОснование);
		НомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПоследнийНомерИзмененийНаУзлеSQL(НастройкиWMS.ПланОбменаSQL);
		ПланыОбмена.ВыбратьИзменения(НастройкиWMS.ПланОбменаSQL,НомерСообщения+1,НаборЗаписей);
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры
Функция СформироватьТаблицуДляЗаписиSQLWMSЗадачи()
	ТаблицаДляЗаписи=новый ТаблицаЗначений;
	ТаблицаДляЗаписи.Колонки.Добавить("TSD_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("TSD_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("TSD_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("TSD_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("BasisDocumnet_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("BasisDocumnet_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("BasisDocumnet_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("BasisDocumnet_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("TypeTask_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("TypeTask_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("TypeTask_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("TypeTask_Name"); 
	ТаблицаДляЗаписи.Колонки.Добавить("IdTask");
	ТаблицаДляЗаписи.Колонки.Добавить("IdTaskParrent");	
	ТаблицаДляЗаписи.Колонки.Добавить("IdPackage");
	ТаблицаДляЗаписи.Колонки.Добавить("SenderCell_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("SenderCell_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("SenderCell_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("SenderCell_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("RecipientCell_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("RecipientCell_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("RecipientCell_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("RecipientCell_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("Condition_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("Condition_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("Condition_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("Condition_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("DateBegin");
	ТаблицаДляЗаписи.Колонки.Добавить("DateEnd");;
	ТаблицаДляЗаписи.Колонки.Добавить("FixingTask");
	ТаблицаДляЗаписи.Колонки.Добавить("AdditionalData");
	Возврат ТаблицаДляЗаписи;
КонецФункции
Функция СоздатьВременнуюТаблицуЗадач(СтруктураПараметров)
	КлючТаблицы=СтрЗаменить(Строка(новый УникальныйИдентификатор()),"-","");
	ИмяТаблицы="TempTaskTSD"+КлючТаблицы;
	ИмяТаблицыМарок=СтруктураПараметров.Конструктор.ПутьДоТаблицы(,ИмяТаблицы);
	СоответствиеВременнойТаблицыЗадач=СформироватьСоответствиеВременнойТаблицыЗадач();
	СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.СоздатьВременнуюТаблицуСОбъявлениемДанных(ИмяТаблицыМарок,СоответствиеВременнойТаблицыЗадач);
	СтруктураПараметров.АдоКоманда.Execute();
	Возврат ИмяТаблицыМарок;
	
КонецФункции
Функция СформироватьСоответствиеВременнойТаблицыЗадач()
	СоответсвиеДанныхВременнойТаблицыЗадач=новый Соответствие;
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("TSD",""""+"LinkAll"+"""");
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("BasisDocumnet",""""+"LinkAll"+"""");	
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("IdTask","character varying(36)");
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("TypeTask",""""+"LinkAll"+"""");
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("IdTaskParrent","character varying(36)");
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("IdPackage","character varying(172)");
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("SenderCell",""""+"LinkAll"+"""");
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("RecipientCell",""""+"LinkAll"+"""");
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("AdditionalData","text");
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("DateBegin","timestamp without time zone");
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("DateEnd","timestamp without time zone");
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("Condition",""""+"LinkAll"+"""");
	СоответсвиеДанныхВременнойТаблицыЗадач.Вставить("FixingTask","boolean");	
	Возврат  СоответсвиеДанныхВременнойТаблицыЗадач;	
КонецФункции
Функция СформироватьСоответствиеПолейЗаписиЗадач()
	СоответствиеПолейЗаписиЗадач=новый Соответствие;
	СоответствиеПолейЗаписиЗадач.Вставить("TSD","TSD");
	СоответствиеПолейЗаписиЗадач.Вставить("BasisDocumnet","BasisDocumnet");	
	СоответствиеПолейЗаписиЗадач.Вставить("IdTask","IdTask");
	СоответствиеПолейЗаписиЗадач.Вставить("TypeTask","TypeTask");
	СоответствиеПолейЗаписиЗадач.Вставить("IdTaskParrent","IdTaskParrent");
	СоответствиеПолейЗаписиЗадач.Вставить("IdPackage","IdPackage");
	СоответствиеПолейЗаписиЗадач.Вставить("SenderCell","SenderCell");
	СоответствиеПолейЗаписиЗадач.Вставить("RecipientCell","RecipientCell");
	СоответствиеПолейЗаписиЗадач.Вставить("AdditionalData","AdditionalData");
	СоответствиеПолейЗаписиЗадач.Вставить("DateBegin","DateBegin");
	СоответствиеПолейЗаписиЗадач.Вставить("DateEnd","DateEnd");
	СоответствиеПолейЗаписиЗадач.Вставить("Condition","Condition");
	СоответствиеПолейЗаписиЗадач.Вставить("FixingTask","FixingTask");	
	Возврат  СоответствиеПолейЗаписиЗадач;	
КонецФункции
#КонецОбласти

#КонецОбласти

#Область SQLРаботаСМарками

#Область SQLЗаписьДанных
Процедура итWMS_SQLЗаписьМарки() Экспорт
	НастройкиWMS=ПолучитьНастройкиИзХранилища();
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(НастройкиWMS) Тогда 
		Возврат
	КонецЕсли;
	Если не НастройкиWMS.ИспользоватьВнешниеSQLТаблицы Тогда 
		Возврат
	КонецЕсли;
	//НомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПоследнийНомерИзмененийНаУзлеSQL(НастройкиWMS.ПланОбменаSQL);
	//ПланыОбмена.ВыбратьИзменения(НастройкиWMS.ПланОбменаSQL,НомерСообщения+1);
	ТочечнаяВыборкаИзменений(НастройкиWMS.ПланОбменаSQLМарки);
	КоэффициентОбрабатываемыхСообщений=?(НастройкиWMS.РазрешённоеКоличествоПотоковЗаписиМарки=0,1,НастройкиWMS.РазрешённоеКоличествоПотоковЗаписиМарки)-1;
	МинимальныйНомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПервыйНомерИзмененийНаУзлеSQL(НастройкиWMS.ПланОбменаSQLМарки);
	МаксимальныйНомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПоследнийНомерИзмененийНаУзлеSQL(НастройкиWMS.ПланОбменаSQLМарки);
	Если МаксимальныйНомерСообщения>МинимальныйНомерСообщения+КоэффициентОбрабатываемыхСообщений Тогда
		МаксимальныйНомерСообщения=МинимальныйНомерСообщения+КоэффициентОбрабатываемыхСообщений;
	КонецЕсли;
	Если МинимальныйНомерСообщения=0 Тогда 
		Возврат
	КонецЕсли;	
	ВсеЗаданияВыполнены=Ложь;
	ОшибкаВремениИсполнения=Ложь;
	ЕстьАварийноеЗавершение=Ложь;
	Если НастройкиWMS.ИспользоватьАсинхронныйМетодЗаписиМарки Тогда
		АсинхронныйМетодЗаписиМарки(НастройкиWMS,МинимальныйНомерСообщения,МаксимальныйНомерСообщения,ВсеЗаданияВыполнены,
		ОшибкаВремениИсполнения,ЕстьАварийноеЗавершение);
	иначе
		МаксимальныйНомерСообщения=МинимальныйНомерСообщения;
		СтруктураЗапускаАссинхоронногоВызова=новый Структура;
		СтруктураЗапускаАссинхоронногоВызова.Вставить("НастройкиWMS",НастройкиWMS);
		СтруктураЗапускаАссинхоронногоВызова.Вставить("МинимальныйНомерСообщения",МинимальныйНомерСообщения);
		СтруктураЗапускаАссинхоронногоВызова.Вставить("МаксимальныйНомерСообщения",МаксимальныйНомерСообщения);
		ОбработчикЗаписиМарокSQL(СтруктураЗапускаАссинхоронногоВызова);
		ВсеЗаданияВыполнены=Истина;
	КонецЕсли;
	Если ОшибкаВремениИсполнения Тогда 
		ВызватьИсключение "Ошибка Времени Исполнения";
	КонецЕсли;	
	Если ЕстьАварийноеЗавершение Тогда
		МаксимальныйНомерСообщения=МинимальныйНомерСообщения;
		СтруктураЗапускаАссинхоронногоВызова=новый Структура;
		СтруктураЗапускаАссинхоронногоВызова.Вставить("НастройкиWMS",НастройкиWMS);
		СтруктураЗапускаАссинхоронногоВызова.Вставить("МинимальныйНомерСообщения",МинимальныйНомерСообщения);
		СтруктураЗапускаАссинхоронногоВызова.Вставить("МаксимальныйНомерСообщения",МаксимальныйНомерСообщения);
		ОбработчикЗаписиМарокSQL(СтруктураЗапускаАссинхоронногоВызова);
		ВсеЗаданияВыполнены=Истина;
		//ВызватьИсключение "Есть аварийное завершение ассинхронного метода";
	КонецЕсли;	
	Если ВсеЗаданияВыполнены Тогда 	
		ПланыОбмена.УдалитьРегистрациюИзменений(НастройкиWMS.ПланОбменаSQLМарки,МаксимальныйНомерСообщения);
	КонецЕсли;		
КонецПроцедуры

#Область АссинхроныйОбработчикМарокSQL
Процедура АсинхронныйМетодЗаписиМарки(НастройкиWMS,МинимальныйНомерСообщения,МаксимальныйНомерСообщения,ВсеЗаданияВыполнены,
	ОшибкаВремениИсполнения,ЕстьАварийноеЗавершение)
	МассивКлючейФоновыхЗаданий=новый Массив;
	КлючРегламентногоЗадания=Строка(новый УникальныйИдентификатор());
	Для n=МинимальныйНомерСообщения по МаксимальныйНомерСообщения Цикл 
		СтруктураЗапускаАссинхоронногоВызова=новый Структура;
		СтруктураЗапускаАссинхоронногоВызова.Вставить("НастройкиWMS",НастройкиWMS);
		СтруктураЗапускаАссинхоронногоВызова.Вставить("МинимальныйНомерСообщения",n);
		СтруктураЗапускаАссинхоронногоВызова.Вставить("МаксимальныйНомерСообщения",МаксимальныйНомерСообщения);
		КлючЗадачния=Строка(новый УникальныйИдентификатор());
		МассивКлючейФоновыхЗаданий.Добавить(новый Структура("КлючЗадачния,МинимальныйНомерСообщения,МаксимальныйНомерСообщения,АвайриноеЗавершение",КлючЗадачния,МинимальныйНомерСообщения,МаксимальныйНомерСообщения,Ложь));
		МассивПараметров=новый Массив;
		МассивПараметров.Добавить(СтруктураЗапускаАссинхоронногоВызова); 
		ФоновыеЗадания.Выполнить("итWMSПривилегированныйМодуль.ОбработчикЗаписиМарокSQL",МассивПараметров,КлючЗадачния,"SQLАсинхроннаяЗаписьМарок"+КлючРегламентногоЗадания);
	КонецЦикла;
	
	ОжиданиеФоновыхЗаданийSQL(ВсеЗаданияВыполнены, ЕстьАварийноеЗавершение, МассивКлючейФоновыхЗаданий, ОшибкаВремениИсполнения);
	
	Если ВсеЗаданияВыполнены и ЕстьАварийноеЗавершение Тогда
		ЕстьАварийноеЗавершение=Ложь; 
		ВсеЗаданияВыполнены=Ложь;
		МассивКлючейФоновыхЗаданийНовыйЗапуск=новый Массив;
		Для Каждого стр из МассивКлючейФоновыхЗаданий цикл
			Если стр.АвайриноеЗавершение Тогда 
				СтруктураЗапускаАссинхоронногоВызова=новый Структура;
				СтруктураЗапускаАссинхоронногоВызова.Вставить("НастройкиWMS",НастройкиWMS);
				СтруктураЗапускаАссинхоронногоВызова.Вставить("МинимальныйНомерСообщения",стр.МинимальныйНомерСообщения);
				СтруктураЗапускаАссинхоронногоВызова.Вставить("МаксимальныйНомерСообщения",стр.МаксимальныйНомерСообщения);
				КлючЗадачния=Строка(новый УникальныйИдентификатор());
				МассивКлючейФоновыхЗаданийНовыйЗапуск.Добавить(новый Структура("КлючЗадачния,МинимальныйНомерСообщения,МаксимальныйНомерСообщения,АвайриноеЗавершение",КлючЗадачния,МинимальныйНомерСообщения,МаксимальныйНомерСообщения,Ложь));
				МассивПараметров=новый Массив;
				МассивПараметров.Добавить(СтруктураЗапускаАссинхоронногоВызова); 
				ФоновыеЗадания.Выполнить("итWMSПривилегированныйМодуль.ОбработчикЗаписиМарокSQL",МассивПараметров,КлючЗадачния,"SQLАсинхроннаяЗаписьМарок"+КлючРегламентногоЗадания);	
			КонецЕсли;
		КонецЦикла;
		ОжиданиеФоновыхЗаданийSQL(ВсеЗаданияВыполнены, ЕстьАварийноеЗавершение, МассивКлючейФоновыхЗаданийНовыйЗапуск, ОшибкаВремениИсполнения);
	КонецЕсли;
	
	
КонецПроцедуры
#КонецОбласти


Процедура ОбработчикЗаписиМарокSQL(СтруктураЗапускаАссинхоронногоВызова) Экспорт 
	
	Конструктор=Обработки.итWMS_КострукторЗапросаPostgresQL.Создать();
	АДОСоединение=итWMSСлужебныеПроцедурыИФункции.ПолучитьСоединениеДоSQLМарки();
	АдоКоманда=итWMSСлужебныеПроцедурыИФункции.ПолучитьADOКоммандуSQL();
	АдоКоманда.ActiveConnection=АДОСоединение;
	АдоКоманда.CommandTimeout=5000;
	Recordset = итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементВыборкиSQL();
	СтруктураПараметров=новый Структура;
	СтруктураПараметров.Вставить("НастройкиWMS",СтруктураЗапускаАссинхоронногоВызова.НастройкиWMS);
	СтруктураПараметров.Вставить("Конструктор",Конструктор);
	СтруктураПараметров.Вставить("АДОСоединение",АДОСоединение);
	СтруктураПараметров.Вставить("АдоКоманда",АдоКоманда);
	СтруктураПараметров.Вставить("Recordset",Recordset);
	СтруктураПараметров.Вставить("МаксимальныйНомерСообщения",СтруктураЗапускаАссинхоронногоВызова.МаксимальныйНомерСообщения);
	СтруктураПараметров.Вставить("СрокЗаписано",0);
	СтруктураПараметров.Вставить("МинимальныйНомерСообщения",СтруктураЗапускаАссинхоронногоВызова.МинимальныйНомерСообщения);	
	АДОСоединение.BeginTrans();
	Попытка
		ЗаписьитАлкХранилищеАкцизныхМарок(СтруктураПараметров);
		ЗаписатьАлкХранилищеУпаковок(СтруктураПараметров);
	Исключение
		АДОСоединение.RollBacktrans();
		АДОСоединение.Close();
		ОписаниеОшибкиДанных=ОписаниеОшибки();
		Если ОписаниеОшибкиДанных="" Тогда 
			ВызватьИсключение "Ошибка фиксации транзакции";
		иначе
			ВызватьИсключение ОписаниеОшибкиДанных;
		КонецЕсли;
	КонецПопытки;
	АДОСоединение.CommitTrans();	
	АДОСоединение.Close();
	
КонецПроцедуры



#Область ЗаписьАлкХранилищеАкцизныхМарокSQL
Процедура ЗаписьитАлкХранилищеАкцизныхМарок(СтруктураПараметров)
	Запрос = Новый Запрос;
	Запрос.Текст =ПолучитьТекстЗапросаХранилищеАкцизныхМарок();			
	Запрос.УстановитьПараметр("Узел",  СтруктураПараметров.НастройкиWMS.ПланОбменаSQLМарки);
	Запрос.УстановитьПараметр("МинимальныйНомерСообщения",СтруктураПараметров.МинимальныйНомерСообщения);
	Запрос.УстановитьПараметр("МаксимальныйНомерСообщения",СтруктураПараметров.МаксимальныйНомерСообщения);
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураТиповизаций=новый Структура;
	ВыборкаРегистраторов=РезультатЗапроса.Выбрать();
	Пока ВыборкаРегистраторов.Следующий() цикл
		ЗапросРегистратора=новый Запрос;
		МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
		ЗапросРегистратора.Текст=ПолучитьТекстЗапросаМарокПоРегистратору();
		ЗапросРегистратора.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
		ЗапросРегистратора.УстановитьПараметр("Регистратор",ВыборкаРегистраторов.Регистратор);
		РезультатЗапросаПоРегистратору= ЗапросРегистратора.Выполнить();
		Если РезультатЗапросаПоРегистратору.Пустой() Тогда 
			ТаблицаМарок=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","MarkInfo");
			СоответсвиеОтбора=новый Соответствие;
			СоответсвиеОтбора.Вставить("Registration",СформироватьСтруктуруПоискаРегистратора(ВыборкаРегистраторов.Регистратор,СтруктураПараметров));
			СоответсвиеПолейИЗначений=новый Соответствие;
			Если ВыборкаРегистраторов.Регистратор.Проведен Тогда 
				СоответсвиеПолейИЗначений.Вставить("Activity",Истина);
			иначе
				СоответсвиеПолейИЗначений.Вставить("Activity",Ложь);
			КонецЕсли;
			СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.СтрогоеЧтениеДанныхПоУсловиям(ТаблицаМарок,СоответсвиеОтбора);
			СтруктураПараметров.Recordset = СтруктураПараметров.АдоКоманда.Execute();                                                               
			Если    СтруктураПараметров.Recordset.EOF() = 0 Тогда  
				//СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.УдалениеДанныхСоСтрогимОтбором(ТаблицаМарок,СоответсвиеУдаления);
				СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.СтрогаяПерезаписьДанных(ТаблицаМарок,СоответсвиеПолейИЗначений,СоответсвиеОтбора);
				СтруктураПараметров.Recordset = СтруктураПараметров.АдоКоманда.Execute();
			КонецЕсли;
			ОбработчикПустыхДанныхЗапросаМарок(ВыборкаРегистраторов.Регистратор,МенеджерВременныхТаблиц,СтруктураПараметров);
		КонецЕсли;
		ВыборкаРегистратор=РезультатЗапросаПоРегистратору.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		Пока ВыборкаРегистратор.Следующий() цикл
			ОбработчикЗаписиРегистратораПоВыборке(СтруктураПараметров,ВыборкаРегистратор,СтруктураТиповизаций);
			СтруктураПараметров.АДОСоединение.CommitTrans();
			СтруктураПараметров.АДОСоединение.BeginTrans();
			СтруктураПараметров.СрокЗаписано=0;
			УдалениеМарокПоРегистратору(ВыборкаРегистратор, СтруктураПараметров);
			ВыборкаОрганизация=ВыборкаРегистратор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОрганизация.Следующий() цикл
				ОбработчикЗаписиОрганизацииПоВыборке(СтруктураПараметров,ВыборкаОрганизация,СтруктураТиповизаций);
				СтруктураПараметров.АДОСоединение.CommitTrans();
				СтруктураПараметров.АДОСоединение.BeginTrans();
				СтруктураПараметров.СрокЗаписано=0;
				ВыборкаАлкогольнаяПродукция=ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаАлкогольнаяПродукция.Следующий() цикл
					ОбработчикЗаписиАлкПродукцииПоВыборке(СтруктураПараметров,ВыборкаАлкогольнаяПродукция,СтруктураТиповизаций);
					СтруктураПараметров.АДОСоединение.CommitTrans();
					СтруктураПараметров.АДОСоединение.BeginTrans();
					СтруктураПараметров.СрокЗаписано=0;
					ВыборкаСправкаБ=ВыборкаАлкогольнаяПродукция.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаСправкаБ.Следующий() цикл
						ОбработчикЗаписиСправкаБПоВыборке(СтруктураПараметров,ВыборкаСправкаБ,СтруктураТиповизаций);
						СтруктураПараметров.АДОСоединение.CommitTrans();
						СтруктураПараметров.АДОСоединение.BeginTrans();
						СтруктураПараметров.СрокЗаписано=0;
						ВыборкаПунктРазгрузки=ВыборкаСправкаБ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаПунктРазгрузки.Следующий() цикл
							ОбработчикЗаписиПунктРазгрузкиПоВыборке(СтруктураПараметров,ВыборкаПунктРазгрузки,СтруктураТиповизаций);
							СтруктураПараметров.АДОСоединение.CommitTrans();
							СтруктураПараметров.АДОСоединение.BeginTrans();
							СтруктураПараметров.СрокЗаписано=0;
							ВыборкаДетальныхЗаписей=ВыборкаПунктРазгрузки.Выбрать();
							ОбработчикЗаписиМарокДетальнойЗаписиПоВыборке(СтруктураПараметров,ВыборкаДетальныхЗаписей,СтруктураТиповизаций);
							СтруктураПараметров.АДОСоединение.CommitTrans();
							СтруктураПараметров.АДОСоединение.BeginTrans();
							СтруктураПараметров.СрокЗаписано=0;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;	
			КонецЦикла;
			
		КонецЦикла;
		ЗаполнитьСрезыМарок(СтруктураПараметров,МенеджерВременныхТаблиц);
	КонецЦикла;		
КонецПроцедуры

Процедура ОбработчикПустыхДанныхЗапросаМарок(Регистратор,МенеджерВременныхТаблиц,СтруктураПараметров);
	ТаблицаМарокКПерезаполнениюСреза=новый ТаблицаЗначений;
	ТаблицаМарокКПерезаполнениюСреза.Колонки.Добавить("Марка",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
	ТаблицаМарок=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","CutLastMarkInfo");
	СоответсвиеОтбора=новый Соответствие;
	СоответсвиеОтбора.Вставить("Registration",СформироватьСтруктуруПоискаРегистратора(Регистратор,СтруктураПараметров));
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.СтрогоеЧтениеДанныхПоУсловиям(ТаблицаМарок,СоответсвиеОтбора);
	СтруктураПараметров.Recordset = СтруктураПараметров.АдоКоманда.Execute();                                                               
	Пока   СтруктураПараметров.Recordset.EOF() = 0 Цикл 
		НоваяСтрока=ТаблицаМарокКПерезаполнениюСреза.Добавить();
		НоваяСтрока.Марка= СтруктураПараметров.Recordset.Fields("Marka").Value;
		СтруктураПараметров.Recordset.MoveNext();
	КонецЦикла;
	ТаблицаМарок=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","CutFirstMarkInfo");
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.СтрогоеЧтениеДанныхПоУсловиям(ТаблицаМарок,СоответсвиеОтбора);
	СтруктураПараметров.Recordset = СтруктураПараметров.АдоКоманда.Execute();                                                               
	Пока   СтруктураПараметров.Recordset.EOF() = 0 Цикл 
		НоваяСтрока=ТаблицаМарокКПерезаполнениюСреза.Добавить();
		НоваяСтрока.Марка= СтруктураПараметров.Recordset.Fields("Marka").Value;
		СтруктураПараметров.Recordset.MoveNext();
	КонецЦикла;
	ПодменитьМаркиВМенеджере(ТаблицаМарокКПерезаполнениюСреза,МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ПодменитьМаркиВМенеджере(ТаблицаМарокКПерезаполнениюСреза,МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВтИтоговаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркиСрезов.Марка
	|ПОМЕСТИТЬ МаркиДанные
	|ИЗ
	|	&МаркиСрезов КАК МаркиСрезов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркиДанные.Марка
	|ПОМЕСТИТЬ ВтИтоговаяТаблица
	|ИЗ
	|	МаркиДанные КАК МаркиДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	МаркиДанные.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаркиДанные";
	
	Запрос.УстановитьПараметр("МаркиСрезов",ТаблицаМарокКПерезаполнениюСреза);
	РезультатЗапроса = Запрос.Выполнить();
КонецПроцедуры

Процедура ЗаполнитьСрезыМарок(СтруктураПараметров,МенеджерВременныхТаблиц)
	ВременнаяТаблицаМарок= СоздатьВременнуюТаблицуДляЗаписиМарок(СтруктураПараметров,Истина);
	ТаблицаРегистраторов=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","DocumentRegistration");
	СоответствиеЗаписиМарок=новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВтИтоговаяТаблица.Марка
	|ИЗ
	|	ВтИтоговаяТаблица КАК ВтИтоговаяТаблица";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//Пока ВыборкаРегистратор.Следующий() Цикл
	//		Если  ВыборкаРегистратор.Регистратор<>Неопределено Тогда 
	//		СтруктураТиповизации=итWMSСлужебныеПроцедурыИФункции.ПолучитьТипИИмяМетаданныхИзПолногоИмени(ВыборкаРегистратор.Регистратор.Метаданные().ПолноеИмя());
	//		Если СтруктураТиповизации=Неопределено Тогда 
	//			ВызватьИсключение "ошибка типовизации";
	//		КонецЕсли;
	//		СтруктураТиповизации.Вставить("Синоним",ВыборкаРегистратор.Регистратор.Метаданные().Синоним);
	//		ГУИДРегистратора=ВыборкаРегистратор.Регистратор.УникальныйИдентификатор();
	//		СоответсвиеОтбора = ПолучитьСоответсвиеПоискаПоGUID(ГУИДРегистратора);
	//		СоответсвиеЗаписи = ПолучитьСоответсвиеЗаписиРегистратора(ВыборкаРегистратор, ГУИДРегистратора, СтруктураТиповизации);
	//		ЗаписьОбвновлениеСсылки(СоответсвиеЗаписи, СоответсвиеОтбора, СтруктураПараметров, ТаблицаРегистраторов);
	//		СтруктураПараметров.АДОСоединение.CommitTrans();
	//		СтруктураПараметров.АДОСоединение.BeginTrans();
	//		СтруктураПараметров.СрокЗаписано=0;
	//	КонецЕсли;
	//	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		СоответствиеЗаписиМарок.Вставить("Marka",ВыборкаДетальныеЗаписи.Марка);
		ИсполнитьSQLЗапрос(СтруктураПараметров,СтруктураПараметров.Конструктор.ЗаписьДанныхПострочно(ВременнаяТаблицаМарок,СоответствиеЗаписиМарок));
	КонецЦикла;
	//КонецЦикла;
	МакетЗапросов=СтруктураПараметров.Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL");
	ТекстЗапросаСрезПоследних=СокрЛП(МакетЗапросов.Области.СрезПоследнихМарки.Текст);
	ТекстЗапросаСрезПервых=СокрЛП(МакетЗапросов.Области.СрезПервыхМарки.Текст);
	ТекстЗапросаСрезПоследних=СтрЗаменить(ТекстЗапросаСрезПоследних,"%NameTemp%",ВременнаяТаблицаМарок);
	ТекстЗапросаСрезПервых=СтрЗаменить(ТекстЗапросаСрезПервых,"%NameTemp%",ВременнаяТаблицаМарок);
	Попытка
		ИсполнитьSQLЗапрос(СтруктураПараметров,ТекстЗапросаСрезПоследних);
	Исключение
		РежимОжидания(25);
		ИсполнитьSQLЗапрос(СтруктураПараметров,ТекстЗапросаСрезПоследних);
	КонецПопытки;
	Попытка
		ИсполнитьSQLЗапрос(СтруктураПараметров,ТекстЗапросаСрезПервых);
	Исключение
		РежимОжидания(25);
		ИсполнитьSQLЗапрос(СтруктураПараметров,ТекстЗапросаСрезПервых);	
	КонецПопытки;
	ИсполнитьSQLЗапрос(СтруктураПараметров,СтруктураПараметров.Конструктор.УдалениеВременнойТаблицы(ВременнаяТаблицаМарок));
	СтруктураПараметров.АДОСоединение.CommitTrans();
	СтруктураПараметров.АДОСоединение.BeginTrans();
	СтруктураПараметров.СрокЗаписано=0;
	
КонецПроцедуры

Процедура ЗаполнениеТаблицыДанныхМаркиСрезов(Знач ВыборкаДетальныеЗаписи, Знач СтруктураПараметров, Знач СтруктураТиповизации,  СоответствиеЗаписиМарок,ВременнаяТаблицаМарок)
	СоответствиеЗаписиМарок.Вставить("Registration_GUID",ВыборкаДетальныеЗаписи.Регистратор.УникальныйИдентификатор());
	СоответствиеЗаписиМарок.Вставить("Registration_TypeValue",СтруктураТиповизации.ИмяМетаданных);
	СоответствиеЗаписиМарок.Вставить("Registration_TypeMetadata",СтруктураТиповизации.ТипМетаданных);
	СоответствиеЗаписиМарок.Вставить("Registration_Name",СтруктураТиповизации.Синоним);
	СоответствиеЗаписиМарок.Вставить("Marka",ВыборкаДетальныеЗаписи.Марка);
	СоответствиеЗаписиМарок.Вставить("GTIN",ВыборкаДетальныеЗаписи.Упаковка);
	СоответствиеЗаписиМарок.Вставить("OutMark",ВыборкаДетальныеЗаписи.ОтметкаВыбытия);
	СоответствиеЗаписиМарок.Вставить("DateAndTime",ВыборкаДетальныеЗаписи.Период);
	СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	                                   
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.ЗаписьДанныхПострочно(ВременнаяТаблицаМарок,СоответствиеЗаписиМарок);
	СтруктураПараметров.АдоКоманда.Execute();
КонецПроцедуры

Процедура ОбработчикЗаписиОрганизацииПоВыборке(СтруктураПараметров,Выборка,СтруктураТиповизаций)
	ТаблицаДанных=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","Organizations");
	СтруктураТиповизации=итWMSСлужебныеПроцедурыИФункции.ПолучитьТипИИмяМетаданныхИзПолногоИмени(Выборка.Организация.Метаданные().ПолноеИмя());
	Если СтруктураТиповизации=Неопределено Тогда 
		ВызватьИсключение "ошибка типовизации";
	КонецЕсли;
	СтруктураТиповизации.Вставить("Синоним",Выборка.Организация.Метаданные().Синоним);
	СтруктураТиповизаций.Вставить("Организация",СтруктураТиповизации);
	ГУИДОрганизации=Выборка.Организация.УникальныйИдентификатор();
	СоответсвиеОтбора=ПолучитьСоответсвиеПоискаПоGUID(ГУИДОрганизации);	
	СоответсвиеЗаписи=новый Соответствие;
	СоответсвиеЗаписи.Вставить("Link.GUID",ГУИДОрганизации);
	СоответсвиеЗаписи.Вставить("Link.TypeValue",СтруктураТиповизации.ИмяМетаданных);
	СоответсвиеЗаписи.Вставить("Link.TypeMetadata",СтруктураТиповизации.ТипМетаданных);
	СоответсвиеЗаписи.Вставить("Link.Name",СтруктураТиповизации.Синоним);
	СоответсвиеЗаписи.Вставить("Code",Выборка.Организация.Код);
	СоответсвиеЗаписи.Вставить("Name",Выборка.Организация.Наименование);
	СоответсвиеЗаписи.Вставить("GUID",ГУИДОрганизации);
	ЗаписьОбвновлениеСсылки(СоответсвиеЗаписи, СоответсвиеОтбора, СтруктураПараметров, ТаблицаДанных);
КонецПроцедуры

Процедура ОбработчикЗаписиАлкПродукцииПоВыборке(СтруктураПараметров,Выборка,СтруктураТиповизаций)
	ТаблицаДанных=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","ClassifierAlcoholicProducts");
	СтруктураТиповизации=итWMSСлужебныеПроцедурыИФункции.ПолучитьТипИИмяМетаданныхИзПолногоИмени(Выборка.АлкогольнаяПродукция.Метаданные().ПолноеИмя());
	Если СтруктураТиповизации=Неопределено Тогда 
		ВызватьИсключение "ошибка типовизации";
	КонецЕсли;
	СтруктураТиповизации.Вставить("Синоним",Выборка.АлкогольнаяПродукция.Метаданные().Синоним);
	СтруктураТиповизаций.Вставить("АлкогольнаяПродукция",СтруктураТиповизации);
	ГУИДАлкПродукции=Выборка.АлкогольнаяПродукция.УникальныйИдентификатор();
	СоответсвиеОтбора=ПолучитьСоответсвиеПоискаПоGUID(ГУИДАлкПродукции);
	СоответсвиеЗаписи=новый Соответствие;
	СоответсвиеЗаписи.Вставить("Link.GUID",ГУИДАлкПродукции);
	СоответсвиеЗаписи.Вставить("Link.TypeValue",СтруктураТиповизации.ИмяМетаданных);
	СоответсвиеЗаписи.Вставить("Link.TypeMetadata",СтруктураТиповизации.ТипМетаданных);
	СоответсвиеЗаписи.Вставить("Link.Name",СтруктураТиповизации.Синоним);
	СоответсвиеЗаписи.Вставить("Code",Выборка.АлкогольнаяПродукция.Код);
	СоответсвиеЗаписи.Вставить("Name",Выборка.АлкогольнаяПродукция.Наименование);
	СоответсвиеЗаписи.Вставить("Manufacturer",Выборка.АлкогольнаяПродукция.Производитель);
	СоответсвиеЗаписи.Вставить("GUID",ГУИДАлкПродукции);
	ЗаписьОбвновлениеСсылки(СоответсвиеЗаписи, СоответсвиеОтбора, СтруктураПараметров, ТаблицаДанных);	
КонецПроцедуры

Процедура ОбработчикЗаписиСправкаБПоВыборке(СтруктураПараметров,Выборка,СтруктураТиповизаций)
	ТаблицаДанных=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","ClassificationReferencesAB");
	СтруктураТиповизации=итWMSСлужебныеПроцедурыИФункции.ПолучитьТипИИмяМетаданныхИзПолногоИмени(Выборка.СправкаБ.Метаданные().ПолноеИмя());
	Если СтруктураТиповизации=Неопределено Тогда 
		ВызватьИсключение "ошибка типовизации";
	КонецЕсли;
	СтруктураТиповизации.Вставить("Синоним",Выборка.СправкаБ.Метаданные().Синоним);
	СтруктураТиповизаций.Вставить("СправкаБ",СтруктураТиповизации);
	ГУИДСправкаБ=Выборка.СправкаБ.УникальныйИдентификатор();
	СоответсвиеОтбора=ПолучитьСоответсвиеПоискаПоGUID(ГУИДСправкаБ);
	СоответсвиеЗаписи=новый Соответствие;
	СоответсвиеЗаписи.Вставить("Link.GUID",ГУИДСправкаБ);
	СоответсвиеЗаписи.Вставить("Link.TypeValue",СтруктураТиповизации.ИмяМетаданных);
	СоответсвиеЗаписи.Вставить("Link.TypeMetadata",СтруктураТиповизации.ТипМетаданных);
	СоответсвиеЗаписи.Вставить("Link.Name",СтруктураТиповизации.Синоним);
	СоответсвиеЗаписи.Вставить("Code",Выборка.СправкаБ.Код);
	СоответсвиеЗаписи.Вставить("Name",Выборка.СправкаБ.Наименование);
	СоответсвиеЗаписи.Вставить("TypeReferences",Строка(Выборка.СправкаБ.ТипСправки));
	СоответсвиеЗаписи.Вставить("IdentificationTTN",Строка(Выборка.СправкаБ.РасширеннаяИнформация.ИдентификаторТТН));
	СоответсвиеЗаписи.Вставить("NumberFixationTTN",Строка(Выборка.СправкаБ.РасширеннаяИнформация.НомерФиксацииТТН));
	СоответсвиеЗаписи.Вставить("GUID",ГУИДСправкаБ);
	ЗаписьОбвновлениеСсылки(СоответсвиеЗаписи, СоответсвиеОтбора, СтруктураПараметров, ТаблицаДанных);
КонецПроцедуры

Процедура ОбработчикЗаписиПунктРазгрузкиПоВыборке(СтруктураПараметров,Выборка,СтруктураТиповизаций)
	ТаблицаДанных=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","DischargePoint");
	СтруктураТиповизации=итWMSСлужебныеПроцедурыИФункции.ПолучитьТипИИмяМетаданныхИзПолногоИмени(Выборка.ПунктРазгрузки.Метаданные().ПолноеИмя());
	Если СтруктураТиповизации=Неопределено Тогда 
		ВызватьИсключение "ошибка типовизации";
	КонецЕсли;
	СтруктураТиповизации.Вставить("Синоним",Выборка.ПунктРазгрузки.Метаданные().Синоним);
	СтруктураТиповизаций.Вставить("ПунктРазгрузки",СтруктураТиповизации);
	ГУИдПунктРазгрузки=Выборка.ПунктРазгрузки.УникальныйИдентификатор();
	СоответсвиеОтбора=ПолучитьСоответсвиеПоискаПоGUID(ГУИдПунктРазгрузки);
	СоответсвиеЗаписи=новый Соответствие;
	СоответсвиеЗаписи.Вставить("Link.GUID",ГУИдПунктРазгрузки);
	СоответсвиеЗаписи.Вставить("Link.TypeValue",СтруктураТиповизации.ИмяМетаданных);
	СоответсвиеЗаписи.Вставить("Link.TypeMetadata",СтруктураТиповизации.ТипМетаданных);
	СоответсвиеЗаписи.Вставить("Link.Name",СтруктураТиповизации.Синоним);
	СоответсвиеЗаписи.Вставить("Code",Выборка.ПунктРазгрузки.Код);
	СоответсвиеЗаписи.Вставить("Name",Выборка.ПунктРазгрузки.Наименование);
	СоответсвиеЗаписи.Вставить("GUID",ГУИдПунктРазгрузки);
	ЗаписьОбвновлениеСсылки(СоответсвиеЗаписи, СоответсвиеОтбора, СтруктураПараметров, ТаблицаДанных);
КонецПроцедуры

Процедура ОбработчикЗаписиМарокДетальнойЗаписиПоВыборке(СтруктураПараметров,Выборка,СтруктураТиповизаций)
	//ТаблицаДанных=СформироватоТаблицуДляЗаписиМарокSQL();
	СоответствиеЗаписиМарок=новый Соответствие;
	ТаблицаМарок=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","MarkInfo");
	ВременнаяТаблицаМарок=СоздатьВременнуюТаблицуДляЗаписиМарок(СтруктураПараметров);
	Пока Выборка.Следующий() цикл
		СоответствиеЗаписиМарок.Вставить("Activity",Выборка.Активность);
		СоответствиеЗаписиМарок.Вставить("Registration_GUID",Выборка.Регистратор.УникальныйИдентификатор());
		СоответствиеЗаписиМарок.Вставить("Registration_TypeValue",СтруктураТиповизаций.Регистратор.ИмяМетаданных);
		СоответствиеЗаписиМарок.Вставить("Registration_TypeMetadata",СтруктураТиповизаций.Регистратор.ТипМетаданных);
		СоответствиеЗаписиМарок.Вставить("Registration_Name",СтруктураТиповизаций.Регистратор.Синоним);
		СоответствиеЗаписиМарок.Вставить("Marka",Выборка.Марка);
		СоответствиеЗаписиМарок.Вставить("GTIN",Выборка.Упаковка);
		////////////Описание справки б	
		СоответствиеЗаписиМарок.Вставить("ApplivationB_GUID",Выборка.СправкаБ.УникальныйИдентификатор());
		СоответствиеЗаписиМарок.Вставить("ApplivationB_TypeValue",СтруктураТиповизаций.СправкаБ.ИмяМетаданных);
		СоответствиеЗаписиМарок.Вставить("ApplivationB_TypeMetadata",СтруктураТиповизаций.СправкаБ.ТипМетаданных);
		СоответствиеЗаписиМарок.Вставить("ApplivationB_Name",СтруктураТиповизаций.СправкаБ.Синоним);
		////////////Описание Алкогольной продукции 	
		СоответствиеЗаписиМарок.Вставить("ProductionAlcohol_GUID",Выборка.АлкогольнаяПродукция.УникальныйИдентификатор());
		СоответствиеЗаписиМарок.Вставить("ProductionAlcohol_TypeValue",СтруктураТиповизаций.АлкогольнаяПродукция.ИмяМетаданных);
		СоответствиеЗаписиМарок.Вставить("ProductionAlcohol_TypeMetadata",СтруктураТиповизаций.АлкогольнаяПродукция.ТипМетаданных);
		СоответствиеЗаписиМарок.Вставить("ProductionAlcohol_Name",СтруктураТиповизаций.АлкогольнаяПродукция.Синоним);
		////////////Описание Организации	
		СоответствиеЗаписиМарок.Вставить("Organization_GUID",Выборка.Организация.УникальныйИдентификатор());
		СоответствиеЗаписиМарок.Вставить("Organization_TypeValue",СтруктураТиповизаций.Организация.ИмяМетаданных);
		СоответствиеЗаписиМарок.Вставить("Organization_TypeMetadata",СтруктураТиповизаций.Организация.ТипМетаданных);
		СоответствиеЗаписиМарок.Вставить("Organization_Name",СтруктураТиповизаций.Организация.Синоним);
		////////////Описание Пунка Разгрузки	
		СоответствиеЗаписиМарок.Вставить("DeliveryPoint_GUID",Выборка.ПунктРазгрузки.УникальныйИдентификатор());
		СоответствиеЗаписиМарок.Вставить("DeliveryPoint_TypeValue",СтруктураТиповизаций.ПунктРазгрузки.ИмяМетаданных);
		СоответствиеЗаписиМарок.Вставить("DeliveryPoint_TypeMetadata",СтруктураТиповизаций.ПунктРазгрузки.ТипМетаданных);
		СоответствиеЗаписиМарок.Вставить("DeliveryPoint_Name",СтруктураТиповизаций.ПунктРазгрузки.Синоним);
		
		СоответствиеЗаписиМарок.Вставить("OutMark",Выборка.ОтметкаВыбытия);
		СоответствиеЗаписиМарок.Вставить("DateAndTime",Выборка.Период);
		СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	
		СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.ЗаписьДанныхПострочно(ВременнаяТаблицаМарок,СоответствиеЗаписиМарок);
		СтруктураПараметров.АдоКоманда.Execute();
	КонецЦикла;
	СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	
	СформироватьСоответствиеПолейЗаписиМарок=СформироватьСоответствиеПолейЗаписиМарок(Ложь);
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.ВставитьДанныеИзВРеменнойТаблицы(ТаблицаМарок,ВременнаяТаблицаМарок,СформироватьСоответствиеПолейЗаписиМарок);
	СтруктураПараметров.АдоКоманда.Execute();
	СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.УдалениеВременнойТаблицы(ВременнаяТаблицаМарок);
	СтруктураПараметров.АдоКоманда.Execute();
	СтруктураПараметров.АДОСоединение.CommitTrans();
	СтруктураПараметров.АДОСоединение.BeginTrans();
	СтруктураПараметров.СрокЗаписано=0;
КонецПроцедуры

Процедура УдалениеМарокПоРегистратору( Выборка,  СтруктураПараметров)
	
	ТаблицаМарок=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","MarkInfo");
	СоответсвиеУдаления=новый Соответствие;
	СоответсвиеУдаления.Вставить("Registration",СформироватьСтруктуруПоискаРегистратора(Выборка.Регистратор,СтруктураПараметров));
	СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.УдалениеДанныхСоСтрогимОтбором(ТаблицаМарок,СоответсвиеУдаления);
	СтруктураПараметров.АдоКоманда.Execute();
	СтруктураПараметров.АДОСоединение.CommitTrans();
	СтруктураПараметров.АДОСоединение.BeginTrans();
	СтруктураПараметров.СрокЗаписано=0;
	
КонецПроцедуры


#КонецОбласти

#Область ЗаписьАлкХранилищеАкцизныхУпаковокSQL

Процедура ЗаписатьАлкХранилищеУпаковок(СтруктураПараметров)
	СтруктураТиповизаций=новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапромаХранилищаУпаковок();
	Запрос.УстановитьПараметр("Узел", СтруктураПараметров.НастройкиWMS.ПланОбменаSQLМарки);
	Запрос.УстановитьПараметр("МинимальныйНомерСообщения",СтруктураПараметров.МинимальныйНомерСообщения);
	Запрос.УстановитьПараметр("МаксимальныйНомерСообщения",СтруктураПараметров.МаксимальныйНомерСообщения);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРегистраторов=РезультатЗапроса.Выбрать();
	Пока ВыборкаРегистраторов.Следующий() цикл
		ЗапросПоРегистратору=новый Запрос;
		МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
		ЗапросПоРегистратору.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
		ЗапросПоРегистратору.Текст=ЗапросПоРегистраторуУпаковки();
		ЗапросПоРегистратору.УстановитьПараметр("Регистратор", ВыборкаРегистраторов.Регистратор);
		РезультатЗапросаРегистратора=ЗапросПоРегистратору.Выполнить();
		Если РезультатЗапросаРегистратора.Пустой() Тогда 
			ТаблицаУпаковок=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","PackageStorage");
			СоответсвиеОтбора=новый Соответствие;
			СоответсвиеОтбора.Вставить("Registration",СформироватьСтруктуруПоискаРегистратора(ВыборкаРегистраторов.Регистратор,СтруктураПараметров));
			СоответсвиеПолейИЗначений=новый Соответствие;
			Если ВыборкаРегистраторов.Регистратор.Проведен Тогда 
				СоответсвиеПолейИЗначений.Вставить("Activity",Истина);
			иначе
				СоответсвиеПолейИЗначений.Вставить("Activity",Ложь);
			КонецЕсли;
			СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.СтрогоеЧтениеДанныхПоУсловиям(ТаблицаУпаковок,СоответсвиеОтбора);
			СтруктураПараметров.Recordset = СтруктураПараметров.АдоКоманда.Execute();                                                               
			Если    СтруктураПараметров.Recordset.EOF() = 0 Тогда  
				СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.СтрогаяПерезаписьДанных(ТаблицаУпаковок,СоответсвиеПолейИЗначений,СоответсвиеОтбора);
				СтруктураПараметров.Recordset = СтруктураПараметров.АдоКоманда.Execute();
			КонецЕсли;
			ОбработчикПустыхДанныхЗапросаУпаковок(ВыборкаРегистраторов.Регистратор,МенеджерВременныхТаблиц,СтруктураПараметров);
		КонецЕсли;
		
		ВыборкаРегистратор = РезультатЗапросаРегистратора.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРегистратор.Следующий() Цикл
			ОбработчикЗаписиРегистратораПоВыборке(СтруктураПараметров,ВыборкаРегистратор,СтруктураТиповизаций);
			СтруктураПараметров.АДОСоединение.CommitTrans();
			СтруктураПараметров.АДОСоединение.BeginTrans();
			СтруктураПараметров.СрокЗаписано=0;
			УдалениеУпаковокПоРегистратору(ВыборкаРегистратор, СтруктураПараметров);
			ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();	
			ОбработчикЗаписиУпаковокДетальнойЗаписиПоВыборке(СтруктураПараметров,ВыборкаДетальныеЗаписи,СтруктураТиповизаций);
			СтруктураПараметров.АДОСоединение.CommitTrans();
			СтруктураПараметров.АДОСоединение.BeginTrans();
			СтруктураПараметров.СрокЗаписано=0;
		КонецЦикла;
		ЗаполнитьСрезыУпаковок(СтруктураПараметров,МенеджерВременныхТаблиц);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОбработчикПустыхДанныхЗапросаУпаковок(Регистратор,МенеджерВременныхТаблиц,СтруктураПараметров)
	ТаблицаУпаковокКПерезаполнениюСреза=новый ТаблицаЗначений;
	ТаблицаУпаковокКПерезаполнениюСреза.Колонки.Добавить("Упаковка",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
	ТаблицаУпаковок=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","CutLastPackageStorage");
	СоответсвиеОтбора=новый Соответствие;
	СоответсвиеОтбора.Вставить("Registration",СформироватьСтруктуруПоискаРегистратора(Регистратор,СтруктураПараметров));
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.СтрогоеЧтениеДанныхПоУсловиям(ТаблицаУпаковок,СоответсвиеОтбора);
	СтруктураПараметров.Recordset = СтруктураПараметров.АдоКоманда.Execute();                                                               
	Пока   СтруктураПараметров.Recordset.EOF() = 0 Цикл 
		НоваяСтрока=ТаблицаУпаковокКПерезаполнениюСреза.Добавить();
		НоваяСтрока.Упаковка= СтруктураПараметров.Recordset.Fields("Package").Value;
		СтруктураПараметров.Recordset.MoveNext();
	КонецЦикла;
	ТаблицаУпаковок=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","CutFirstPackageStorage");
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.СтрогоеЧтениеДанныхПоУсловиям(ТаблицаУпаковок,СоответсвиеОтбора);
	СтруктураПараметров.Recordset = СтруктураПараметров.АдоКоманда.Execute();                                                               
	Пока   СтруктураПараметров.Recordset.EOF() = 0 Цикл 
		НоваяСтрока=ТаблицаУпаковокКПерезаполнениюСреза.Добавить();
		НоваяСтрока.Упаковка= СтруктураПараметров.Recordset.Fields("Package").Value;
		СтруктураПараметров.Recordset.MoveNext();
	КонецЦикла;
	ПодменитьУпаковкиВМенеджере(ТаблицаУпаковокКПерезаполнениюСреза,МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ПодменитьУпаковкиВМенеджере(ТаблицаУпаковокКПерезаполнениюСреза,МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ИтоговыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиСрезов.Упаковка
	|ПОМЕСТИТЬ УпаковкиДанные
	|ИЗ
	|	&УпаковкиСрезов КАК УпаковкиСрезов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиДанные.Упаковка
	|ПОМЕСТИТЬ ИтоговыеДанные
	|ИЗ
	|	УпаковкиДанные КАК УпаковкиДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковкиДанные.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ УпаковкиДанные";
	
	Запрос.УстановитьПараметр("УпаковкиСрезов",ТаблицаУпаковокКПерезаполнениюСреза);
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОбработчикЗаписиУпаковокДетальнойЗаписиПоВыборке(СтруктураПараметров,Выборка,СтруктураТиповизаций)
	СоответсвиеЗаписиУпаковок=новый Соответствие;
	ТаблицаУпаковок=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","PackageStorage");
	ВременнаяТаблицаУпаковок=СоздатьВременнуюТаблицуДляЗаписиУпаковок(СтруктураПараметров);
	Пока Выборка.Следующий() цикл		
		СоответсвиеЗаписиУпаковок.Вставить("Activity",Выборка.Активность);
		СоответсвиеЗаписиУпаковок.Вставить("Registration_GUID" , Выборка.Регистратор.УникальныйИдентификатор());
		СоответсвиеЗаписиУпаковок.Вставить("Registration_TypeValue", СтруктураТиповизаций.Регистратор.ИмяМетаданных);
		СоответсвиеЗаписиУпаковок.Вставить("Registration_TypeMetadata", СтруктураТиповизаций.Регистратор.ТипМетаданных);
		СоответсвиеЗаписиУпаковок.Вставить("Registration_Name", СтруктураТиповизаций.Регистратор.Синоним);
		СоответсвиеЗаписиУпаковок.Вставить("Package", Выборка.Упаковка);
		СоответсвиеЗаписиУпаковок.Вставить("PackagingHierarchy", Выборка.ИерархияУпаковки);
		СоответсвиеЗаписиУпаковок.Вставить("Name", Выборка.Наименование);
		СоответсвиеЗаписиУпаковок.Вставить("DateAndTime", Выборка.Период);
		СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	
		СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.ЗаписьДанныхПострочно(ВременнаяТаблицаУпаковок,СоответсвиеЗаписиУпаковок);
		СтруктураПараметров.АдоКоманда.Execute();
	КонецЦикла;
	СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	
	СоответствиеПолейЗаписиУпаковок=СформироватьСоответствиеПолейЗаписиУпаковок(Ложь);
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.ВставитьДанныеИзВРеменнойТаблицы(ТаблицаУпаковок,ВременнаяТаблицаУпаковок,СоответствиеПолейЗаписиУпаковок);
	СтруктураПараметров.АдоКоманда.Execute();
	СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.УдалениеВременнойТаблицы(ВременнаяТаблицаУпаковок);
	СтруктураПараметров.АдоКоманда.Execute();
	СтруктураПараметров.АДОСоединение.CommitTrans();
	СтруктураПараметров.АДОСоединение.BeginTrans();
	СтруктураПараметров.СрокЗаписано=0;
	
КонецПроцедуры

Процедура УдалениеУпаковокПоРегистратору(Выборка, СтруктураПараметров)
	
	ТаблицаУпаковок=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","PackageStorage");
	СоответсвиеУдаления=новый Соответствие;
	СоответсвиеУдаления.Вставить("Registration",СформироватьСтруктуруПоискаРегистратора(Выборка.Регистратор,СтруктураПараметров));
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.УдалениеДанныхСоСтрогимОтбором(ТаблицаУпаковок,СоответсвиеУдаления);
	СтруктураПараметров.Recordset = СтруктураПараметров.АдоКоманда.Execute(); 
	СтруктураПараметров.АДОСоединение.CommitTrans();
	СтруктураПараметров.АДОСоединение.BeginTrans();
	СтруктураПараметров.СрокЗаписано=0;
	
КонецПроцедуры


Процедура ЗаполнитьСрезыУпаковок(СтруктураПараметров,МенеджерВременныхТаблиц)
	ТаблицаРегистраторов=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","DocumentRegistration");
	ВременнаяТаблицаУпаковок=СоздатьВременнуюТаблицуДляЗаписиУпаковок(СтруктураПараметров,Истина);
	СоответсвиеЗаписиУпаковок=новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтоговыеДанные.Упаковка
	|ИЗ
	|	ИтоговыеДанные КАК ИтоговыеДанные";
	РезультатЗапроса = Запрос.Выполнить();	
	//ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока ВыборкаРегистратор.Следующий() Цикл
	//	Если  ВыборкаРегистратор.Регистратор<>Неопределено Тогда 
	//		СтруктураТиповизации=итWMSСлужебныеПроцедурыИФункции.ПолучитьТипИИмяМетаданныхИзПолногоИмени(ВыборкаРегистратор.Регистратор.Метаданные().ПолноеИмя());
	//		Если СтруктураТиповизации=Неопределено Тогда 
	//			ВызватьИсключение "ошибка типовизации";
	//		КонецЕсли;
	//		СтруктураТиповизации.Вставить("Синоним",ВыборкаРегистратор.Регистратор.Метаданные().Синоним);
	//		ГУИДРегистратора=ВыборкаРегистратор.Регистратор.УникальныйИдентификатор();
	//		СоответсвиеОтбора = ПолучитьСоответсвиеПоискаПоGUID(ГУИДРегистратора);
	//		СоответсвиеЗаписи = ПолучитьСоответсвиеЗаписиРегистратора(ВыборкаРегистратор, ГУИДРегистратора, СтруктураТиповизации);
	//		ЗаписьОбвновлениеСсылки(СоответсвиеЗаписи, СоответсвиеОтбора, СтруктураПараметров, ТаблицаРегистраторов);
	//	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоответсвиеЗаписиУпаковок.Вставить("Package",ВыборкаДетальныеЗаписи.Упаковка);
		СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	
		СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.ЗаписьДанныхПострочно(ВременнаяТаблицаУпаковок,СоответсвиеЗаписиУпаковок);
		СтруктураПараметров.АдоКоманда.Execute();
	КонецЦикла;
	//КонецЦикла;
	МакетЗапросов=СтруктураПараметров.Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL");
	ТекстЗапросаСрезПоследних=СокрЛП(МакетЗапросов.Области.СрезПоследнихУпаковки.Текст);
	ТекстЗапросаСрезПервых=СокрЛП(МакетЗапросов.Области.СрезПервыхУпаковки.Текст);
	ТекстЗапросаСрезПоследних=СтрЗаменить(ТекстЗапросаСрезПоследних,"%NameTemp%",ВременнаяТаблицаУпаковок);
	ТекстЗапросаСрезПервых=СтрЗаменить(ТекстЗапросаСрезПервых,"%NameTemp%",ВременнаяТаблицаУпаковок);
	Попытка
		ИсполнитьSQLЗапрос(СтруктураПараметров,ТекстЗапросаСрезПоследних);
	Исключение
		РежимОжидания(25);
		ИсполнитьSQLЗапрос(СтруктураПараметров,ТекстЗапросаСрезПоследних);
	КонецПопытки;
	Попытка
		ИсполнитьSQLЗапрос(СтруктураПараметров,ТекстЗапросаСрезПервых);
	Исключение
		РежимОжидания(25);
		ИсполнитьSQLЗапрос(СтруктураПараметров,ТекстЗапросаСрезПервых);
	КонецПопытки;
	ИсполнитьSQLЗапрос(СтруктураПараметров,СтруктураПараметров.Конструктор.УдалениеВременнойТаблицы(ВременнаяТаблицаУпаковок));
	СтруктураПараметров.АДОСоединение.CommitTrans();
	СтруктураПараметров.АДОСоединение.BeginTrans();
	СтруктураПараметров.СрокЗаписано=0;
КонецПроцедуры


#КонецОбласти

#Область СлужебныеФункцииПроцедурыМарокSQL

Функция ПолучитьТекстЗапросаХранилищеАкцизныхМарок()
	Текст = "ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарокИзменения.Узел,
	|	МАКСИМУМ(алкХранилищеАкцизныхМарокИзменения.НомерСообщения) КАК НомерСообщения,
	|	алкХранилищеАкцизныхМарокИзменения.Регистратор
	|ПОМЕСТИТЬ ВтДанныеПоСообщениям
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок.Изменения КАК алкХранилищеАкцизныхМарокИзменения
	|ГДЕ
	|	алкХранилищеАкцизныхМарокИзменения.Узел = &Узел
	|	И алкХранилищеАкцизныхМарокИзменения.НомерСообщения МЕЖДУ &МинимальныйНомерСообщения И &МаксимальныйНомерСообщения
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеАкцизныхМарокИзменения.Узел,
	|	алкХранилищеАкцизныхМарокИзменения.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВтДанныеПоСообщениям.Узел) КАК Узел,
	|	МАКСИМУМ(ВтДанныеПоСообщениям.НомерСообщения) КАК НомерСообщения,
	|	ВтДанныеПоСообщениям.Регистратор
	|ИЗ
	|	ВтДанныеПоСообщениям КАК ВтДанныеПоСообщениям
	|ГДЕ
	|	ВтДанныеПоСообщениям.НомерСообщения = &МинимальныйНомерСообщения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеПоСообщениям.Регистратор";
	Возврат Текст;
КонецФункции

Функция ПолучитьТекстЗапромаХранилищаУпаковок()
	Текст = "ВЫБРАТЬ
	|	алкХранилищеУпаковокИзменения.Узел,
	|	МАКСИМУМ(алкХранилищеУпаковокИзменения.НомерСообщения) КАК НомерСообщения,
	|	алкХранилищеУпаковокИзменения.Регистратор
	|ПОМЕСТИТЬ ВтДанныеСообщений
	|ИЗ
	|	РегистрСведений.алкХранилищеУпаковок.Изменения КАК алкХранилищеУпаковокИзменения
	|ГДЕ
	|	алкХранилищеУпаковокИзменения.Узел = &Узел
	|	И алкХранилищеУпаковокИзменения.НомерСообщения МЕЖДУ &МинимальныйНомерСообщения И &МаксимальныйНомерСообщения
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеУпаковокИзменения.Узел,
	|	алкХранилищеУпаковокИзменения.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВтДанныеСообщений.Узел) КАК Узел,
	|	МАКСИМУМ(ВтДанныеСообщений.НомерСообщения) КАК НомерСообщения,
	|	ВтДанныеСообщений.Регистратор
	|ИЗ
	|	ВтДанныеСообщений КАК ВтДанныеСообщений
	|ГДЕ
	|	ВтДанныеСообщений.НомерСообщения = &МинимальныйНомерСообщения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеСообщений.Регистратор";
	Возврат Текст;
КонецФункции

Функция ПолучитьТекстЗапросаМарокПоРегистратору()
	Текст="ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарок.Период,
	|	алкХранилищеАкцизныхМарок.Регистратор КАК Регистратор,
	|	алкХранилищеАкцизныхМарок.НомерСтроки,
	|	алкХранилищеАкцизныхМарок.Активность,
	|	алкХранилищеАкцизныхМарок.Марка,
	|	алкХранилищеАкцизныхМарок.Упаковка,
	|	алкХранилищеАкцизныхМарок.СправкаБ КАК СправкаБ,
	|	алкХранилищеАкцизныхМарок.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	алкХранилищеАкцизныхМарок.Организация КАК Организация,
	|	алкХранилищеАкцизныхМарок.ПунктРазгрузки КАК ПунктРазгрузки,
	|	алкХранилищеАкцизныхМарок.ОтметкаВыбытия
	|ПОМЕСТИТЬ ВтИтоговаяТаблица
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок КАК алкХранилищеАкцизныхМарок
	|ГДЕ
	|	алкХранилищеАкцизныхМарок.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтоговаяТаблица.Период,
	|	ВтИтоговаяТаблица.Регистратор КАК Регистратор,
	|	ВтИтоговаяТаблица.НомерСтроки,
	|	ВтИтоговаяТаблица.Активность,
	|	ВтИтоговаяТаблица.Марка,
	|	ВтИтоговаяТаблица.Упаковка,
	|	ВтИтоговаяТаблица.СправкаБ КАК СправкаБ,
	|	ВтИтоговаяТаблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ВтИтоговаяТаблица.Организация КАК Организация,
	|	ВтИтоговаяТаблица.ПунктРазгрузки КАК ПунктРазгрузки,
	|	ВтИтоговаяТаблица.ОтметкаВыбытия
	|ИЗ
	|	ВтИтоговаяТаблица КАК ВтИтоговаяТаблица
	|ИТОГИ ПО
	|	Регистратор,
	|	Организация,
	|	АлкогольнаяПродукция,
	|	СправкаБ,
	|	ПунктРазгрузки";
	
	Возврат Текст;
КонецФункции

Функция  ЗапросПоРегистраторуУпаковки()
	Текст ="ВЫБРАТЬ
	|	алкХранилищеУпаковок.Период,
	|	алкХранилищеУпаковок.Регистратор,
	|	алкХранилищеУпаковок.НомерСтроки,
	|	алкХранилищеУпаковок.Активность,
	|	алкХранилищеУпаковок.Упаковка,
	|	алкХранилищеУпаковок.ИерархияУпаковки,
	|	алкХранилищеУпаковок.Наименование
	|ПОМЕСТИТЬ ИтоговыеДанные
	|ИЗ
	|	РегистрСведений.алкХранилищеУпаковок КАК алкХранилищеУпаковок
	|ГДЕ
	|	алкХранилищеУпаковок.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыеДанные.Период,
	|	ИтоговыеДанные.Регистратор КАК Регистратор,
	|	ИтоговыеДанные.НомерСтроки,
	|	ИтоговыеДанные.Активность,
	|	ИтоговыеДанные.Упаковка,
	|	ИтоговыеДанные.ИерархияУпаковки,
	|	ИтоговыеДанные.Наименование
	|ИЗ
	|	ИтоговыеДанные КАК ИтоговыеДанные
	|ИТОГИ ПО
	|	Регистратор";
	Возврат Текст;
КонецФункции

Функция СформироватоТаблицуДляЗаписиСрезаУпаковокSQL()
	ТаблицаДляЗаписи=новый ТаблицаЗначений;
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("Package");
	ТаблицаДляЗаписи.Колонки.Добавить("PackagingHierarchy");
	ТаблицаДляЗаписи.Колонки.Добавить("DateAndTime");
	Возврат ТаблицаДляЗаписи;
	
	
КонецФункции

Функция СформироватоТаблицуДляЗаписиУпаковокSQL()
	ТаблицаДляЗаписи=новый ТаблицаЗначений;
	ТаблицаДляЗаписи.Колонки.Добавить("Activity");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("Package");
	ТаблицаДляЗаписи.Колонки.Добавить("PackagingHierarchy");
	ТаблицаДляЗаписи.Колонки.Добавить("Name");
	ТаблицаДляЗаписи.Колонки.Добавить("DateAndTime");
	//ТаблицаДляЗаписи.Колонки.Добавить("TypeValueRegistration");
	Возврат ТаблицаДляЗаписи;
	
	
КонецФункции

Функция СформироватоТаблицуДляЗаписиМарокSQL()
	ТаблицаДляЗаписи=новый ТаблицаЗначений;
	ТаблицаДляЗаписи.Колонки.Добавить("Activity");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("Marka");
	ТаблицаДляЗаписи.Колонки.Добавить("GTIN");
	ТаблицаДляЗаписи.Колонки.Добавить("ApplivationB_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("ApplivationB_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("ApplivationB_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("ApplivationB_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("ProductionAlcohol_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("ProductionAlcohol_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("ProductionAlcohol_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("ProductionAlcohol_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("Organization_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("Organization_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("Organization_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("Organization_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("DeliveryPoint_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("DeliveryPoint_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("DeliveryPoint_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("DeliveryPoint_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("OutMark");
	ТаблицаДляЗаписи.Колонки.Добавить("DateAndTime");
	//ТаблицаДляЗаписи.Колонки.Добавить("TypeValueRegistration");
	Возврат ТаблицаДляЗаписи;
	
КонецФункции

Функция СформироватоТаблицуДляЗаписиСрезаМарокSQL()
	ТаблицаДляЗаписи=новый ТаблицаЗначений;
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_GUID");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_TypeValue");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_TypeMetadata");
	ТаблицаДляЗаписи.Колонки.Добавить("Registration_Name");
	ТаблицаДляЗаписи.Колонки.Добавить("Marka");
	ТаблицаДляЗаписи.Колонки.Добавить("GTIN");
	ТаблицаДляЗаписи.Колонки.Добавить("DateAndTime");
	ТаблицаДляЗаписи.Колонки.Добавить("OutMark");
	Возврат ТаблицаДляЗаписи;
КонецФункции

Функция СоздатьВременнуюТаблицуДляЗаписиМарок(СтруктураПараметров,Срез=Ложь)
	КлючТаблицы=СтрЗаменить(Строка(новый УникальныйИдентификатор()),"-","");
	ИмяТаблицы="TempInsertMark"+КлючТаблицы;
	ИмяТаблицыМарок=СтруктураПараметров.Конструктор.ПутьДоТаблицы(,ИмяТаблицы);
	СоответсвиеДанныхВременнойТаблицыМарок=СформироватьСоответствиеВременнойТаблицыМарок(Срез);
	СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.СоздатьВременнуюТаблицуСОбъявлениемДанных(ИмяТаблицыМарок,СоответсвиеДанныхВременнойТаблицыМарок);
	СтруктураПараметров.АдоКоманда.Execute();
	Возврат ИмяТаблицыМарок;
КонецФункции

Функция СоздатьВременнуюТаблицуДляЗаписиУпаковок(СтруктураПараметров,Срез=ложь)
	КлючТаблицы=СтрЗаменить(Строка(новый УникальныйИдентификатор()),"-","");
	ИмяТаблицы="TempInsertPackage"+КлючТаблицы;
	ИмяТаблицыУпаковок=СтруктураПараметров.Конструктор.ПутьДоТаблицы(,ИмяТаблицы);
	СоответствиеВременнойТаблицыУпаковок=СформироватьСоответствиеВременнойТаблицыУпаковок(Срез);
	СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;
	СтруктураПараметров.АдоКоманда.CommandText=СтруктураПараметров.Конструктор.СоздатьВременнуюТаблицуСОбъявлениемДанных(ИмяТаблицыУпаковок,СоответствиеВременнойТаблицыУпаковок);
	СтруктураПараметров.АдоКоманда.Execute();
	Возврат ИмяТаблицыУпаковок;
КонецФункции


Функция СформироватьСоответствиеВременнойТаблицыМарок(Срез)
	СоответсвиеДанныхВременнойТаблицыМарок=новый Соответствие;
	Если не Срез Тогда 
		СоответсвиеДанныхВременнойТаблицыМарок.Вставить("Activity","boolean");
		СоответсвиеДанныхВременнойТаблицыМарок.Вставить("ApplivationB",""""+"LinkAll"+"""");
		СоответсвиеДанныхВременнойТаблицыМарок.Вставить("ProductionAlcohol",""""+"LinkAll"+"""");
		СоответсвиеДанныхВременнойТаблицыМарок.Вставить("Organization",""""+"LinkAll"+"""");
		СоответсвиеДанныхВременнойТаблицыМарок.Вставить("DeliveryPoint",""""+"LinkAll"+"""");
		СоответсвиеДанныхВременнойТаблицыМарок.Вставить("GTIN","character varying(172)");
		СоответсвиеДанныхВременнойТаблицыМарок.Вставить("OutMark","boolean");
		СоответсвиеДанныхВременнойТаблицыМарок.Вставить("DateAndTime","timestamp without time zone");
		СоответсвиеДанныхВременнойТаблицыМарок.Вставить("Registration",""""+"LinkAll"+"""");	
	КонецЕсли;
	СоответсвиеДанныхВременнойТаблицыМарок.Вставить("Marka","character varying(172)");
	Возврат  СоответсвиеДанныхВременнойТаблицыМарок;	
КонецФункции

Функция СформироватьСоответствиеВременнойТаблицыУпаковок(Срез)
	СоответсвиеДанныхВременнойТаблицыУпаковок=новый Соответствие;
	Если не Срез Тогда 
		СоответсвиеДанныхВременнойТаблицыУпаковок.Вставить("Activity","boolean");
		СоответсвиеДанныхВременнойТаблицыУпаковок.Вставить("PackagingHierarchy","character varying(172)");
		СоответсвиеДанныхВременнойТаблицыУпаковок.Вставить("Name","character varying(150)");
		СоответсвиеДанныхВременнойТаблицыУпаковок.Вставить("DateAndTime","timestamp without time zone");
		СоответсвиеДанныхВременнойТаблицыУпаковок.Вставить("Registration",""""+"LinkAll"+"""");
	КонецЕсли;
	СоответсвиеДанныхВременнойТаблицыУпаковок.Вставить("Package","character varying(172)");
	Возврат  СоответсвиеДанныхВременнойТаблицыУпаковок;	
КонецФункции


Функция СформироватьСоответствиеПолейЗаписиУпаковок(Срез)
	СоответствиеПолейЗаписиУпаковок=новый Соответствие;
	Если не Срез  Тогда 
		СоответствиеПолейЗаписиУпаковок.Вставить("Activity","Activity");
		СоответствиеПолейЗаписиУпаковок.Вставить("Name","Name");
	КонецЕсли;
	СоответствиеПолейЗаписиУпаковок.Вставить("Package","Package");
	СоответствиеПолейЗаписиУпаковок.Вставить("PackagingHierarchy","PackagingHierarchy");
	СоответствиеПолейЗаписиУпаковок.Вставить("DateAndTime","DateAndTime");
	СоответствиеПолейЗаписиУпаковок.Вставить("Registration","Registration");
	Возврат  СоответствиеПолейЗаписиУпаковок;	
КонецФункции

Функция СформироватьСоответствиеПолейЗаписиМарок(Срез)
	СоответствиеПолейЗаписиМарок=новый Соответствие;
	Если не Срез  Тогда 
		СоответствиеПолейЗаписиМарок.Вставить("Activity","Activity");
		СоответствиеПолейЗаписиМарок.Вставить("ApplivationB","ApplivationB");
		СоответствиеПолейЗаписиМарок.Вставить("ProductionAlcohol","ProductionAlcohol");
		СоответствиеПолейЗаписиМарок.Вставить("Organization","Organization");
		СоответствиеПолейЗаписиМарок.Вставить("DeliveryPoint","DeliveryPoint");
	КонецЕсли;
	СоответствиеПолейЗаписиМарок.Вставить("Marka","Marka");
	СоответствиеПолейЗаписиМарок.Вставить("GTIN","GTIN");
	СоответствиеПолейЗаписиМарок.Вставить("OutMark","OutMark");
	СоответствиеПолейЗаписиМарок.Вставить("DateAndTime","DateAndTime");
	СоответствиеПолейЗаписиМарок.Вставить("Registration","Registration");
	Возврат  СоответствиеПолейЗаписиМарок;	
КонецФункции
#КонецОбласти


Процедура итWMSSQLМаркиУпаковкиПередЗаписью(Источник,ТипЗаписи,НастройкиWMS,Отказ) Экспорт
	Если ТипЗаписи="" или Источник=Неопределено Тогда 
		Возврат
	КонецЕсли;
	//гвоздь на время удаления марок из базы
	Если Источник.Дата<='20200401' Тогда 
		Возврат
	КонецЕсли;	
	Если ТипЗаписи="РегистрСведенийНаборЗаписей.алкХранилищеАкцизныхМарок"  Тогда 
		НаборЗаписей=РегистрыСведений.алкХранилищеАкцизныхМарок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Источник);
		ПланыОбмена.ЗарегистрироватьИзменения(НастройкиWMS.ПланОбменаSQLМарки,НаборЗаписей);	
		//  НомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПоследнийНомерИзмененийНаУзлеSQL(НастройкиWMS.ПланОбменаSQL);	
		//ПланыОбмена.ВыбратьИзменения(НастройкиWMS.ПланОбменаSQL,НомерСообщения+1,НаборЗаписей);	
	КонецЕсли;
	Если ТипЗаписи="РегистрСведенийНаборЗаписей.алкХранилищеУпаковок"  Тогда 
		НаборЗаписей=РегистрыСведений.алкХранилищеУпаковок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Источник);
		ПланыОбмена.ЗарегистрироватьИзменения(НастройкиWMS.ПланОбменаSQLМарки,НаборЗаписей);	
		//НомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПоследнийНомерИзмененийНаУзлеSQL(НастройкиWMS.ПланОбменаSQL);	
		//ПланыОбмена.ВыбратьИзменения(НастройкиWMS.ПланОбменаSQL,НомерСообщения+1,НаборЗаписей);	
	КонецЕсли;
	Если ТипЗаписи="РегистрСведенийМенеджерЗаписи.алкХранилищеАкцизныхМарок"  Тогда 
		НаборЗаписей=РегистрыСведений.алкХранилищеАкцизныхМарок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Источник);
		ПланыОбмена.ЗарегистрироватьИзменения(НастройкиWMS.ПланОбменаSQLМарки,НаборЗаписей);	
		//НомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПоследнийНомерИзмененийНаУзлеSQL(НастройкиWMS.ПланОбменаSQL);	
		//ПланыОбмена.ВыбратьИзменения(НастройкиWMS.ПланОбменаSQL,НомерСообщения+1,НаборЗаписей);	
	КонецЕсли;
	Если ТипЗаписи="РегистрСведенийМенеджерЗаписи.алкХранилищеУпаковок"  Тогда 
		НаборЗаписей=РегистрыСведений.алкХранилищеУпаковок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Источник);
		ПланыОбмена.ЗарегистрироватьИзменения(НастройкиWMS.ПланОбменаSQLМарки,НаборЗаписей);
		//НомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПоследнийНомерИзмененийНаУзлеSQL(НастройкиWMS.ПланОбменаSQL);	
		//ПланыОбмена.ВыбратьИзменения(НастройкиWMS.ПланОбменаSQL,НомерСообщения+1,НаборЗаписей);	
	КонецЕсли;
КонецПроцедуры

Процедура ИсполнитьSQLЗапрос(СтруктураПараметров,ТекстЗапроса)
	СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	 
	СтруктураПараметров.АдоКоманда.CommandText=ТекстЗапроса;
	СтруктураПараметров.АдоКоманда.Execute();
КонецПроцедуры

Функция  ИсполнитьSQLЗапросЧтение(СтруктураПараметров,ТекстЗапроса)
	СтруктураПараметров.АдоКоманда.ActiveConnection=СтруктураПараметров.АДОСоединение;	 
	СтруктураПараметров.АдоКоманда.CommandText=ТекстЗапроса;
	Возврат СтруктураПараметров.АдоКоманда.Execute();
КонецФункции


Процедура РежимОжидания(КоличествоСекунд)
	Дата=ТекущаяДата();
	ДатаОкончания= Дата+КоличествоСекунд;
	Пока ТекущаяДата()<ДатаОкончания  Цикл 
	КонецЦикла;
КонецПроцедуры


#КонецОбласти

#Область ВосстановлениеМарокВДокументы

// Процедура - Восстановить марок
// Запускает процесс восстановления марок в табличные части документов из  sql  базы указаной в wms настройках
// Параметры:
//  ДокументСсылка	 - ДокументСсылка - ссылка на документ в котором необходимо восстановить марки из sql 
//
Процедура ВосстановитьМарок(ДокументСсылка) Экспорт
	МассивВременныхТаблиц=новый Массив;
	СтруктураДанных=новый Структура;
	Конструктор=Обработки.итWMS_КострукторЗапросаPostgresQL.Создать();
	АДОСоединение=итWMSСлужебныеПроцедурыИФункции.ПолучитьСоединениеДоSQLМарки();
	АдоКоманда=итWMSСлужебныеПроцедурыИФункции.ПолучитьADOКоммандуSQL();
	АдоКоманда.ActiveConnection=АДОСоединение;
	АдоКоманда.CommandTimeout=5000;
	Recordset = итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементВыборкиSQL();
	СтруктураДанных.Вставить("Конструктор",Конструктор);
	СтруктураДанных.Вставить("АДОСоединение",АДОСоединение);
	СтруктураДанных.Вставить("АдоКоманда",АдоКоманда);
	СтруктураДанных.Вставить("Recordset",Recordset);
	Если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.алкТоварноТранспортнаяНакладнаяЕГАИС") Тогда 
		ВосстановлениеМарокВТТНЕгаис(СтруктураДанных,ДокументСсылка,МассивВременныхТаблиц);
	КонецЕсли;
	Если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.алкПереупаковка") Тогда 
		ВосстановлениеМарокПереупаковки(СтруктураДанных,ДокументСсылка,МассивВременныхТаблиц);
	КонецЕсли;
	Если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.алкАктКТоварноТранспортнойНакладнойЕГАИС") Тогда 
		ВосстановлениеМарокАктКТТН(СтруктураДанных,ДокументСсылка,МассивВременныхТаблиц);
	КонецЕсли;
	Если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.алкАктОСписанииТовара") Тогда 
		ВосстановлениеМарокАктАктСписания(СтруктураДанных,ДокументСсылка,МассивВременныхТаблиц);
	КонецЕсли;	
	Если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.алкАктФиксацииШтрихкодовНаБалансеОрганизацииЕГАИС") Тогда 
		ВосстановлениеМарокАктФиксацииМарок(СтруктураДанных,ДокументСсылка,МассивВременныхТаблиц);
	КонецЕсли;	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.алкАктПостановкиНаБалансЕГАИС")  Тогда 
		ВосстановлениеМарокАктПостановкиБаланс(СтруктураДанных,ДокументСсылка,МассивВременныхТаблиц);
	КонецЕсли;	
	
	Для Каждого стр из МассивВременныхТаблиц Цикл 
		СтруктураДанных.АдоКоманда.CommandText=СтруктураДанных.Конструктор.УдалениеВременнойТаблицы(стр);
		СтруктураДанных.АдоКоманда.Execute();    	
	КонецЦикла;
КонецПроцедуры


#Область ВосстановлениеМарокВДокументыТТН

Процедура ВосстановлениеМарокВТТНЕгаис(СтруктураДанных,ДокументСсылка,МассивВременныхТаблиц)
	Если ДокументСсылка.ВидДокумента=Перечисления.алкВидыДокументовЕГАИС.Входящий Тогда 
		ДокументПоискаМарок=НайтиАктКВходящейТТН(ДокументСсылка);
		Если ДокументПоискаМарок=Неопределено Тогда 
			ВызватьИсключение "К  ттн "+Строка(ДокументСсылка)+" не найден проведеный акт подтверждения, марки найти не возможно";
		КонецЕсли;	
		СчитываниеДанныхSQL(СтруктураДанных,ДокументПоискаМарок.УникальныйИдентификатор(),МассивВременныхТаблиц);
	ИначеЕсли  ДокументСсылка.ВидДокумента=Перечисления.алкВидыДокументовЕГАИС.Исходящий Тогда 
		СчитываниеДанныхSQL(СтруктураДанных,ДокументСсылка.УникальныйИдентификатор(),МассивВременныхТаблиц);
	КонецЕсли;
	ОбъектДокумента=ДокументСсылка.ПолучитьОбъект();
	ОбъектДокумента.АкцизныеМарки.Очистить();
	ОбъектДокумента.Упаковки.Очистить();
	ЗаполнениеДетальныхЗаписейМарокТТНЕГАИС(СтруктураДанных,ОбъектДокумента);
	ЗаполнениеДетальныхЗаписейУпаковок(СтруктураДанных,ОбъектДокумента);
	ОбъектДокумента.Записать();
КонецПроцедуры


Процедура ЗаполнениеДетальныхЗаписейМарокТТНЕГАИС(СтруктураДанных,ОбъектДокумента)
	Конструктор=СтруктураДанных.Конструктор;
	ТекстЗапроса=СокрЛП(Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL").Области.ПоискДанныхПоРегистраторуГруппировкаСправокБ.Текст);	
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp3%",СтруктураДанных.ИмяТаблицаДанныхSQL);
	СтруктураДанных.АдоКоманда.CommandText=ТекстЗапроса;
	СтруктураДанных.Recordset=СтруктураДанных.АдоКоманда.Execute();
	RecordsetNew = итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементВыборкиSQL();
	АдоКомандаНовая=итWMSСлужебныеПроцедурыИФункции.ПолучитьADOКоммандуSQL();
	АдоКомандаНовая.ActiveConnection=СтруктураДанных.АДОСоединение;
	АдоКомандаНовая.CommandTimeout=5000;
	Пока   СтруктураДанных.Recordset.EOF() = 0 Цикл 
		СправкаБГуид=СтруктураДанных.Recordset.Fields("ApplivationB").Value;
		СправкаБ=Справочники.алкКлассификаторСправокАиБ.ПолучитьСсылку(новый УникальныйИдентификатор(СправкаБГуид));
		СтрокаТаблицыДокумента=ОбъектДокумента.Товары.Найти(СправкаБ);
		КлючСвязи=СтрокаТаблицыДокумента.КлючСвязи;
		ТекстЗапроса=СокрЛП(Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL").Области.ПоискДанныхПоРегистраторуОтборПоСправкеБ.Текст);		
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp3%",СтруктураДанных.ИмяТаблицаДанныхSQL);
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса,"&Params","'"+СправкаБГуид+"'");
		АдоКомандаНовая.CommandText=ТекстЗапроса;
		RecordsetNew=АдоКомандаНовая.Execute();
		Пока RecordsetNew.EOF() = 0 Цикл 
			НоваяСтрока=ОбъектДокумента.АкцизныеМарки.Добавить();
			НоваяСтрока.КодАкцизнойМарки=RecordsetNew.Fields("Marka").Value;
			НоваяСтрока.НомерКоробки=RecordsetNew.Fields("GTIN").Value;
			НоваяСтрока.КлючСвязи=КлючСвязи;
			RecordsetNew.MoveNext();
		КонецЦикла;
		СтруктураДанных.Recordset.MoveNext();
	КонецЦикла;
	
КонецПроцедуры


Функция НайтиАктКВходящейТТН(ТТН)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкАктКТоварноТранспортнойНакладнойЕГАИС.Ссылка
	|ИЗ
	|	Документ.алкАктКТоварноТранспортнойНакладнойЕГАИС КАК алкАктКТоварноТранспортнойНакладнойЕГАИС
	|ГДЕ
	|	алкАктКТоварноТранспортнойНакладнойЕГАИС.ТоварноТранспортнаяНакладнаяЕГАИС = &ТоварноТранспортнаяНакладнаяЕГАИС
	|	И алкАктКТоварноТранспортнойНакладнойЕГАИС.Проведен";
	
	Запрос.УстановитьПараметр("ТоварноТранспортнаяНакладнаяЕГАИС", ТТН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции
#КонецОбласти

#Область ВосстановлениеМарокВДокументыПереупаковка
Процедура ВосстановлениеМарокПереупаковки(СтруктураДанных,ДокументСсылка,МассивВременныхТаблиц)
	СчитываниеДанныхSQL(СтруктураДанных,ДокументСсылка.УникальныйИдентификатор(),МассивВременныхТаблиц);
	ОбъектДокумента=ДокументСсылка.ПолучитьОбъект();
	ОбъектДокумента.АкцизныеМарки.Очистить();
	ОбъектДокумента.Упаковки.Очистить();
	ЗаполнениеДетальныхЗаписейМарокПереупаковки(СтруктураДанных,ОбъектДокумента);
	ЗаполнениеДетальныхЗаписейУпаковок(СтруктураДанных,ОбъектДокумента);
	ОбъектДокумента.Записать();
КонецПроцедуры

Процедура ЗаполнениеДетальныхЗаписейМарокПереупаковки(СтруктураДанных,ОбъектДокумента)
	Конструктор=СтруктураДанных.Конструктор;
	ТекстЗапроса=СокрЛП(Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL").Области.ПоискДанныхПоРегистраторуГруппировкаСправокБ.Текст);	
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp3%",СтруктураДанных.ИмяТаблицаДанныхSQL);
	СтруктураДанных.АдоКоманда.CommandText=ТекстЗапроса;
	СтруктураДанных.Recordset=СтруктураДанных.АдоКоманда.Execute();
	RecordsetNew = итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементВыборкиSQL();
	АдоКомандаНовая=итWMSСлужебныеПроцедурыИФункции.ПолучитьADOКоммандуSQL();
	АдоКомандаНовая.ActiveConnection=СтруктураДанных.АДОСоединение;
	АдоКомандаНовая.CommandTimeout=5000;
	Пока   СтруктураДанных.Recordset.EOF() = 0 Цикл 
		СправкаБГуид=СтруктураДанных.Recordset.Fields("ApplivationB").Value;
		ТекущаяСправкаБ=Справочники.алкКлассификаторСправокАиБ.ПолучитьСсылку(новый УникальныйИдентификатор(СправкаБГуид));
		ТекущаяАлкПродукция=итWMSСлужебныеПроцедурыИФункции.НайтиАлкогольнуюПродукциюПоСправкеБ(ТекущаяСправкаБ);
		Если ТекущаяАлкПродукция=Неопределено Тогда
			ВызватьИсключение "не найдена номенклатура к документы "+Строка(ОбъектДокумента.Ссылка);
		КонецЕсли;	
		ТекстЗапроса=СокрЛП(Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL").Области.ПоискДанныхПоРегистраторуОтборПоСправкеБ.Текст);		
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp3%",СтруктураДанных.ИмяТаблицаДанныхSQL);
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса,"&Params","'"+СправкаБГуид+"'");
		АдоКомандаНовая.CommandText=ТекстЗапроса;
		RecordsetNew=АдоКомандаНовая.Execute();
		Пока RecordsetNew.EOF() = 0 Цикл 
			НоваяСтрока=ОбъектДокумента.АкцизныеМарки.Добавить();
			НоваяСтрока.Марка=RecordsetNew.Fields("Marka").Value;
			НоваяСтрока.Упаковка=RecordsetNew.Fields("GTIN").Value;
			НоваяСтрока.ОтметкаВыбытия=RecordsetNew.Fields("OutMark").Value;
			НоваяСтрока.АлкогольнаяПродукция=ТекущаяАлкПродукция;
			НоваяСтрока.СправкаБ=ТекущаяСправкаБ;
			RecordsetNew.MoveNext();
		КонецЦикла;
		СтруктураДанных.Recordset.MoveNext();
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти


#Область ВосстановлениеМарокВДокументыАктКТТН
Процедура ВосстановлениеМарокАктКТТН(СтруктураДанных,ДокументСсылка,МассивВременныхТаблиц)
	Если ДокументСсылка.ВидАкта<>Перечисления.алкВидыАктовКТоварноТранспортнойНакладнойЕГАИС.АктРасхождения Тогда 
		ВосстановлениеМарокВТТНЕгаис(СтруктураДанных,ДокументСсылка.ТоварноТранспортнаяНакладнаяЕГАИС,МассивВременныхТаблиц);
		Возврат;
	КонецЕсли;	
	СсылкаПодтверженияДокумента=НайтиПодтверждениеАктаКТТН(ДокументСсылка);
	Если СсылкаПодтверженияДокумента = Неопределено Тогда 
		ВызватьИсключение "К  акту "+Строка(ДокументСсылка)+" не найден проведеный Подтверждение Акта К Товарно Транспортной Накладной ЕГАИС, марки найти не возможно";
	КонецЕсли;
	СчитываниеДанныхSQL(СтруктураДанных,СсылкаПодтверженияДокумента.УникальныйИдентификатор(),МассивВременныхТаблиц);
	ОбъектДокумента=ДокументСсылка.ПолучитьОбъект();
	ОбъектДокумента.АкцизныеМарки.Очистить();
	//ОбъектДокумента.Упаковки.Очистить();
	ЗаполнениеДетальныхЗаписейМарокАктКТТН(СтруктураДанных,ОбъектДокумента);
	ОбъектДокумента.Записать();
КонецПроцедуры

Процедура ЗаполнениеДетальныхЗаписейМарокАктКТТН(СтруктураДанных,ОбъектДокумента)
	Конструктор=СтруктураДанных.Конструктор;
	ТекстЗапроса=СокрЛП(Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL").Области.ПоискДанныхПоРегистраторуГруппировкаСправокБ.Текст);	
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp3%",СтруктураДанных.ИмяТаблицаДанныхSQL);
	СтруктураДанных.АдоКоманда.CommandText=ТекстЗапроса;
	СтруктураДанных.Recordset=СтруктураДанных.АдоКоманда.Execute();
	RecordsetNew = итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементВыборкиSQL();
	АдоКомандаНовая=итWMSСлужебныеПроцедурыИФункции.ПолучитьADOКоммандуSQL();
	АдоКомандаНовая.ActiveConnection=СтруктураДанных.АДОСоединение;
	АдоКомандаНовая.CommandTimeout=5000;
	Пока   СтруктураДанных.Recordset.EOF() = 0 Цикл 
		СправкаБГуид=СтруктураДанных.Recordset.Fields("ApplivationB").Value;
		СправкаБ=Справочники.алкКлассификаторСправокАиБ.ПолучитьСсылку(новый УникальныйИдентификатор(СправкаБГуид));
		СтрокаТТН=ОбъектДокумента.ТоварноТранспортнаяНакладнаяЕГАИС.Товары.Найти(СправкаБ);
		СправкаБКонтрагента=Справочники.алкКлассификаторСправокАиБ.НайтиПоКоду(СтрокаТТН.СправкаБКонтрагента);
		СтрокаТаблицыДокумента=ОбъектДокумента.Товары.Найти(СправкаБКонтрагента);
		КлючСвязи=СтрокаТаблицыДокумента.КлючСвязи;
		ТекстЗапроса=СокрЛП(Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL").Области.ПоискДанныхПоРегистраторуОтборПоСправкеБ.Текст);		
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp3%",СтруктураДанных.ИмяТаблицаДанныхSQL);
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса,"&Params","'"+СправкаБГуид+"'");
		АдоКомандаНовая.CommandText=ТекстЗапроса;
		RecordsetNew=АдоКомандаНовая.Execute();
		Пока RecordsetNew.EOF() = 0 Цикл 
			НоваяСтрока=ОбъектДокумента.АкцизныеМарки.Добавить();
			НоваяСтрока.КодАкцизнойМарки=RecordsetNew.Fields("Marka").Value;
			НоваяСтрока.КлючСвязи=КлючСвязи;
			RecordsetNew.MoveNext();
		КонецЦикла;
		СтруктураДанных.Recordset.MoveNext();
	КонецЦикла;
	
КонецПроцедуры


Функция НайтиПодтверждениеАктаКТТН(АктТТН)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкПодтверждениеАктаКТоварноТранспортнойНакладнойЕГАИС.Ссылка
	|ИЗ
	|	Документ.алкПодтверждениеАктаКТоварноТранспортнойНакладнойЕГАИС КАК алкПодтверждениеАктаКТоварноТранспортнойНакладнойЕГАИС
	|ГДЕ
	|	алкПодтверждениеАктаКТоварноТранспортнойНакладнойЕГАИС.Проведен
	|	И алкПодтверждениеАктаКТоварноТранспортнойНакладнойЕГАИС.АктКТоварноТранспортнойНакладнойЕГАИС = &АктКТоварноТранспортнойНакладнойЕГАИС";
	
	Запрос.УстановитьПараметр("АктКТоварноТранспортнойНакладнойЕГАИС", АктТТН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции
#КонецОбласти

#Область ВосстановлениеМарокВДокументыАктСписания
Процедура ВосстановлениеМарокАктАктСписания(СтруктураДанных,ДокументСсылка,МассивВременныхТаблиц)
	СчитываниеДанныхSQL(СтруктураДанных,ДокументСсылка.УникальныйИдентификатор(),МассивВременныхТаблиц);
	ОбъектДокумента=ДокументСсылка.ПолучитьОбъект();
	ОбъектДокумента.КодыМарок.Очистить();
	ЗаполнениеДетальныхЗаписейМарокАктСписания(СтруктураДанных,ОбъектДокумента);
	ОбъектДокумента.Записать();
КонецПроцедуры

Процедура ЗаполнениеДетальныхЗаписейМарокАктСписания(СтруктураДанных,ОбъектДокумента)
	Конструктор=СтруктураДанных.Конструктор;
	ТекстЗапроса=СокрЛП(Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL").Области.ПоискДанныхПоРегистраторуГруппировкаСправокБ.Текст);	
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp3%",СтруктураДанных.ИмяТаблицаДанныхSQL);
	СтруктураДанных.АдоКоманда.CommandText=ТекстЗапроса;
	СтруктураДанных.Recordset=СтруктураДанных.АдоКоманда.Execute();
	RecordsetNew = итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементВыборкиSQL();
	АдоКомандаНовая=итWMSСлужебныеПроцедурыИФункции.ПолучитьADOКоммандуSQL();
	АдоКомандаНовая.ActiveConnection=СтруктураДанных.АДОСоединение;
	АдоКомандаНовая.CommandTimeout=5000;
	Пока   СтруктураДанных.Recordset.EOF() = 0 Цикл 
		СправкаБГуид=СтруктураДанных.Recordset.Fields("ApplivationB").Value;
		СправкаБ=Справочники.алкКлассификаторСправокАиБ.ПолучитьСсылку(новый УникальныйИдентификатор(СправкаБГуид));
		СтрокаТаблицыДокумента=ОбъектДокумента.Товары.Найти(СправкаБ);
		КлючСвязи=СтрокаТаблицыДокумента.КлючСвязи;
		ТекстЗапроса=СокрЛП(Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL").Области.ПоискДанныхПоРегистраторуОтборПоСправкеБ.Текст);		
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp3%",СтруктураДанных.ИмяТаблицаДанныхSQL);
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса,"&Params","'"+СправкаБГуид+"'");
		АдоКомандаНовая.CommandText=ТекстЗапроса;
		RecordsetNew=АдоКомандаНовая.Execute();
		Пока RecordsetNew.EOF() = 0 Цикл 
			НоваяСтрока=ОбъектДокумента.КодыМарок.Добавить();
			НоваяСтрока.Код=RecordsetNew.Fields("Marka").Value;
			НоваяСтрока.КлючСвязи=КлючСвязи;
			RecordsetNew.MoveNext();
		КонецЦикла;
		СтруктураДанных.Recordset.MoveNext();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеМарокВДокументыАктФиксацииМарок
Процедура ВосстановлениеМарокАктФиксацииМарок(СтруктураДанных,ДокументСсылка,МассивВременныхТаблиц)
	СчитываниеДанныхSQL(СтруктураДанных,ДокументСсылка.УникальныйИдентификатор(),МассивВременныхТаблиц);
	ОбъектДокумента=ДокументСсылка.ПолучитьОбъект();
	ОбъектДокумента.АкцизныеМарки.Очистить();
	ОбъектДокумента.Упаковки.Очистить();
	ЗаполнениеДетальныхЗаписейМарокТТНЕГАИС(СтруктураДанных,ОбъектДокумента);
	ЗаполнениеДетальныхЗаписейУпаковок(СтруктураДанных,ОбъектДокумента);
	ОбъектДокумента.Записать();
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеМарокВДокументыАктПостановкиБаланс
Процедура ВосстановлениеМарокАктПостановкиБаланс(СтруктураДанных,ДокументСсылка,МассивВременныхТаблиц)
	СчитываниеДанныхSQL(СтруктураДанных,ДокументСсылка.УникальныйИдентификатор(),МассивВременныхТаблиц);
	ОбъектДокумента=ДокументСсылка.ПолучитьОбъект();
	ОбъектДокумента.АкцизныеМарки.Очистить();
	ОбъектДокумента.Упаковки.Очистить();
	ЗаполнениеДетальныхЗаписейМарокАктПостановкиБаланс(СтруктураДанных,ОбъектДокумента);
	ЗаполнениеДетальныхЗаписейУпаковок(СтруктураДанных,ОбъектДокумента);
	ОбъектДокумента.Записать();
КонецПроцедуры

Процедура ЗаполнениеДетальныхЗаписейМарокАктПостановкиБаланс(СтруктураДанных,ОбъектДокумента)
	Конструктор=СтруктураДанных.Конструктор;
	ТекстЗапроса=СокрЛП(Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL").Области.ПоискДанныхПоРегистраторуГруппировкаСправокБ.Текст);	
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp3%",СтруктураДанных.ИмяТаблицаДанныхSQL);
	СтруктураДанных.АдоКоманда.CommandText=ТекстЗапроса;
	СтруктураДанных.Recordset=СтруктураДанных.АдоКоманда.Execute();
	RecordsetNew = итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементВыборкиSQL();
	АдоКомандаНовая=итWMSСлужебныеПроцедурыИФункции.ПолучитьADOКоммандуSQL();
	АдоКомандаНовая.ActiveConnection=СтруктураДанных.АДОСоединение;
	АдоКомандаНовая.CommandTimeout=5000;
	Пока   СтруктураДанных.Recordset.EOF() = 0 Цикл 
		СправкаБГуид=СтруктураДанных.Recordset.Fields("ApplivationB").Value;
		СправкаБ=Справочники.алкКлассификаторСправокАиБ.ПолучитьСсылку(новый УникальныйИдентификатор(СправкаБГуид));
		СтрокаТаблицыДокумента=ОбъектДокумента.Товары.Найти(СправкаБ);
		КлючСвязи=СтрокаТаблицыДокумента.КлючСвязи;
		ТекстЗапроса=СокрЛП(Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL").Области.ПоискДанныхПоРегистраторуОтборПоСправкеБ.Текст);		
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp3%",СтруктураДанных.ИмяТаблицаДанныхSQL);
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса,"&Params","'"+СправкаБГуид+"'");
		АдоКомандаНовая.CommandText=ТекстЗапроса;
		RecordsetNew=АдоКомандаНовая.Execute();
		Пока RecordsetNew.EOF() = 0 Цикл 
			НоваяСтрока=ОбъектДокумента.АкцизныеМарки.Добавить();
			НоваяСтрока.Код=RecordsetNew.Fields("Marka").Value;
			НоваяСтрока.НомерКоробки=RecordsetNew.Fields("GTIN").Value;
			НоваяСтрока.КлючСвязи=КлючСвязи;
			RecordsetNew.MoveNext();
		КонецЦикла;
		СтруктураДанных.Recordset.MoveNext();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ВосстановлениеМарокВДокументыОбщие


// Процедура - Считывание данных SQL
// Основаня процедура , которая получает все необходимые данные для восстановления марок.
// Данные хранятся в третей временой таблице, в конце процедуры имя этой таблицы добавляется в свойтсво СтруктураДанных-ИмяТаблицаДанныхSQL;
// Параметры:
//  СтруктураДанных			 - Структура - структура с параметрами. Основные параметры : Конструктор,АДОСоединение,АдоКоманда,Recordset;
//  ГуидДокумента			 - Строка,УникальныйИдентификатор - GUID  ссылки документы, по которому необходимо найти данные пму;
//  МассивВременныхТаблиц	 - Массив - если в процессе создаются временные таблицы, их необходимо поместить в текущий массив, т.к в конце процесса их необходимо удалить. 
//
Процедура СчитываниеДанныхSQL(СтруктураДанных,ГуидДокумента,МассивВременныхТаблиц)
	Конструктор=СтруктураДанных.Конструктор;
	ТекстЗапроса=СокрЛП(Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL").Области.ПоискДанныхПоРегистратору.Текст);	
	ИмяТаблицы1=СформироватьИмяВременнойТаблицы(СтруктураДанных);
	ИмяТаблицы2=СформироватьИмяВременнойТаблицы(СтруктураДанных);
	ИмяТаблицы3=СформироватьИмяВременнойТаблицы(СтруктураДанных);
	МассивВременныхТаблиц.Добавить(ИмяТаблицы1);
	МассивВременныхТаблиц.Добавить(ИмяТаблицы2);
	МассивВременныхТаблиц.Добавить(ИмяТаблицы3);
	ГуидДокумента=Строка(ГуидДокумента);
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp1%",ИмяТаблицы1);
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp2%",ИмяТаблицы2);
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp3%",ИмяТаблицы3);
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"&Param1","'"+ГуидДокумента+"'");
	СтруктураДанных.Вставить("ИмяТаблицаДанныхSQL",ИмяТаблицы3);
	СтруктураДанных.АдоКоманда.CommandText=ТекстЗапроса;
	СтруктураДанных.АдоКоманда.Execute();     
КонецПроцедуры


Функция СформироватьИмяВременнойТаблицы(СтруктураДанных)
	КлючТаблицы=СтрЗаменить(Строка(новый УникальныйИдентификатор()),"-","");
	ИмяТаблицы="Temp"+КлючТаблицы;
	ИмяТаблицы=СтруктураДанных.Конструктор.ПутьДоТаблицы(,ИмяТаблицы);
	Возврат ИмяТаблицы;
КонецФункции

Процедура ЗаполнениеДетальныхЗаписейУпаковок(СтруктураДанных,ОбъектДокумента)
	Конструктор=СтруктураДанных.Конструктор;
	ТекстЗапроса=СокрЛП(Конструктор.ПолучитьМакет("ГотовыеЗапросыPostgresQL").Области.ПоискДанныхПоРегистраторуГруппировкаУпаковок.Текст);	
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"%NameTemp3%",СтруктураДанных.ИмяТаблицаДанныхSQL);
	СтруктураДанных.АдоКоманда.CommandText=ТекстЗапроса;
	СтруктураДанных.Recordset=СтруктураДанных.АдоКоманда.Execute();
	Пока   СтруктураДанных.Recordset.EOF() = 0 Цикл 
		НоваяСтрока=ОбъектДокумента.Упаковки.Добавить();
		НоваяСтрока.Упаковка=СтруктураДанных.Recordset.Fields("GTIN").Value;
		НоваяСтрока.ИерархияУпаковки=СтруктураДанных.Recordset.Fields("PackagingHierarchy").Value;
		СтруктураДанных.Recordset.MoveNext();
	КонецЦикла;
КонецПроцедуры


#КонецОбласти


#КонецОбласти


#Область ОчисткаДанныхМарокВДокументах
Процедура ОчисткаДанныхМарокРегламетноеЗаданиеОтладка(Ссылка) Экспорт 
	НастройкиWMS=ПолучитьНастройкиИзХранилища();
	НастройкиЗадания=ХранилищеОбщихНастроек.Загрузить("итWMSНастройкиУдаленияМарокДокумента","итWMSНастройкиУдаленияМарокДокумента",,"итWMSНастройкиУдаленияМарокДокумента");
	Если  ТипЗнч(НастройкиЗадания)<>Тип("Структура") Тогда 
		Возврат
	КонецЕсли;
	Если не НастройкиЗадания.Свойство("КоличествоДнейХраненияМарокВБазе") Тогда 
		Возврат
	КонецЕсли;
	Если  ТипЗнч(НастройкиWMS)<>Тип("Структура") Тогда 
		Возврат
	КонецЕсли;
	Если не НастройкиWMS.Свойство("ПланОбменаSQLМарки") Тогда 
		Возврат
	КонецЕсли;
	
	СтруктураДанных=новый Структура;
	СтруктураДанных.Вставить("НастройкиWMS",НастройкиWMS);
	СтруктураДанных.Вставить("НастройкиЗадания",НастройкиЗадания);
	Конструктор=Обработки.итWMS_КострукторЗапросаPostgresQL.Создать();
	АДОСоединение=итWMSСлужебныеПроцедурыИФункции.ПолучитьСоединениеДоSQLМарки();
	АдоКоманда=итWMSСлужебныеПроцедурыИФункции.ПолучитьADOКоммандуSQL();
	АдоКоманда.ActiveConnection=АДОСоединение;
	АдоКоманда.CommandTimeout=5000;
	Recordset = итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементВыборкиSQL();
	СтруктураДанных.Вставить("Конструктор",Конструктор);
	СтруктураДанных.Вставить("АДОСоединение",АДОСоединение);
	СтруктураДанных.Вставить("АдоКоманда",АдоКоманда);
	СтруктураДанных.Вставить("Recordset",Recordset);
	ДатаОтсчета=ТекущаяДата()-(НастройкиЗадания.КоличествоДнейХраненияМарокВБазе*(60*60*24));
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	алкХранилищеАкцизныхМарок.Регистратор
	//	|ИЗ
	//	|	РегистрСведений.алкХранилищеАкцизныхМарок КАК алкХранилищеАкцизныхМарок
	//	|ГДЕ
	//	|	алкХранилищеАкцизныхМарок.Период <= &Период
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	алкХранилищеАкцизныхМарок.Регистратор";
	//
	//Запрос.УстановитьПараметр("Период", ДатаОтсчета);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	УдалитьДанныеМарокДокументов(СтруктураДанных,Ссылка);	
	//КонецЦикла;
	
	
	
КонецПроцедуры


Процедура ОчисткаДанныхМарокРегламетноеЗадание() Экспорт 
	НастройкиWMS=ПолучитьНастройкиИзХранилища();
	НастройкиЗадания=ХранилищеОбщихНастроек.Загрузить("итWMSНастройкиУдаленияМарокДокумента","итWMSНастройкиУдаленияМарокДокумента",,"итWMSНастройкиУдаленияМарокДокумента");
	Если  ТипЗнч(НастройкиЗадания)<>Тип("Структура") Тогда 
		Возврат
	КонецЕсли;
	Если не НастройкиЗадания.Свойство("КоличествоДнейХраненияМарокВБазе") Тогда 
		Возврат
	КонецЕсли;
	Если  ТипЗнч(НастройкиWMS)<>Тип("Структура") Тогда 
		Возврат
	КонецЕсли;
	Если не НастройкиWMS.Свойство("ПланОбменаSQLМарки") Тогда 
		Возврат
	КонецЕсли;
	//Блок сбора статистики временный
	ЗначениеСчетчика=ХранилищеОбщихНастроек.Загрузить("ХранилищеСбораСтатистикиSQLМарки","ХранилищеСбораСтатистикиSQLМарки",,"ХранилищеСбораСтатистикиSQLМарки");
	ДатаПоследнегоДокумента=ХранилищеОбщихНастроек.Загрузить("ХранилищеУдаленияМарокWMS","ХранилищеУдаленияМарокWMS",,"ХранилищеУдаленияМарокWMS");
	Если ЗначениеСчетчика =Неопределено Тогда 
		ЗначениеСчетчика=0;
		ХранилищеОбщихНастроек.Сохранить("ХранилищеСбораСтатистикиSQLМарки","ХранилищеСбораСтатистикиSQLМарки",ЗначениеСчетчика,,"ХранилищеСбораСтатистикиSQLМарки");
	КонецЕсли;
	Если ДатаПоследнегоДокумента=Неопределено Тогда 
		ДатаПоследнегоДокумента='00010101';
	КонецЕсли;
	
	СтруктураДанных=новый Структура;
	СтруктураДанных.Вставить("НастройкиWMS",НастройкиWMS);
	СтруктураДанных.Вставить("НастройкиЗадания",НастройкиЗадания);
	Конструктор=Обработки.итWMS_КострукторЗапросаPostgresQL.Создать();
	АДОСоединение=итWMSСлужебныеПроцедурыИФункции.ПолучитьСоединениеДоSQLМарки();
	АдоКоманда=итWMSСлужебныеПроцедурыИФункции.ПолучитьADOКоммандуSQL();
	АдоКоманда.ActiveConnection=АДОСоединение;
	АдоКоманда.CommandTimeout=5000;
	Recordset = итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементВыборкиSQL();
	СтруктураДанных.Вставить("Конструктор",Конструктор);
	СтруктураДанных.Вставить("АДОСоединение",АДОСоединение);
	СтруктураДанных.Вставить("АдоКоманда",АдоКоманда);
	СтруктураДанных.Вставить("Recordset",Recordset);
	ДатаОтсчета=ТекущаяДата()-(НастройкиЗадания.КоличествоДнейХраненияМарокВБазе*(60*60*24));
	Если НачалоДня(ДатаПоследнегоДокумента)=НачалоДня(ДатаОтсчета) Тогда 
		ДатаПоследнегоДокумента='00010101';
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарок.Регистратор,
	|	алкХранилищеАкцизныхМарок.Период КАК Период
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок КАК алкХранилищеАкцизныхМарок
	|ГДЕ
	|	алкХранилищеАкцизныхМарок.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ) И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеАкцизныхМарок.Регистратор,
	|	алкХранилищеАкцизныхМарок.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОтсчета);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаПоследнегоДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗначениеСчетчика=ХранилищеОбщихНастроек.Загрузить("ХранилищеСбораСтатистикиSQLМарки","ХранилищеСбораСтатистикиSQLМарки",,"ХранилищеСбораСтатистикиSQLМарки");
		УдалитьДанныеМарокДокументов(СтруктураДанных,ВыборкаДетальныеЗаписи.Регистратор);
		ЗначениеСчетчика=ЗначениеСчетчика+1;
		ХранилищеОбщихНастроек.Сохранить("ХранилищеСбораСтатистикиSQLМарки","ХранилищеСбораСтатистикиSQLМарки",ЗначениеСчетчика,,"ХранилищеСбораСтатистикиSQLМарки");
		ХранилищеОбщихНастроек.Сохранить("ХранилищеУдаленияМарокWMS","ХранилищеУдаленияМарокWMS",ВыборкаДетальныеЗаписи.Регистратор.Дата,,"ХранилищеУдаленияМарокWMS");
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура УдалитьДанныеМарокДокументов(СтруктураДанных,СсылкаНаДокумент)
	Если ТипЗнч(СсылкаНаДокумент)=Тип("ДокументСсылка.алкТоварноТранспортнаяНакладнаяЕГАИС") Тогда 
		ОчиститьДанныеТТН(СсылкаНаДокумент,СтруктураДанных);
	КонецЕсли;
	Если ТипЗнч(СсылкаНаДокумент)=Тип("ДокументСсылка.алкАктКТоварноТранспортнойНакладнойЕГАИС") Тогда 
		ОчисткаАктаТТН(СсылкаНаДокумент,СтруктураДанных);
	КонецЕсли;
	Если ТипЗнч(СсылкаНаДокумент)=Тип("ДокументСсылка.алкПереупаковка") Тогда 
		ОчисткаПереупаковки(СсылкаНаДокумент,СтруктураДанных);
	КонецЕсли;
	Если ТипЗнч(СсылкаНаДокумент)=Тип("ДокументСсылка.алкПодтверждениеАктаКТоварноТранспортнойНакладнойЕГАИС") Тогда 
		ОчисткаПодтверждениеАктТТН(СсылкаНаДокумент,СтруктураДанных);
	КонецЕсли;
	Если ТипЗнч(СсылкаНаДокумент)=Тип("ДокументСсылка.алкАктОСписанииТовара") Тогда 
		ОчисткаАктОСписании(СсылкаНаДокумент,СтруктураДанных);
	КонецЕсли;
	Если ТипЗнч(СсылкаНаДокумент)=Тип("ДокументСсылка.алкАктФиксацииШтрихкодовНаБалансеОрганизацииЕГАИС") Тогда 
		ОчисткаАктФиксации(СсылкаНаДокумент,СтруктураДанных);
	КонецЕсли;
	Если ТипЗнч(СсылкаНаДокумент)=Тип("ДокументСсылка.алкАктПостановкиНаБалансЕГАИС") Тогда 
		ОчисткаАктПостановкиНаБаланс(СсылкаНаДокумент,СтруктураДанных);
	КонецЕсли;
	
	
	
	
КонецПроцедуры

Процедура ОчиститьДанныеТТН(СсылкаНаДокумент,СтруктураДанных,Акт=Неопределено)
	МассивДокументов=новый Массив;
	Если СсылкаНаДокумент.ВидДокумента=Перечисления.алкВидыДокументовЕГАИС.Входящий Тогда 
		Если Акт=Неопределено Тогда 
			Акт=НайтиАктКВходящейТТН(СсылкаНаДокумент);
		КонецЕсли;
		Если Акт=Неопределено Тогда 
			ЗаписьЖурналаРегистрации("УдалениеМарокИзДокументов",,,, "К  ттн "+Строка(СсылкаНаДокумент)+" не найден проведеный акт подтверждения, марки найти не возможно");
			Возврат;
		КонецЕсли;
		МассивДокументов.Добавить(СсылкаНаДокумент);
		МассивДокументов.Добавить(Акт);
	иначе
		МассивДокументов.Добавить(СсылкаНаДокумент);	
	КонецЕсли;
	Если  Акт=Неопределено Тогда 
		Если не РазрешениеНаУдалениеМарок(МассивДокументов,СсылкаНаДокумент,СтруктураДанных,Истина) Тогда 
			Возврат
		КонецЕсли;	
	Иначе 
		Если не РазрешениеНаУдалениеМарок(МассивДокументов,Акт,СтруктураДанных) Тогда 
			Возврат
		КонецЕсли;
	КонецЕсли;
	ОчисткаТаблицАкцизныхМарокИУпаковок(СсылкаНаДокумент);
	Если Акт<>Неопределено Тогда 
		ОбъектДокумента=Акт.ПолучитьОбъект();
		Если   ОбъектДокумента.Проведен Тогда 
			ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
		иначе
			ОбъектДокумента.Записать();
		КонецЕсли;	
		
	КонецЕсли;
КонецПроцедуры

Процедура ОчисткаАктаТТН(СсылкаНаДокумент,СтруктураДанных)
	Если СсылкаНаДокумент.ВидАкта<>Перечисления.алкВидыАктовКТоварноТранспортнойНакладнойЕГАИС.АктРасхождения Тогда 
		ОчиститьДанныеТТН(СсылкаНаДокумент.ТоварноТранспортнаяНакладнаяЕГАИС,СтруктураДанных,СсылкаНаДокумент);
		Возврат;
	КонецЕсли;
	СсылкаПодтверженияДокумента=НайтиПодтверждениеАктаКТТН(СсылкаНаДокумент);
	МассивДокументов=новый Массив;
	МассивДокументов.Добавить(СсылкаНаДокумент);
	МассивДокументов.Добавить(СсылкаПодтверженияДокумента);
	Если не РазрешениеНаУдалениеМарокУпрощенное(МассивДокументов,СсылкаПодтверженияДокумента,СтруктураДанных) Тогда 
		Возврат;
	КонецЕсли;	
	ОбъектДокумента=СсылкаНаДокумент.ПолучитьОбъект();
	ОбъектДокумента.АкцизныеМарки.Очистить();
	Если   ОбъектДокумента.Проведен Тогда 
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
	иначе
		ОбъектДокумента.Записать();
	КонецЕсли;
	ОбъектДокумента=СсылкаПодтверженияДокумента.ПолучитьОбъект();
	Если   ОбъектДокумента.Проведен Тогда 
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
	иначе
		ОбъектДокумента.Записать();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОчисткаПереупаковки(СсылкаНаДокумент,СтруктураДанных)
	ТиповаяОчистка( СсылкаНаДокумент,  СтруктураДанных);
КонецПроцедуры

Процедура ОчисткаПодтверждениеАктТТН(СсылкаНаДокумент,СтруктураДанных)
	ОчисткаАктаТТН(СсылкаНаДокумент.АктКТоварноТранспортнойНакладнойЕГАИС,СтруктураДанных);
КонецПроцедуры

Процедура ОчисткаАктОСписании(СсылкаНаДокумент,СтруктураДанных)
	МассивДокументов=новый Массив;
	МассивДокументов.Добавить(СсылкаНаДокумент);
	Если не РазрешениеНаУдалениеМарокУпрощенное(МассивДокументов,СсылкаНаДокумент,СтруктураДанных,Истина) Тогда 
		Возврат;
	КонецЕсли;
	ОбъектДокумента=СсылкаНаДокумент.ПолучитьОбъект();
	ОбъектДокумента.КодыМарок.Очистить();
	Если   ОбъектДокумента.Проведен Тогда 
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
	иначе
		ОбъектДокумента.Записать();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОчисткаАктФиксации(СсылкаНаДокумент,СтруктураДанных)
	Если СсылкаНаДокумент.ОтменаФиксации Тогда 
		ТиповаяОчистка(СсылкаНаДокумент, СтруктураДанных,Истина);
	иначе
		ТиповаяОчистка(СсылкаНаДокумент, СтруктураДанных);
	КонецЕсли;
КонецПроцедуры

Процедура ОчисткаАктПостановкиНаБаланс(СсылкаНаДокумент,СтруктураДанных)
	МассивДокументов=новый Массив;
	МассивДокументов.Добавить(СсылкаНаДокумент);
	Если не РазрешениеНаУдалениеМарок(МассивДокументов,СсылкаНаДокумент,СтруктураДанных) Тогда 
		Возврат;
	КонецЕсли;
	ОбъектДокумента=СсылкаНаДокумент.ПолучитьОбъект();
	ОбъектДокумента.КодыМарок.Очистить();
	ОбъектДокумента.Упаковки.Очистить();
	Если   ОбъектДокумента.Проведен Тогда 
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
	иначе
		ОбъектДокумента.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТиповаяОчистка( СсылкаНаДокумент,  СтруктураДанных,Списание=Ложь)
	
	МассивДокументов=новый Массив;
	МассивДокументов.Добавить(СсылкаНаДокумент);
	Если не РазрешениеНаУдалениеМарок(МассивДокументов,СсылкаНаДокумент,СтруктураДанных,Списание) Тогда 
		Возврат;
	КонецЕсли;
	ОчисткаТаблицАкцизныхМарокИУпаковок(СсылкаНаДокумент);
	
КонецПроцедуры


Процедура ОчисткаТаблицАкцизныхМарокИУпаковок(СсылкаНаДокумент)
	
	
	ОбъектДокумента=СсылкаНаДокумент.ПолучитьОбъект();
	ОбъектДокумента.АкцизныеМарки.Очистить();
	ОбъектДокумента.Упаковки.Очистить();
	Если   ОбъектДокумента.Проведен Тогда 
		ОбъектДокумента.ОбменДанными.Загрузка=Истина;
		ОбъектДокумента.Записать();
		ОчисткаЗаписейРегистра(ОбъектДокумента.Ссылка);
		//ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
	иначе
		ОбъектДокумента.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчисткаЗаписейРегистра(ДокументСсылка)
	НаборкаЗаписей=РегистрыСведений.алкХранилищеАкцизныхМарок.СоздатьНаборЗаписей();
	НаборкаЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	НаборкаЗаписей.Прочитать();
	НаборкаЗаписей.Очистить();
	НаборкаЗаписей.Записать();
	НаборкаЗаписей=РегистрыСведений.алкХранилищеУпаковок.СоздатьНаборЗаписей();
	НаборкаЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	НаборкаЗаписей.Прочитать();
	НаборкаЗаписей.Очистить();
	НаборкаЗаписей.Записать();
КонецПроцедуры
Функция РазрешениеНаУдалениеМарок(МассивДокументов,СсылкаНаДокумент,СтруктураДанных,ДокументСписания=Ложь)
	Если НаличиеДокументовВПалеОбмена(МассивДокументов,СтруктураДанных) Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ДокументСписания Тогда 
		Если не	ВсеМаркиДокументовПоступленияВыбыли(СсылкаНаДокумент) Тогда 
			Возврат Ложь;
		КонецЕсли;	
	иначе
		Если не ВсеМаркиДокументаВыбыли(СсылкаНаДокумент) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если не НаличиеМарокВSQL(СсылкаНаДокумент,СтруктураДанных) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	Если ПроверитьНаличиеУпаковокЗаДокументом(СсылкаНаДокумент) Тогда 
		Если не НаличиеУпаковокВSQL(СсылкаНаДокумент,СтруктураДанных) Тогда 
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	Возврат Истина;
КонецФункции
Функция ПроверитьНаличиеУпаковокЗаДокументом(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	алкХранилищеУпаковокСрезПоследних.Упаковка
	|ИЗ
	|	РегистрСведений.алкХранилищеУпаковок.СрезПоследних(, Регистратор = &Регистратор) КАК алкХранилищеУпаковокСрезПоследних";
	
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
Функция РазрешениеНаУдалениеМарокУпрощенное(МассивДокументов,СсылкаНаДокумент,СтруктураДанных,ДокументСписания=Ложь)
	Если НаличиеДокументовВПалеОбмена(МассивДокументов,СтруктураДанных) Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ДокументСписания Тогда 
		Если не	ВсеМаркиДокументовПоступленияВыбыли(СсылкаНаДокумент) Тогда 
			Возврат Ложь;
		КонецЕсли;	
	иначе
		Если не ВсеМаркиДокументаВыбыли(СсылкаНаДокумент) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если не НаличиеМарокВSQL(СсылкаНаДокумент,СтруктураДанных) Тогда 
		Возврат Ложь;
	КонецЕсли;	  
	Возврат Истина;
КонецФункции

Функция ВсеМаркиДокументаВыбыли(СсылкаНаДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарок.Марка
	|ПОМЕСТИТЬ ВтМарки
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок КАК алкХранилищеАкцизныхМарок
	|ГДЕ
	|	алкХранилищеАкцизныхМарок.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтМарки.Марка
	|ИЗ
	|	ВтМарки КАК ВтМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
	|		ПО ВтМарки.Марка = алкХранилищеАкцизныхМарокСрезПоследних.Марка
	|			И (НЕ алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия)";
	
	Запрос.УстановитьПараметр("Регистратор", СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Ложь;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция ВсеМаркиДокументовПоступленияВыбыли(СсылкаНаДокумент)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарок.Марка
	|ПОМЕСТИТЬ ВтМарки
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок КАК алкХранилищеАкцизныхМарок
	|ГДЕ
	|	алкХранилищеАкцизныхМарок.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарокСрезПервых.Регистратор
	|ИЗ
	|	ВтМарки КАК ВтМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПервых КАК алкХранилищеАкцизныхМарокСрезПервых
	|		ПО ВтМарки.Марка = алкХранилищеАкцизныхМарокСрезПервых.Марка
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеАкцизныхМарокСрезПервых.Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если  не ВсеМаркиДокументаВыбыли(ВыборкаДетальныеЗаписи.Регистратор) Тогда 
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Истина;	
КонецФункции

Функция НаличиеМарокВSQL(Регистратор,СтруктураДанных)
	ТаблицаМарок=СтруктураДанных.Конструктор.ПутьДоТаблицы("public","MarkInfo");
	СоответсвиеОтбора=новый Соответствие;
	СоответсвиеОтбора.Вставить("Registration",СформироватьСтруктуруПоискаРегистратора(Регистратор,СтруктураДанных));
	СтруктураДанных.АдоКоманда.CommandText=СтруктураДанных.Конструктор.СтрогоеЧтениеДанныхПоУсловиям(ТаблицаМарок,СоответсвиеОтбора);
	СтруктураДанных.Recordset = СтруктураДанных.АдоКоманда.Execute();                                                               
	Если    СтруктураДанных.Recordset.EOF() = 0 Тогда  
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция НаличиеУпаковокВSQL(Регистратор,СтруктураДанных)
	ТаблицаУпаковок=СтруктураДанных.Конструктор.ПутьДоТаблицы("public","PackageStorage");
	СоответсвиеОтбора=новый Соответствие;
	СоответсвиеОтбора.Вставить("Registration",СформироватьСтруктуруПоискаРегистратора(Регистратор,СтруктураДанных));
	СтруктураДанных.АдоКоманда.CommandText=СтруктураДанных.Конструктор.СтрогоеЧтениеДанныхПоУсловиям(ТаблицаУпаковок,СоответсвиеОтбора);
	СтруктураДанных.Recordset = СтруктураДанных.АдоКоманда.Execute();                                                               
	Если    СтруктураДанных.Recordset.EOF() = 0 Тогда  
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция НаличиеДокументовВПалеОбмена(МассивДокументов,СтруктураДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарокИзменения.Регистратор
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок.Изменения КАК алкХранилищеАкцизныхМарокИзменения
	|ГДЕ
	|	алкХранилищеАкцизныхМарокИзменения.Узел = &Узел
	|	И алкХранилищеАкцизныхМарокИзменения.Регистратор В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	алкХранилищеУпаковокИзменения.Регистратор
	|ИЗ
	|	РегистрСведений.алкХранилищеУпаковок.Изменения КАК алкХранилищеУпаковокИзменения
	|ГДЕ
	|	алкХранилищеУпаковокИзменения.Узел = &Узел
	|	И алкХранилищеУпаковокИзменения.Регистратор В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Регистратор
	|ИЗ
	|	ВТ КАК ВТ";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("Узел",СтруктураДанных.НастройкиWMS.ПланОбменаSQLМарки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	Возврат Ложь;
	
	
КонецФункции

#КонецОбласти


Процедура РегистрацияИзменений(Параметры) Экспорт 
	Если ТипЗнч(Параметры)<>Тип("Структура") Тогда 
		Возврат
	КонецЕсли;
	НастройкиWMS=ит_WMS_МодульПовИспользованияСеанс.ПолучитьНастройкиИзХранилища();
	Если ТипЗнч(НастройкиWMS)<>Тип("Структура") Тогда 
		Возврат
	КонецЕсли;
	Если не НастройкиWMS.Свойство("ПланОбменаSQLМарки") Тогда 
		Возврат
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарок.Регистратор
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок КАК алкХранилищеАкцизныхМарок
	|ГДЕ
	|	алкХранилищеАкцизныхМарок.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеАкцизныхМарок.Регистратор";
	
	Запрос.УстановитьПараметр("ДатаНачала", Параметры.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Параметры.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.алкХранилищеАкцизныхМарок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		ПланыОбмена.ЗарегистрироватьИзменения(НастройкиWMS.ПланОбменаSQLМарки,НаборЗаписей);	
		ТочечнаяВыборкаИзмененийМарки(НастройкиWMS.ПланОбменаSQLМарки)
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкХранилищеУпаковок.Регистратор
	|ИЗ
	|	РегистрСведений.алкХранилищеУпаковок КАК алкХранилищеУпаковок
	|ГДЕ
	|	алкХранилищеУпаковок.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеУпаковок.Регистратор";
	
	Запрос.УстановитьПараметр("ДатаНачала", Параметры.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Параметры.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.алкХранилищеУпаковок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		ПланыОбмена.ЗарегистрироватьИзменения(НастройкиWMS.ПланОбменаSQLМарки,НаборЗаписей);
		ТочечнаяВыборкаИзмененийУпаковки(НастройкиWMS.ПланОбменаSQLМарки);
	КонецЦикла;
	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	итWMSЗадачиТСД.ДокументОснование.Ссылка
	//|ПОМЕСТИТЬ Вт
	//|ИЗ
	//|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	//|ГДЕ
	//|	итWMSЗадачиТСД.ДокументОснование.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	итWMSЗадачиТСД.ТСД,
	//|	итWMSЗадачиТСД.ДокументОснование КАК ДокументОснование,
	//|	итWMSЗадачиТСД.ТипЗадачи,
	//|	итWMSЗадачиТСД.ИдЗадачи,
	//|	итWMSЗадачиТСД.ИдЗадачиРодителя,
	//|	итWMSЗадачиТСД.ИдентификаторУпаковки,
	//|	итWMSЗадачиТСД.ЯчейкаОтправитель,
	//|	итWMSЗадачиТСД.ЯчейкаПолучатель,
	//|	итWMSЗадачиТСД.ДополнительныеДанные,
	//|	итWMSЗадачиТСД.ДатаНачала,
	//|	итWMSЗадачиТСД.ДатаОкончания,
	//|	итWMSЗадачиТСД.Состояние,
	//|	итWMSЗадачиТСД.ФиксацияЗадачи
	//|ИЗ
	//|	Вт КАК Вт
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	//|		ПО Вт.ДокументОснованиеСсылка = итWMSЗадачиТСД.ДокументОснование
	//|ИТОГИ ПО
	//|	ДокументОснование";
	//
	//Запрос.УстановитьПараметр("ДатаНачала", Параметры.ДатаНачала);
	//Запрос.УстановитьПараметр("ДатаОкончания", Параметры.ДатаОкончания);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДокументОснование = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//Пока ВыборкаДокументОснование.Следующий() Цикл
	//	НачатьТранзакцию();
	//	ВыборкаДетальныеЗаписи = ВыборкаДокументОснование.Выбрать();
	//	
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	//		НаборЗаписей.Отбор.ДокументОснование.Установить(ВыборкаДетальныеЗаписи.ДокументОснование);
	//		НаборЗаписей.Отбор.ТСД.Установить(ВыборкаДетальныеЗаписи.ТСД);
	//		НаборЗаписей.Отбор.ТипЗадачи.Установить(ВыборкаДетальныеЗаписи.ТипЗадачи);
	//		НаборЗаписей.Отбор.ИдЗадачи.Установить(ВыборкаДетальныеЗаписи.ИдЗадачи);
	//		НаборЗаписей.Отбор.ИдЗадачиРодителя.Установить(ВыборкаДетальныеЗаписи.ИдЗадачиРодителя);	
	//		ПланыОбмена.ЗарегистрироватьИзменения(НастройкиWMS.ПланОбменаSQL,НаборЗаписей);
	//		
	//	КонецЦикла;
	//	НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.ДокументОснование.Установить(ВыборкаДетальныеЗаписи.ДокументОснование);
	//	НомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПоследнийНомерИзмененийНаУзлеSQL(НастройкиWMS.ПланОбменаSQL);
	//	ПланыОбмена.ВыбратьИзменения(НастройкиWMS.ПланОбменаSQL,НомерСообщения+1,НаборЗаписей);
	//	ЗафиксироватьТранзакцию();
	//КонецЦикла;
	//
КонецПроцедуры

Процедура ТочечнаяВыборкаИзменений(ПланОбменаSQL)
	
	ТочечнаяВыборкаИзмененийМарки(ПланОбменаSQL);
	
	ТочечнаяВыборкаИзмененийУпаковки(ПланОбменаSQL)
	
КонецПроцедуры

Процедура ТочечнаяВыборкаИзмененийМарки(Знач ПланОбменаSQL)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарокИзменения.Регистратор
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок.Изменения КАК алкХранилищеАкцизныхМарокИзменения
	|ГДЕ
	|	алкХранилищеАкцизныхМарокИзменения.Узел = &Узел
	|	И алкХранилищеАкцизныхМарокИзменения.НомерСообщения ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеАкцизныхМарокИзменения.Регистратор";
	
	Запрос.УстановитьПараметр("Узел", ПланОбменаSQL);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПоследнийНомерИзмененийНаУзлеSQL(ПланОбменаSQL);
		НаборЗаписей=РегистрыСведений.алкХранилищеАкцизныхМарок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		ПланыОбмена.ВыбратьИзменения(ПланОбменаSQL,НомерСообщения+1,НаборЗаписей);
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

Процедура ТочечнаяВыборкаИзмененийУпаковки(Знач ПланОбменаSQL)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкХранилищеУпаковокИзменения.Регистратор
	|ИЗ
	|	РегистрСведений.алкХранилищеУпаковок.Изменения КАК алкХранилищеУпаковокИзменения
	|ГДЕ
	|	алкХранилищеУпаковокИзменения.Узел = &Узел
	|	И алкХранилищеУпаковокИзменения.НомерСообщения ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеУпаковокИзменения.Регистратор";
	
	Запрос.УстановитьПараметр("Узел", ПланОбменаSQL);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПоследнийНомерИзмененийНаУзлеSQL(ПланОбменаSQL);
		НаборЗаписей=РегистрыСведений.алкХранилищеУпаковок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		ПланыОбмена.ВыбратьИзменения(ПланОбменаSQL,НомерСообщения+1,НаборЗаписей);
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииПроцедурыSQL

Процедура ОбработчикЗаписиРегистратораПоВыборке(СтруктураПараметров,Выборка,СтруктураТиповизаций=Неопределено)
	ТаблицаДанных=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","DocumentRegistration");
	СтруктураТиповизации=ПолучитьСтруктуруТиповизции(Выборка.Регистратор);
	Если СтруктураТиповизаций<>Неопределено Тогда 
		СтруктураТиповизаций.Вставить("Регистратор",СтруктураТиповизации);
	КонецЕсли;
	ГУИДДокумента=Выборка.Регистратор.УникальныйИдентификатор();
	СоответсвиеОтбора = ПолучитьСоответсвиеПоискаПоGUID(ГУИДДокумента);
	СоответсвиеЗаписи=ПолучитьСоответсвиеЗаписиРегистратора(Выборка, ГУИДДокумента, СтруктураТиповизации);
	ЗаписьОбвновлениеСсылки(СоответсвиеЗаписи, СоответсвиеОтбора, СтруктураПараметров, ТаблицаДанных);
КонецПроцедуры

Процедура ЗаписьОбвновлениеСсылки(СоответсвиеЗаписи, СоответсвиеОтбора, Знач СтруктураПараметров, ТаблицаДанных)
	
	СтрокаЧтения=СтруктураПараметров.Конструктор.СтрогоеЧтениеДанныхПоУсловиямДляЗаписи(ТаблицаДанных,СоответсвиеОтбора);
	СтруктураПараметров.Recordset =ИсполнитьSQLЗапросЧтение(СтруктураПараметров,СтрокаЧтения); 
	Если  СтруктураПараметров.Recordset.EOF() = 0 Тогда 
		ИсполнитьSQLЗапрос(СтруктураПараметров,СтруктураПараметров.Конструктор.СтрогаяПерезаписьДанных(ТаблицаДанных,СоответсвиеЗаписи,СоответсвиеОтбора));
	иначе
		Попытка
			ИсполнитьSQLЗапрос(СтруктураПараметров,СтруктураПараметров.Конструктор.ЗаписьДанныхПострочно(ТаблицаДанных,СоответсвиеЗаписи));
		Исключение
			ОписаниеОшибкиДанных=ОписаниеОшибки();
			СтруктураПараметров.Recordset =ИсполнитьSQLЗапросЧтение(СтруктураПараметров,СтрокаЧтения); 
			Если  СтруктураПараметров.Recordset.EOF() = 0 Тогда 
				ИсполнитьSQLЗапрос(СтруктураПараметров,СтруктураПараметров.Конструктор.СтрогаяПерезаписьДанных(ТаблицаДанных,СоответсвиеЗаписи,СоответсвиеОтбора));
			иначе
				ВызватьИсключение ОписаниеОшибкиДанных;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкуSQLВСоответствие(СоответствиеЗаписиЗадачТСД,ИмяПоля,ОбъектМетаданных,НулевойИдентификатор=Ложь)
	СтруктураТиповизации= ПолучитьСтруктуруТиповизции(ОбъектМетаданных);
	Если  НулевойИдентификатор Тогда 
		СоответствиеЗаписиЗадачТСД.Вставить(ИмяПоля+"_GUID",Строка(ОбъектМетаданных));
	иначе
		СоответствиеЗаписиЗадачТСД.Вставить(ИмяПоля+"_GUID",ОбъектМетаданных.УникальныйИдентификатор());
	КонецЕсли;
	СоответствиеЗаписиЗадачТСД.Вставить(ИмяПоля+"_TypeValue",СтруктураТиповизации.ИмяМетаданных);
	СоответствиеЗаписиЗадачТСД.Вставить(ИмяПоля+"_TypeMetadata",СтруктураТиповизации.ТипМетаданных);
	СоответствиеЗаписиЗадачТСД.Вставить(ИмяПоля+"_Name",СтруктураТиповизации.Синоним);
КонецПроцедуры

Функция ПолучитьСтруктуруТиповизции(ОбъектМетаданных);  
	СтруктураТиповизации=итWMSСлужебныеПроцедурыИФункции.ПолучитьТипИИмяМетаданныхИзПолногоИмени(ОбъектМетаданных.Метаданные().ПолноеИмя());
	Если СтруктураТиповизации=Неопределено Тогда 
		ВызватьИсключение "ошибка типовизации";
	КонецЕсли;
	СтруктураТиповизации.Вставить("Синоним",ОбъектМетаданных.Метаданные().Синоним);
	Возврат СтруктураТиповизации;
КонецФункции

Функция ПолучитьСоответсвиеПоискаПоGUID(Знач GUID)	
	СоответсвиеОтбора=новый Соответствие;
	СоответсвиеОтбора.Вставить("GUID",GUID);
	Возврат СоответсвиеОтбора;
КонецФункции

Процедура ОжиданиеФоновыхЗаданийSQL(ВсеЗаданияВыполнены, ЕстьАварийноеЗавершение, Знач МассивКлючейФоновыхЗаданий, ОшибкаВремениИсполнения)
	
	ДатаНачала=ТекущаяДата();
	ДесятьМинут=60*60;
	ДатаОкончания= ДатаНачала+ДесятьМинут;
	
	Пока не ВсеЗаданияВыполнены Цикл 
		Если ТекущаяДата()>=ДатаОкончания  Тогда 
			ОшибкаВремениИсполнения=Истина;
			ОтменитьЗаданияSQL(МассивКлючейФоновыхЗаданий);
			Прервать;
		КонецЕсли;	
		ЗаданияВыполнены=Истина;
		SQLПроверкаВыполненияФоновыхЗаданий(МассивКлючейФоновыхЗаданий,ЕстьАварийноеЗавершение,ЗаданияВыполнены);
		Если ЗаданияВыполнены Тогда 
			ВсеЗаданияВыполнены=Истина;
		КонецЕсли;	 
	КонецЦикла;
	
КонецПроцедуры

Процедура SQLПроверкаВыполненияФоновыхЗаданий(Знач МассивКлючейФоновыхЗаданий,ЕстьАварийноеЗавершение,ЗаданияВыполнены)
	
	Для Каждого стр из МассивКлючейФоновыхЗаданий цикл
		МассивЗаданий=ФоновыеЗадания.ПолучитьФоновыеЗадания(новый Структура("Ключ",стр.КлючЗадачния));
		Для Каждого Задание из МассивЗаданий цикл
			Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда 
				ЗаданияВыполнены=Ложь;
			КонецЕсли;
			Если Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда 
				ЗаданияВыполнены=Ложь;
			КонецЕсли;
			Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда 
				ЕстьАварийноеЗавершение=Истина;
				стр.АвайриноеЗавершение=Истина;
			КонецЕсли;
		КонецЦикла;
		Если не ЗаданияВыполнены Тогда 
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьЗаданияSQL(Знач МассивКлючейФоновыхЗаданий)
	Для Каждого стр из МассивКлючейФоновыхЗаданий цикл
		МассивЗаданий=ФоновыеЗадания.ПолучитьФоновыеЗадания(новый Структура("Ключ",стр.КлючЗадачния));
		Для Каждого Задание из МассивЗаданий цикл
			Если Задание.Состояние =СостояниеФоновогоЗадания.Активно Тогда 
				Задание.Отменить();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция СформироватьСтруктуруПоискаРегистратора(Регистратор,СтруктураПараметров)
	ТаблицаРегистраторов=СтруктураПараметров.Конструктор.ПутьДоТаблицы("public","DocumentRegistration");
	СтруктураВложенногоЗапроса=новый Структура;
	МассивИменПолей=новый Массив;
	МассивИменПолей.Добавить("Link");
	СоответствиеЧтенияДанных=новый Соответствие;
	СоответствиеЧтенияДанных.Вставить("GUID",Регистратор.УникальныйИдентификатор());
	СтруктураВложенногоЗапроса.Вставить("ИмяТаблицы",ТаблицаРегистраторов);
	СтруктураВложенногоЗапроса.Вставить("МассивИменПолей",МассивИменПолей);
	СтруктураВложенногоЗапроса.Вставить("СоответсвиеПолейИЗначений",СоответствиеЧтенияДанных);
	Возврат СтруктураВложенногоЗапроса;
КонецФункции

Функция ПолучитьСоответсвиеЗаписиРегистратора(Знач ВыборкаРегистратор, Знач ГУИДРегистратора, Знач СтруктураТиповизации)
	
	СоответсвиеЗаписи=новый Соответствие;
	СоответсвиеЗаписи.Вставить("Link.GUID",ГУИДРегистратора);
	СоответсвиеЗаписи.Вставить("Link.TypeValue",СтруктураТиповизации.ИмяМетаданных);
	СоответсвиеЗаписи.Вставить("Link.TypeMetadata",СтруктураТиповизации.ТипМетаданных);
	СоответсвиеЗаписи.Вставить("Link.Name",СтруктураТиповизации.Синоним);
	СоответсвиеЗаписи.Вставить("DateDocument",ВыборкаРегистратор.Регистратор.Дата);
	СоответсвиеЗаписи.Вставить("NumberDocument",ВыборкаРегистратор.Регистратор.Номер);
	СоответсвиеЗаписи.Вставить("GUID",ГУИДРегистратора);
	Возврат СоответсвиеЗаписи;
	
КонецФункции




#КонецОбласти

#Область РаботаСОтчетами1с

#Область ОтчетПоМаркамPostgresSQL
Функция   ОтчетПоМаркамPostgresSQLРаботасSQL(Отбор) Экспорт 
	СоответсвиеПолей1сИSQl=новый Соответствие;
	СоответсвиеПолей1сИSQl.Вставить("Регистратор","Registration");
	СоответсвиеПолей1сИSQl.Вставить("Дата","DateAndTime");
	СоответсвиеПолей1сИSQl.Вставить("СправкаБ","ApplivationB");
	СоответсвиеПолей1сИSQl.Вставить("Активность","Activity");
	СоответсвиеПолей1сИSQl.Вставить("Марка","Marka");
	СоответсвиеПолей1сИSQl.Вставить("Упаковка","GTIN");
	СоответсвиеПолей1сИSQl.Вставить("ОтметкаВыбытия","OutMark");
	СоответсвиеПолей1сИSQl.Вставить("АлкогольнаяПродукция","ProductionAlcohol");
	СоответсвиеПолей1сИSQl.Вставить("Организация","Organization");
	СоответсвиеПолей1сИSQl.Вставить("ПунктРазгрузки","DeliveryPoint");
	
	ТаблицаДанных=новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Регистратор");
	ТаблицаДанных.Колонки.Добавить("Дата");
	ТаблицаДанных.Колонки.Добавить("СправкаБ");
	ТаблицаДанных.Колонки.Добавить("Активность");
	ТаблицаДанных.Колонки.Добавить("Марка");
	ТаблицаДанных.Колонки.Добавить("Упаковка");
	ТаблицаДанных.Колонки.Добавить("ОтметкаВыбытия");
	ТаблицаДанных.Колонки.Добавить("АлкогольнаяПродукция");
	ТаблицаДанных.Колонки.Добавить("Организация");
	ТаблицаДанных.Колонки.Добавить("ПунктРазгрузки");
	
	
	Конструктор=Обработки.итWMS_КострукторЗапросаPostgresQL.Создать();
	АДОСоединение=итWMSСлужебныеПроцедурыИФункции.ПолучитьСоединениеДоSQLМарки();
	АдоКоманда=итWMSСлужебныеПроцедурыИФункции.ПолучитьADOКоммандуSQL();
	АдоКоманда.ActiveConnection=АДОСоединение;
	АдоКоманда.CommandTimeout=5000;
	Recordset = итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементВыборкиSQL();
	ТаблицаМарок=Конструктор.ПутьДоТаблицы("public","MarkInfo");
	СоответсвиеОтбора=новый Соответствие;
	Для Каждого стр из Отбор Цикл
		Если стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит или стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда 
			Если стр.Использование  и Строка(стр.ЛевоеЗначение)="Регистратор" Тогда 
				СоответсвиеОтбора.Вставить(СоответсвиеПолей1сИSQl.Получить(Строка(стр.ЛевоеЗначение)),ОтчетПоМаркамСтруктуруПоискаРегистратора(стр.ПравоеЗначение,Конструктор));
			ИначеЕсли стр.Использование  и Строка(стр.ЛевоеЗначение)="СправкаБ" Тогда 
				СоответсвиеОтбора.Вставить(СоответсвиеПолей1сИSQl.Получить(Строка(стр.ЛевоеЗначение)),ОтчетПоМаркамСтруктуруПоискаСправкиБ(стр.ПравоеЗначение,Конструктор));
			ИначеЕсли стр.Использование  и Строка(стр.ЛевоеЗначение)="ПунктРазгрузки" Тогда 
				СоответсвиеОтбора.Вставить(СоответсвиеПолей1сИSQl.Получить(Строка(стр.ЛевоеЗначение)),ОтчетПоМаркамСтруктуруПоискаПунктаРазгрузки(стр.ПравоеЗначение,Конструктор));
			ИначеЕсли стр.Использование  и Строка(стр.ЛевоеЗначение)="АлкогольнаяПродукция" Тогда 
				СоответсвиеОтбора.Вставить(СоответсвиеПолей1сИSQl.Получить(Строка(стр.ЛевоеЗначение)),ОтчетПоМаркамСтруктуруПоискаАлкогольнойПродукции(стр.ПравоеЗначение,Конструктор));
			ИначеЕсли стр.Использование  и Строка(стр.ЛевоеЗначение)="Организация" Тогда 
				СоответсвиеОтбора.Вставить(СоответсвиеПолей1сИSQl.Получить(Строка(стр.ЛевоеЗначение)),ОтчетПоМаркамСтруктуруПоискаОрганизации(стр.ПравоеЗначение,Конструктор));
			ИначеЕсли  стр.Использование  Тогда 
				СоответсвиеОтбора.Вставить(СоответсвиеПолей1сИSQl.Получить(Строка(стр.ЛевоеЗначение)),стр.ПравоеЗначение);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	АдоКоманда.CommandText=Конструктор.СтрогоеЧтениеДанныхПоУсловиям(ТаблицаМарок,СоответсвиеОтбора);
	Recordset = АдоКоманда.Execute(); 
	Пока   Recordset.EOF() = 0 Цикл 
		НоваяСтрока=ТаблицаДанных.Добавить();
		НоваяСтрока.Дата=Дата(Recordset.Fields("DateAndTime").Value);
		НоваяСтрока.Регистратор=ПолучитьССылкуПоSQL(Recordset.Fields("Registration").Value);
		НоваяСтрока.СправкаБ=ПолучитьССылкуПоSQL(Recordset.Fields("ApplivationB").Value);
		НоваяСтрока.АлкогольнаяПродукция=ПолучитьССылкуПоSQL(Recordset.Fields("ProductionAlcohol").Value);
		НоваяСтрока.Организация= ПолучитьССылкуПоSQL(Recordset.Fields("Organization").Value);
		НоваяСтрока.ПунктРазгрузки= ПолучитьССылкуПоSQL(Recordset.Fields("DeliveryPoint").Value);
		НоваяСтрока.ОтметкаВыбытия= ?(НРег(Recordset.Fields("OutMark").Value)="1",Истина,Ложь);
		НоваяСтрока.Активность=?(НРег(Recordset.Fields("Activity").Value)="1",Истина,Ложь);
		НоваяСтрока.Марка=Recordset.Fields("Marka").Value;
		НоваяСтрока.Упаковка=Recordset.Fields("GTIN").Value;
		Recordset.moveNext();
	КонецЦикла;
	
	Возврат ТаблицаДанных;
КонецФункции



Функция ПолучитьССылкуПоSQL(Знач Значение)
	ДлинаСтроки=СтрДлина(Значение);
	Значение=Прав(Значение,ДлинаСтроки-1);
	Значение=Лев(Значение,ДлинаСтроки-2);
	МассивЭлементов=итWMSСлужебныеПроцедурыИФункции.Split(Значение,",");
	Гуид=МассивЭлементов[0];
	ИмяЭлемента=СтрЗаменить(МассивЭлементов[1],"""","");
	ТипМетаданных=МассивЭлементов[2];
	Если ТипМетаданных="Справочник" Тогда 
		ТипМетаданных="Справочники";
	ИначеЕсли  ТипМетаданных="Документ" Тогда 
		ТипМетаданных="Документы";
	ИначеЕсли  ТипМетаданных="Перечисление"  Тогда 
		ТипМетаданных="Перечисления";
	КонецЕсли;	
	Ссылка=Вычислить(ТипМетаданных+"."+ИмяЭлемента+".ПолучитьСсылку(новый УникальныйИдентификатор("""+Гуид+"""))");
	Возврат  Ссылка;
КонецФункции

Функция ОтчетПоМаркамСтруктуруПоискаРегистратора(Регистратор,Конструктор)
	ТаблицаРегистраторов=Конструктор.ПутьДоТаблицы("public","DocumentRegistration");
	СтруктураВложенногоЗапроса=новый Структура;
	МассивИменПолей=новый Массив;
	МассивИменПолей.Добавить("Link");
	СоответствиеЧтенияДанных=новый Соответствие;
	СоответствиеЧтенияДанных.Вставить("GUID",Регистратор.УникальныйИдентификатор());
	СтруктураВложенногоЗапроса.Вставить("ИмяТаблицы",ТаблицаРегистраторов);
	СтруктураВложенногоЗапроса.Вставить("МассивИменПолей",МассивИменПолей);
	СтруктураВложенногоЗапроса.Вставить("СоответсвиеПолейИЗначений",СоответствиеЧтенияДанных);
	Возврат СтруктураВложенногоЗапроса;
КонецФункции

Функция ОтчетПоМаркамСтруктуруПоискаСправкиБ(СправкаБ,Конструктор)
	ТаблицаРегистраторов=Конструктор.ПутьДоТаблицы("public","ClassificationReferencesAB");
	СтруктураВложенногоЗапроса=новый Структура;
	МассивИменПолей=новый Массив;
	МассивИменПолей.Добавить("Link");
	СоответствиеЧтенияДанных=новый Соответствие;
	СоответствиеЧтенияДанных.Вставить("GUID",СправкаБ.УникальныйИдентификатор());
	СтруктураВложенногоЗапроса.Вставить("ИмяТаблицы",ТаблицаРегистраторов);
	СтруктураВложенногоЗапроса.Вставить("МассивИменПолей",МассивИменПолей);
	СтруктураВложенногоЗапроса.Вставить("СоответсвиеПолейИЗначений",СоответствиеЧтенияДанных);
	Возврат СтруктураВложенногоЗапроса;
КонецФункции

Функция ОтчетПоМаркамСтруктуруПоискаПунктаРазгрузки(ПунктРагрузки,Конструктор)
	ТаблицаРегистраторов=Конструктор.ПутьДоТаблицы("public","DischargePoint");
	СтруктураВложенногоЗапроса=новый Структура;
	МассивИменПолей=новый Массив;
	МассивИменПолей.Добавить("Link");
	СоответствиеЧтенияДанных=новый Соответствие;
	СоответствиеЧтенияДанных.Вставить("GUID",ПунктРагрузки.УникальныйИдентификатор());
	СтруктураВложенногоЗапроса.Вставить("ИмяТаблицы",ТаблицаРегистраторов);
	СтруктураВложенногоЗапроса.Вставить("МассивИменПолей",МассивИменПолей);
	СтруктураВложенногоЗапроса.Вставить("СоответсвиеПолейИЗначений",СоответствиеЧтенияДанных);
	Возврат СтруктураВложенногоЗапроса;
КонецФункции
Функция ОтчетПоМаркамСтруктуруПоискаАлкогольнойПродукции(АлкПродукция,Конструктор)
	ТаблицаРегистраторов=Конструктор.ПутьДоТаблицы("public","ClassifierAlcoholicProducts");
	СтруктураВложенногоЗапроса=новый Структура;
	МассивИменПолей=новый Массив;
	МассивИменПолей.Добавить("Link");
	СоответствиеЧтенияДанных=новый Соответствие;
	СоответствиеЧтенияДанных.Вставить("GUID",АлкПродукция.УникальныйИдентификатор());
	СтруктураВложенногоЗапроса.Вставить("ИмяТаблицы",ТаблицаРегистраторов);
	СтруктураВложенногоЗапроса.Вставить("МассивИменПолей",МассивИменПолей);
	СтруктураВложенногоЗапроса.Вставить("СоответсвиеПолейИЗначений",СоответствиеЧтенияДанных);
	Возврат СтруктураВложенногоЗапроса;
КонецФункции
Функция ОтчетПоМаркамСтруктуруПоискаОрганизации(Организация,Конструктор)
	ТаблицаРегистраторов=Конструктор.ПутьДоТаблицы("public","Organizations");
	СтруктураВложенногоЗапроса=новый Структура;
	МассивИменПолей=новый Массив;
	МассивИменПолей.Добавить("Link");
	СоответствиеЧтенияДанных=новый Соответствие;
	СоответствиеЧтенияДанных.Вставить("GUID",Организация.УникальныйИдентификатор());
	СтруктураВложенногоЗапроса.Вставить("ИмяТаблицы",ТаблицаРегистраторов);
	СтруктураВложенногоЗапроса.Вставить("МассивИменПолей",МассивИменПолей);
	СтруктураВложенногоЗапроса.Вставить("СоответсвиеПолейИЗначений",СоответствиеЧтенияДанных);
	Возврат СтруктураВложенногоЗапроса;
КонецФункции





#КонецОбласти

#КонецОбласти
#КонецОбласти


